
Modbus-DCDriver-G030K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da3c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  0800daf8  0800daf8  0001daf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e440  0800e440  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800e440  0800e440  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e440  0800e440  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e440  0800e440  0001e440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e444  0800e444  0001e444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800e448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000264  0800e6ac  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800e6ac  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea6d  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c4a  00000000  00000000  0003ecf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00045258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c466  00000000  00000000  00046978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b0d  00000000  00000000  00062dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a040  00000000  00000000  000858eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f92b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006728  00000000  00000000  0011f97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000264 	.word	0x20000264
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800dadc 	.word	0x0800dadc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000268 	.word	0x20000268
 80000fc:	0800dadc 	.word	0x0800dadc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ff0d 	bl	8001254 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fe5d 	bl	8001104 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 feff 	bl	8001254 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fef5 	bl	8001254 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fe85 	bl	8001188 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fe7b 	bl	8001188 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	000d      	movs	r5, r1
 80004aa:	0004      	movs	r4, r0
 80004ac:	b5c0      	push	{r6, r7, lr}
 80004ae:	001f      	movs	r7, r3
 80004b0:	0011      	movs	r1, r2
 80004b2:	0328      	lsls	r0, r5, #12
 80004b4:	0f62      	lsrs	r2, r4, #29
 80004b6:	0a40      	lsrs	r0, r0, #9
 80004b8:	4310      	orrs	r0, r2
 80004ba:	007a      	lsls	r2, r7, #1
 80004bc:	0d52      	lsrs	r2, r2, #21
 80004be:	00e3      	lsls	r3, r4, #3
 80004c0:	033c      	lsls	r4, r7, #12
 80004c2:	4691      	mov	r9, r2
 80004c4:	0a64      	lsrs	r4, r4, #9
 80004c6:	0ffa      	lsrs	r2, r7, #31
 80004c8:	0f4f      	lsrs	r7, r1, #29
 80004ca:	006e      	lsls	r6, r5, #1
 80004cc:	4327      	orrs	r7, r4
 80004ce:	4692      	mov	sl, r2
 80004d0:	46b8      	mov	r8, r7
 80004d2:	0d76      	lsrs	r6, r6, #21
 80004d4:	0fed      	lsrs	r5, r5, #31
 80004d6:	00c9      	lsls	r1, r1, #3
 80004d8:	4295      	cmp	r5, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x3e>
 80004dc:	e099      	b.n	8000612 <__aeabi_dadd+0x172>
 80004de:	464c      	mov	r4, r9
 80004e0:	1b34      	subs	r4, r6, r4
 80004e2:	46a4      	mov	ip, r4
 80004e4:	2c00      	cmp	r4, #0
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_dadd+0x4a>
 80004e8:	e07c      	b.n	80005e4 <__aeabi_dadd+0x144>
 80004ea:	464a      	mov	r2, r9
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x52>
 80004f0:	e0b8      	b.n	8000664 <__aeabi_dadd+0x1c4>
 80004f2:	4ac5      	ldr	r2, [pc, #788]	; (8000808 <__aeabi_dadd+0x368>)
 80004f4:	4296      	cmp	r6, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x5a>
 80004f8:	e11c      	b.n	8000734 <__aeabi_dadd+0x294>
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	003c      	movs	r4, r7
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	4314      	orrs	r4, r2
 8000502:	46a0      	mov	r8, r4
 8000504:	4662      	mov	r2, ip
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x6c>
 800050a:	e161      	b.n	80007d0 <__aeabi_dadd+0x330>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x72>
 8000510:	e1cc      	b.n	80008ac <__aeabi_dadd+0x40c>
 8000512:	4664      	mov	r4, ip
 8000514:	2220      	movs	r2, #32
 8000516:	1b12      	subs	r2, r2, r4
 8000518:	4644      	mov	r4, r8
 800051a:	4094      	lsls	r4, r2
 800051c:	000f      	movs	r7, r1
 800051e:	46a1      	mov	r9, r4
 8000520:	4664      	mov	r4, ip
 8000522:	4091      	lsls	r1, r2
 8000524:	40e7      	lsrs	r7, r4
 8000526:	464c      	mov	r4, r9
 8000528:	1e4a      	subs	r2, r1, #1
 800052a:	4191      	sbcs	r1, r2
 800052c:	433c      	orrs	r4, r7
 800052e:	4642      	mov	r2, r8
 8000530:	4321      	orrs	r1, r4
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	1a80      	subs	r0, r0, r2
 8000538:	1a5c      	subs	r4, r3, r1
 800053a:	42a3      	cmp	r3, r4
 800053c:	419b      	sbcs	r3, r3
 800053e:	425f      	negs	r7, r3
 8000540:	1bc7      	subs	r7, r0, r7
 8000542:	023b      	lsls	r3, r7, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0xa8>
 8000546:	e0d0      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000548:	027f      	lsls	r7, r7, #9
 800054a:	0a7f      	lsrs	r7, r7, #9
 800054c:	2f00      	cmp	r7, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0xb2>
 8000550:	e0ff      	b.n	8000752 <__aeabi_dadd+0x2b2>
 8000552:	0038      	movs	r0, r7
 8000554:	f001 fd8a 	bl	800206c <__clzsi2>
 8000558:	0001      	movs	r1, r0
 800055a:	3908      	subs	r1, #8
 800055c:	2320      	movs	r3, #32
 800055e:	0022      	movs	r2, r4
 8000560:	1a5b      	subs	r3, r3, r1
 8000562:	408f      	lsls	r7, r1
 8000564:	40da      	lsrs	r2, r3
 8000566:	408c      	lsls	r4, r1
 8000568:	4317      	orrs	r7, r2
 800056a:	42b1      	cmp	r1, r6
 800056c:	da00      	bge.n	8000570 <__aeabi_dadd+0xd0>
 800056e:	e0ff      	b.n	8000770 <__aeabi_dadd+0x2d0>
 8000570:	1b89      	subs	r1, r1, r6
 8000572:	1c4b      	adds	r3, r1, #1
 8000574:	2b1f      	cmp	r3, #31
 8000576:	dd00      	ble.n	800057a <__aeabi_dadd+0xda>
 8000578:	e0a8      	b.n	80006cc <__aeabi_dadd+0x22c>
 800057a:	2220      	movs	r2, #32
 800057c:	0039      	movs	r1, r7
 800057e:	1ad2      	subs	r2, r2, r3
 8000580:	0020      	movs	r0, r4
 8000582:	4094      	lsls	r4, r2
 8000584:	4091      	lsls	r1, r2
 8000586:	40d8      	lsrs	r0, r3
 8000588:	1e62      	subs	r2, r4, #1
 800058a:	4194      	sbcs	r4, r2
 800058c:	40df      	lsrs	r7, r3
 800058e:	2600      	movs	r6, #0
 8000590:	4301      	orrs	r1, r0
 8000592:	430c      	orrs	r4, r1
 8000594:	0763      	lsls	r3, r4, #29
 8000596:	d009      	beq.n	80005ac <__aeabi_dadd+0x10c>
 8000598:	230f      	movs	r3, #15
 800059a:	4023      	ands	r3, r4
 800059c:	2b04      	cmp	r3, #4
 800059e:	d005      	beq.n	80005ac <__aeabi_dadd+0x10c>
 80005a0:	1d23      	adds	r3, r4, #4
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	41a4      	sbcs	r4, r4
 80005a6:	4264      	negs	r4, r4
 80005a8:	193f      	adds	r7, r7, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	023b      	lsls	r3, r7, #8
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_dadd+0x112>
 80005b0:	e09e      	b.n	80006f0 <__aeabi_dadd+0x250>
 80005b2:	4b95      	ldr	r3, [pc, #596]	; (8000808 <__aeabi_dadd+0x368>)
 80005b4:	3601      	adds	r6, #1
 80005b6:	429e      	cmp	r6, r3
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x11c>
 80005ba:	e0b7      	b.n	800072c <__aeabi_dadd+0x28c>
 80005bc:	4a93      	ldr	r2, [pc, #588]	; (800080c <__aeabi_dadd+0x36c>)
 80005be:	08e4      	lsrs	r4, r4, #3
 80005c0:	4017      	ands	r7, r2
 80005c2:	077b      	lsls	r3, r7, #29
 80005c4:	0571      	lsls	r1, r6, #21
 80005c6:	027f      	lsls	r7, r7, #9
 80005c8:	4323      	orrs	r3, r4
 80005ca:	0b3f      	lsrs	r7, r7, #12
 80005cc:	0d4a      	lsrs	r2, r1, #21
 80005ce:	0512      	lsls	r2, r2, #20
 80005d0:	433a      	orrs	r2, r7
 80005d2:	07ed      	lsls	r5, r5, #31
 80005d4:	432a      	orrs	r2, r5
 80005d6:	0018      	movs	r0, r3
 80005d8:	0011      	movs	r1, r2
 80005da:	bce0      	pop	{r5, r6, r7}
 80005dc:	46ba      	mov	sl, r7
 80005de:	46b1      	mov	r9, r6
 80005e0:	46a8      	mov	r8, r5
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d04b      	beq.n	8000680 <__aeabi_dadd+0x1e0>
 80005e8:	464c      	mov	r4, r9
 80005ea:	1ba4      	subs	r4, r4, r6
 80005ec:	46a4      	mov	ip, r4
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d000      	beq.n	80005f4 <__aeabi_dadd+0x154>
 80005f2:	e123      	b.n	800083c <__aeabi_dadd+0x39c>
 80005f4:	0004      	movs	r4, r0
 80005f6:	431c      	orrs	r4, r3
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x15c>
 80005fa:	e1af      	b.n	800095c <__aeabi_dadd+0x4bc>
 80005fc:	4662      	mov	r2, ip
 80005fe:	1e54      	subs	r4, r2, #1
 8000600:	2a01      	cmp	r2, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x166>
 8000604:	e215      	b.n	8000a32 <__aeabi_dadd+0x592>
 8000606:	4d80      	ldr	r5, [pc, #512]	; (8000808 <__aeabi_dadd+0x368>)
 8000608:	45ac      	cmp	ip, r5
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x16e>
 800060c:	e1c8      	b.n	80009a0 <__aeabi_dadd+0x500>
 800060e:	46a4      	mov	ip, r4
 8000610:	e11b      	b.n	800084a <__aeabi_dadd+0x3aa>
 8000612:	464a      	mov	r2, r9
 8000614:	1ab2      	subs	r2, r6, r2
 8000616:	4694      	mov	ip, r2
 8000618:	2a00      	cmp	r2, #0
 800061a:	dc00      	bgt.n	800061e <__aeabi_dadd+0x17e>
 800061c:	e0ac      	b.n	8000778 <__aeabi_dadd+0x2d8>
 800061e:	464a      	mov	r2, r9
 8000620:	2a00      	cmp	r2, #0
 8000622:	d043      	beq.n	80006ac <__aeabi_dadd+0x20c>
 8000624:	4a78      	ldr	r2, [pc, #480]	; (8000808 <__aeabi_dadd+0x368>)
 8000626:	4296      	cmp	r6, r2
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x18c>
 800062a:	e1af      	b.n	800098c <__aeabi_dadd+0x4ec>
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	003c      	movs	r4, r7
 8000630:	0412      	lsls	r2, r2, #16
 8000632:	4314      	orrs	r4, r2
 8000634:	46a0      	mov	r8, r4
 8000636:	4662      	mov	r2, ip
 8000638:	2a38      	cmp	r2, #56	; 0x38
 800063a:	dc67      	bgt.n	800070c <__aeabi_dadd+0x26c>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x1a2>
 8000640:	e15f      	b.n	8000902 <__aeabi_dadd+0x462>
 8000642:	4647      	mov	r7, r8
 8000644:	3a20      	subs	r2, #32
 8000646:	40d7      	lsrs	r7, r2
 8000648:	4662      	mov	r2, ip
 800064a:	2a20      	cmp	r2, #32
 800064c:	d005      	beq.n	800065a <__aeabi_dadd+0x1ba>
 800064e:	4664      	mov	r4, ip
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	1b12      	subs	r2, r2, r4
 8000654:	4644      	mov	r4, r8
 8000656:	4094      	lsls	r4, r2
 8000658:	4321      	orrs	r1, r4
 800065a:	1e4a      	subs	r2, r1, #1
 800065c:	4191      	sbcs	r1, r2
 800065e:	000c      	movs	r4, r1
 8000660:	433c      	orrs	r4, r7
 8000662:	e057      	b.n	8000714 <__aeabi_dadd+0x274>
 8000664:	003a      	movs	r2, r7
 8000666:	430a      	orrs	r2, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1cc>
 800066a:	e105      	b.n	8000878 <__aeabi_dadd+0x3d8>
 800066c:	0022      	movs	r2, r4
 800066e:	3a01      	subs	r2, #1
 8000670:	2c01      	cmp	r4, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x1d6>
 8000674:	e182      	b.n	800097c <__aeabi_dadd+0x4dc>
 8000676:	4c64      	ldr	r4, [pc, #400]	; (8000808 <__aeabi_dadd+0x368>)
 8000678:	45a4      	cmp	ip, r4
 800067a:	d05b      	beq.n	8000734 <__aeabi_dadd+0x294>
 800067c:	4694      	mov	ip, r2
 800067e:	e741      	b.n	8000504 <__aeabi_dadd+0x64>
 8000680:	4c63      	ldr	r4, [pc, #396]	; (8000810 <__aeabi_dadd+0x370>)
 8000682:	1c77      	adds	r7, r6, #1
 8000684:	4227      	tst	r7, r4
 8000686:	d000      	beq.n	800068a <__aeabi_dadd+0x1ea>
 8000688:	e0c4      	b.n	8000814 <__aeabi_dadd+0x374>
 800068a:	0004      	movs	r4, r0
 800068c:	431c      	orrs	r4, r3
 800068e:	2e00      	cmp	r6, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_dadd+0x1f4>
 8000692:	e169      	b.n	8000968 <__aeabi_dadd+0x4c8>
 8000694:	2c00      	cmp	r4, #0
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x1fa>
 8000698:	e1bf      	b.n	8000a1a <__aeabi_dadd+0x57a>
 800069a:	4644      	mov	r4, r8
 800069c:	430c      	orrs	r4, r1
 800069e:	d000      	beq.n	80006a2 <__aeabi_dadd+0x202>
 80006a0:	e1d0      	b.n	8000a44 <__aeabi_dadd+0x5a4>
 80006a2:	0742      	lsls	r2, r0, #29
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	08c0      	lsrs	r0, r0, #3
 80006aa:	e029      	b.n	8000700 <__aeabi_dadd+0x260>
 80006ac:	003a      	movs	r2, r7
 80006ae:	430a      	orrs	r2, r1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x214>
 80006b2:	e170      	b.n	8000996 <__aeabi_dadd+0x4f6>
 80006b4:	4662      	mov	r2, ip
 80006b6:	4664      	mov	r4, ip
 80006b8:	3a01      	subs	r2, #1
 80006ba:	2c01      	cmp	r4, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x220>
 80006be:	e0e0      	b.n	8000882 <__aeabi_dadd+0x3e2>
 80006c0:	4c51      	ldr	r4, [pc, #324]	; (8000808 <__aeabi_dadd+0x368>)
 80006c2:	45a4      	cmp	ip, r4
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x228>
 80006c6:	e161      	b.n	800098c <__aeabi_dadd+0x4ec>
 80006c8:	4694      	mov	ip, r2
 80006ca:	e7b4      	b.n	8000636 <__aeabi_dadd+0x196>
 80006cc:	003a      	movs	r2, r7
 80006ce:	391f      	subs	r1, #31
 80006d0:	40ca      	lsrs	r2, r1
 80006d2:	0011      	movs	r1, r2
 80006d4:	2b20      	cmp	r3, #32
 80006d6:	d003      	beq.n	80006e0 <__aeabi_dadd+0x240>
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	409f      	lsls	r7, r3
 80006de:	433c      	orrs	r4, r7
 80006e0:	1e63      	subs	r3, r4, #1
 80006e2:	419c      	sbcs	r4, r3
 80006e4:	2700      	movs	r7, #0
 80006e6:	2600      	movs	r6, #0
 80006e8:	430c      	orrs	r4, r1
 80006ea:	0763      	lsls	r3, r4, #29
 80006ec:	d000      	beq.n	80006f0 <__aeabi_dadd+0x250>
 80006ee:	e753      	b.n	8000598 <__aeabi_dadd+0xf8>
 80006f0:	46b4      	mov	ip, r6
 80006f2:	08e4      	lsrs	r4, r4, #3
 80006f4:	077b      	lsls	r3, r7, #29
 80006f6:	4323      	orrs	r3, r4
 80006f8:	08f8      	lsrs	r0, r7, #3
 80006fa:	4a43      	ldr	r2, [pc, #268]	; (8000808 <__aeabi_dadd+0x368>)
 80006fc:	4594      	cmp	ip, r2
 80006fe:	d01d      	beq.n	800073c <__aeabi_dadd+0x29c>
 8000700:	4662      	mov	r2, ip
 8000702:	0307      	lsls	r7, r0, #12
 8000704:	0552      	lsls	r2, r2, #21
 8000706:	0b3f      	lsrs	r7, r7, #12
 8000708:	0d52      	lsrs	r2, r2, #21
 800070a:	e760      	b.n	80005ce <__aeabi_dadd+0x12e>
 800070c:	4644      	mov	r4, r8
 800070e:	430c      	orrs	r4, r1
 8000710:	1e62      	subs	r2, r4, #1
 8000712:	4194      	sbcs	r4, r2
 8000714:	18e4      	adds	r4, r4, r3
 8000716:	429c      	cmp	r4, r3
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	183f      	adds	r7, r7, r0
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d5e3      	bpl.n	80006ea <__aeabi_dadd+0x24a>
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <__aeabi_dadd+0x368>)
 8000724:	3601      	adds	r6, #1
 8000726:	429e      	cmp	r6, r3
 8000728:	d000      	beq.n	800072c <__aeabi_dadd+0x28c>
 800072a:	e0b5      	b.n	8000898 <__aeabi_dadd+0x3f8>
 800072c:	0032      	movs	r2, r6
 800072e:	2700      	movs	r7, #0
 8000730:	2300      	movs	r3, #0
 8000732:	e74c      	b.n	80005ce <__aeabi_dadd+0x12e>
 8000734:	0742      	lsls	r2, r0, #29
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	4313      	orrs	r3, r2
 800073a:	08c0      	lsrs	r0, r0, #3
 800073c:	001a      	movs	r2, r3
 800073e:	4302      	orrs	r2, r0
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x2a4>
 8000742:	e1e1      	b.n	8000b08 <__aeabi_dadd+0x668>
 8000744:	2780      	movs	r7, #128	; 0x80
 8000746:	033f      	lsls	r7, r7, #12
 8000748:	4307      	orrs	r7, r0
 800074a:	033f      	lsls	r7, r7, #12
 800074c:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <__aeabi_dadd+0x368>)
 800074e:	0b3f      	lsrs	r7, r7, #12
 8000750:	e73d      	b.n	80005ce <__aeabi_dadd+0x12e>
 8000752:	0020      	movs	r0, r4
 8000754:	f001 fc8a 	bl	800206c <__clzsi2>
 8000758:	0001      	movs	r1, r0
 800075a:	3118      	adds	r1, #24
 800075c:	291f      	cmp	r1, #31
 800075e:	dc00      	bgt.n	8000762 <__aeabi_dadd+0x2c2>
 8000760:	e6fc      	b.n	800055c <__aeabi_dadd+0xbc>
 8000762:	3808      	subs	r0, #8
 8000764:	4084      	lsls	r4, r0
 8000766:	0027      	movs	r7, r4
 8000768:	2400      	movs	r4, #0
 800076a:	42b1      	cmp	r1, r6
 800076c:	db00      	blt.n	8000770 <__aeabi_dadd+0x2d0>
 800076e:	e6ff      	b.n	8000570 <__aeabi_dadd+0xd0>
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <__aeabi_dadd+0x36c>)
 8000772:	1a76      	subs	r6, r6, r1
 8000774:	4017      	ands	r7, r2
 8000776:	e70d      	b.n	8000594 <__aeabi_dadd+0xf4>
 8000778:	2a00      	cmp	r2, #0
 800077a:	d02f      	beq.n	80007dc <__aeabi_dadd+0x33c>
 800077c:	464a      	mov	r2, r9
 800077e:	1b92      	subs	r2, r2, r6
 8000780:	4694      	mov	ip, r2
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x2e8>
 8000786:	e0ad      	b.n	80008e4 <__aeabi_dadd+0x444>
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <__aeabi_dadd+0x368>)
 800078a:	4591      	cmp	r9, r2
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2f0>
 800078e:	e10f      	b.n	80009b0 <__aeabi_dadd+0x510>
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0412      	lsls	r2, r2, #16
 8000794:	4310      	orrs	r0, r2
 8000796:	4662      	mov	r2, ip
 8000798:	2a38      	cmp	r2, #56	; 0x38
 800079a:	dd00      	ble.n	800079e <__aeabi_dadd+0x2fe>
 800079c:	e10f      	b.n	80009be <__aeabi_dadd+0x51e>
 800079e:	2a1f      	cmp	r2, #31
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0x304>
 80007a2:	e180      	b.n	8000aa6 <__aeabi_dadd+0x606>
 80007a4:	4664      	mov	r4, ip
 80007a6:	2220      	movs	r2, #32
 80007a8:	001e      	movs	r6, r3
 80007aa:	1b12      	subs	r2, r2, r4
 80007ac:	4667      	mov	r7, ip
 80007ae:	0004      	movs	r4, r0
 80007b0:	4093      	lsls	r3, r2
 80007b2:	4094      	lsls	r4, r2
 80007b4:	40fe      	lsrs	r6, r7
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	4193      	sbcs	r3, r2
 80007ba:	40f8      	lsrs	r0, r7
 80007bc:	4334      	orrs	r4, r6
 80007be:	431c      	orrs	r4, r3
 80007c0:	4480      	add	r8, r0
 80007c2:	1864      	adds	r4, r4, r1
 80007c4:	428c      	cmp	r4, r1
 80007c6:	41bf      	sbcs	r7, r7
 80007c8:	427f      	negs	r7, r7
 80007ca:	464e      	mov	r6, r9
 80007cc:	4447      	add	r7, r8
 80007ce:	e7a6      	b.n	800071e <__aeabi_dadd+0x27e>
 80007d0:	4642      	mov	r2, r8
 80007d2:	430a      	orrs	r2, r1
 80007d4:	0011      	movs	r1, r2
 80007d6:	1e4a      	subs	r2, r1, #1
 80007d8:	4191      	sbcs	r1, r2
 80007da:	e6ad      	b.n	8000538 <__aeabi_dadd+0x98>
 80007dc:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__aeabi_dadd+0x370>)
 80007de:	1c72      	adds	r2, r6, #1
 80007e0:	4222      	tst	r2, r4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dadd+0x346>
 80007e4:	e0a1      	b.n	800092a <__aeabi_dadd+0x48a>
 80007e6:	0002      	movs	r2, r0
 80007e8:	431a      	orrs	r2, r3
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x350>
 80007ee:	e0fa      	b.n	80009e6 <__aeabi_dadd+0x546>
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x356>
 80007f4:	e145      	b.n	8000a82 <__aeabi_dadd+0x5e2>
 80007f6:	003a      	movs	r2, r7
 80007f8:	430a      	orrs	r2, r1
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x35e>
 80007fc:	e146      	b.n	8000a8c <__aeabi_dadd+0x5ec>
 80007fe:	0742      	lsls	r2, r0, #29
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	4313      	orrs	r3, r2
 8000804:	08c0      	lsrs	r0, r0, #3
 8000806:	e77b      	b.n	8000700 <__aeabi_dadd+0x260>
 8000808:	000007ff 	.word	0x000007ff
 800080c:	ff7fffff 	.word	0xff7fffff
 8000810:	000007fe 	.word	0x000007fe
 8000814:	4647      	mov	r7, r8
 8000816:	1a5c      	subs	r4, r3, r1
 8000818:	1bc2      	subs	r2, r0, r7
 800081a:	42a3      	cmp	r3, r4
 800081c:	41bf      	sbcs	r7, r7
 800081e:	427f      	negs	r7, r7
 8000820:	46b9      	mov	r9, r7
 8000822:	0017      	movs	r7, r2
 8000824:	464a      	mov	r2, r9
 8000826:	1abf      	subs	r7, r7, r2
 8000828:	023a      	lsls	r2, r7, #8
 800082a:	d500      	bpl.n	800082e <__aeabi_dadd+0x38e>
 800082c:	e08d      	b.n	800094a <__aeabi_dadd+0x4aa>
 800082e:	0023      	movs	r3, r4
 8000830:	433b      	orrs	r3, r7
 8000832:	d000      	beq.n	8000836 <__aeabi_dadd+0x396>
 8000834:	e68a      	b.n	800054c <__aeabi_dadd+0xac>
 8000836:	2000      	movs	r0, #0
 8000838:	2500      	movs	r5, #0
 800083a:	e761      	b.n	8000700 <__aeabi_dadd+0x260>
 800083c:	4cb4      	ldr	r4, [pc, #720]	; (8000b10 <__aeabi_dadd+0x670>)
 800083e:	45a1      	cmp	r9, r4
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x3a4>
 8000842:	e0ad      	b.n	80009a0 <__aeabi_dadd+0x500>
 8000844:	2480      	movs	r4, #128	; 0x80
 8000846:	0424      	lsls	r4, r4, #16
 8000848:	4320      	orrs	r0, r4
 800084a:	4664      	mov	r4, ip
 800084c:	2c38      	cmp	r4, #56	; 0x38
 800084e:	dc3d      	bgt.n	80008cc <__aeabi_dadd+0x42c>
 8000850:	4662      	mov	r2, ip
 8000852:	2c1f      	cmp	r4, #31
 8000854:	dd00      	ble.n	8000858 <__aeabi_dadd+0x3b8>
 8000856:	e0b7      	b.n	80009c8 <__aeabi_dadd+0x528>
 8000858:	2520      	movs	r5, #32
 800085a:	001e      	movs	r6, r3
 800085c:	1b2d      	subs	r5, r5, r4
 800085e:	0004      	movs	r4, r0
 8000860:	40ab      	lsls	r3, r5
 8000862:	40ac      	lsls	r4, r5
 8000864:	40d6      	lsrs	r6, r2
 8000866:	40d0      	lsrs	r0, r2
 8000868:	4642      	mov	r2, r8
 800086a:	1e5d      	subs	r5, r3, #1
 800086c:	41ab      	sbcs	r3, r5
 800086e:	4334      	orrs	r4, r6
 8000870:	1a12      	subs	r2, r2, r0
 8000872:	4690      	mov	r8, r2
 8000874:	4323      	orrs	r3, r4
 8000876:	e02c      	b.n	80008d2 <__aeabi_dadd+0x432>
 8000878:	0742      	lsls	r2, r0, #29
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	4313      	orrs	r3, r2
 800087e:	08c0      	lsrs	r0, r0, #3
 8000880:	e73b      	b.n	80006fa <__aeabi_dadd+0x25a>
 8000882:	185c      	adds	r4, r3, r1
 8000884:	429c      	cmp	r4, r3
 8000886:	419b      	sbcs	r3, r3
 8000888:	4440      	add	r0, r8
 800088a:	425b      	negs	r3, r3
 800088c:	18c7      	adds	r7, r0, r3
 800088e:	2601      	movs	r6, #1
 8000890:	023b      	lsls	r3, r7, #8
 8000892:	d400      	bmi.n	8000896 <__aeabi_dadd+0x3f6>
 8000894:	e729      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000896:	2602      	movs	r6, #2
 8000898:	4a9e      	ldr	r2, [pc, #632]	; (8000b14 <__aeabi_dadd+0x674>)
 800089a:	0863      	lsrs	r3, r4, #1
 800089c:	4017      	ands	r7, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	4014      	ands	r4, r2
 80008a2:	431c      	orrs	r4, r3
 80008a4:	07fb      	lsls	r3, r7, #31
 80008a6:	431c      	orrs	r4, r3
 80008a8:	087f      	lsrs	r7, r7, #1
 80008aa:	e673      	b.n	8000594 <__aeabi_dadd+0xf4>
 80008ac:	4644      	mov	r4, r8
 80008ae:	3a20      	subs	r2, #32
 80008b0:	40d4      	lsrs	r4, r2
 80008b2:	4662      	mov	r2, ip
 80008b4:	2a20      	cmp	r2, #32
 80008b6:	d005      	beq.n	80008c4 <__aeabi_dadd+0x424>
 80008b8:	4667      	mov	r7, ip
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	1bd2      	subs	r2, r2, r7
 80008be:	4647      	mov	r7, r8
 80008c0:	4097      	lsls	r7, r2
 80008c2:	4339      	orrs	r1, r7
 80008c4:	1e4a      	subs	r2, r1, #1
 80008c6:	4191      	sbcs	r1, r2
 80008c8:	4321      	orrs	r1, r4
 80008ca:	e635      	b.n	8000538 <__aeabi_dadd+0x98>
 80008cc:	4303      	orrs	r3, r0
 80008ce:	1e58      	subs	r0, r3, #1
 80008d0:	4183      	sbcs	r3, r0
 80008d2:	1acc      	subs	r4, r1, r3
 80008d4:	42a1      	cmp	r1, r4
 80008d6:	41bf      	sbcs	r7, r7
 80008d8:	4643      	mov	r3, r8
 80008da:	427f      	negs	r7, r7
 80008dc:	4655      	mov	r5, sl
 80008de:	464e      	mov	r6, r9
 80008e0:	1bdf      	subs	r7, r3, r7
 80008e2:	e62e      	b.n	8000542 <__aeabi_dadd+0xa2>
 80008e4:	0002      	movs	r2, r0
 80008e6:	431a      	orrs	r2, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x44c>
 80008ea:	e0bd      	b.n	8000a68 <__aeabi_dadd+0x5c8>
 80008ec:	4662      	mov	r2, ip
 80008ee:	4664      	mov	r4, ip
 80008f0:	3a01      	subs	r2, #1
 80008f2:	2c01      	cmp	r4, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x458>
 80008f6:	e0e5      	b.n	8000ac4 <__aeabi_dadd+0x624>
 80008f8:	4c85      	ldr	r4, [pc, #532]	; (8000b10 <__aeabi_dadd+0x670>)
 80008fa:	45a4      	cmp	ip, r4
 80008fc:	d058      	beq.n	80009b0 <__aeabi_dadd+0x510>
 80008fe:	4694      	mov	ip, r2
 8000900:	e749      	b.n	8000796 <__aeabi_dadd+0x2f6>
 8000902:	4664      	mov	r4, ip
 8000904:	2220      	movs	r2, #32
 8000906:	1b12      	subs	r2, r2, r4
 8000908:	4644      	mov	r4, r8
 800090a:	4094      	lsls	r4, r2
 800090c:	000f      	movs	r7, r1
 800090e:	46a1      	mov	r9, r4
 8000910:	4664      	mov	r4, ip
 8000912:	4091      	lsls	r1, r2
 8000914:	40e7      	lsrs	r7, r4
 8000916:	464c      	mov	r4, r9
 8000918:	1e4a      	subs	r2, r1, #1
 800091a:	4191      	sbcs	r1, r2
 800091c:	433c      	orrs	r4, r7
 800091e:	4642      	mov	r2, r8
 8000920:	430c      	orrs	r4, r1
 8000922:	4661      	mov	r1, ip
 8000924:	40ca      	lsrs	r2, r1
 8000926:	1880      	adds	r0, r0, r2
 8000928:	e6f4      	b.n	8000714 <__aeabi_dadd+0x274>
 800092a:	4c79      	ldr	r4, [pc, #484]	; (8000b10 <__aeabi_dadd+0x670>)
 800092c:	42a2      	cmp	r2, r4
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x492>
 8000930:	e6fd      	b.n	800072e <__aeabi_dadd+0x28e>
 8000932:	1859      	adds	r1, r3, r1
 8000934:	4299      	cmp	r1, r3
 8000936:	419b      	sbcs	r3, r3
 8000938:	4440      	add	r0, r8
 800093a:	425f      	negs	r7, r3
 800093c:	19c7      	adds	r7, r0, r7
 800093e:	07fc      	lsls	r4, r7, #31
 8000940:	0849      	lsrs	r1, r1, #1
 8000942:	0016      	movs	r6, r2
 8000944:	430c      	orrs	r4, r1
 8000946:	087f      	lsrs	r7, r7, #1
 8000948:	e6cf      	b.n	80006ea <__aeabi_dadd+0x24a>
 800094a:	1acc      	subs	r4, r1, r3
 800094c:	42a1      	cmp	r1, r4
 800094e:	41bf      	sbcs	r7, r7
 8000950:	4643      	mov	r3, r8
 8000952:	427f      	negs	r7, r7
 8000954:	1a18      	subs	r0, r3, r0
 8000956:	4655      	mov	r5, sl
 8000958:	1bc7      	subs	r7, r0, r7
 800095a:	e5f7      	b.n	800054c <__aeabi_dadd+0xac>
 800095c:	08c9      	lsrs	r1, r1, #3
 800095e:	077b      	lsls	r3, r7, #29
 8000960:	4655      	mov	r5, sl
 8000962:	430b      	orrs	r3, r1
 8000964:	08f8      	lsrs	r0, r7, #3
 8000966:	e6c8      	b.n	80006fa <__aeabi_dadd+0x25a>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d000      	beq.n	800096e <__aeabi_dadd+0x4ce>
 800096c:	e081      	b.n	8000a72 <__aeabi_dadd+0x5d2>
 800096e:	4643      	mov	r3, r8
 8000970:	430b      	orrs	r3, r1
 8000972:	d115      	bne.n	80009a0 <__aeabi_dadd+0x500>
 8000974:	2080      	movs	r0, #128	; 0x80
 8000976:	2500      	movs	r5, #0
 8000978:	0300      	lsls	r0, r0, #12
 800097a:	e6e3      	b.n	8000744 <__aeabi_dadd+0x2a4>
 800097c:	1a5c      	subs	r4, r3, r1
 800097e:	42a3      	cmp	r3, r4
 8000980:	419b      	sbcs	r3, r3
 8000982:	1bc7      	subs	r7, r0, r7
 8000984:	425b      	negs	r3, r3
 8000986:	2601      	movs	r6, #1
 8000988:	1aff      	subs	r7, r7, r3
 800098a:	e5da      	b.n	8000542 <__aeabi_dadd+0xa2>
 800098c:	0742      	lsls	r2, r0, #29
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	4313      	orrs	r3, r2
 8000992:	08c0      	lsrs	r0, r0, #3
 8000994:	e6d2      	b.n	800073c <__aeabi_dadd+0x29c>
 8000996:	0742      	lsls	r2, r0, #29
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	4313      	orrs	r3, r2
 800099c:	08c0      	lsrs	r0, r0, #3
 800099e:	e6ac      	b.n	80006fa <__aeabi_dadd+0x25a>
 80009a0:	4643      	mov	r3, r8
 80009a2:	4642      	mov	r2, r8
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	075b      	lsls	r3, r3, #29
 80009a8:	4655      	mov	r5, sl
 80009aa:	430b      	orrs	r3, r1
 80009ac:	08d0      	lsrs	r0, r2, #3
 80009ae:	e6c5      	b.n	800073c <__aeabi_dadd+0x29c>
 80009b0:	4643      	mov	r3, r8
 80009b2:	4642      	mov	r2, r8
 80009b4:	075b      	lsls	r3, r3, #29
 80009b6:	08c9      	lsrs	r1, r1, #3
 80009b8:	430b      	orrs	r3, r1
 80009ba:	08d0      	lsrs	r0, r2, #3
 80009bc:	e6be      	b.n	800073c <__aeabi_dadd+0x29c>
 80009be:	4303      	orrs	r3, r0
 80009c0:	001c      	movs	r4, r3
 80009c2:	1e63      	subs	r3, r4, #1
 80009c4:	419c      	sbcs	r4, r3
 80009c6:	e6fc      	b.n	80007c2 <__aeabi_dadd+0x322>
 80009c8:	0002      	movs	r2, r0
 80009ca:	3c20      	subs	r4, #32
 80009cc:	40e2      	lsrs	r2, r4
 80009ce:	0014      	movs	r4, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	2a20      	cmp	r2, #32
 80009d4:	d003      	beq.n	80009de <__aeabi_dadd+0x53e>
 80009d6:	2540      	movs	r5, #64	; 0x40
 80009d8:	1aad      	subs	r5, r5, r2
 80009da:	40a8      	lsls	r0, r5
 80009dc:	4303      	orrs	r3, r0
 80009de:	1e58      	subs	r0, r3, #1
 80009e0:	4183      	sbcs	r3, r0
 80009e2:	4323      	orrs	r3, r4
 80009e4:	e775      	b.n	80008d2 <__aeabi_dadd+0x432>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d0e2      	beq.n	80009b0 <__aeabi_dadd+0x510>
 80009ea:	003a      	movs	r2, r7
 80009ec:	430a      	orrs	r2, r1
 80009ee:	d0cd      	beq.n	800098c <__aeabi_dadd+0x4ec>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	08c0      	lsrs	r0, r0, #3
 80009fa:	0312      	lsls	r2, r2, #12
 80009fc:	4210      	tst	r0, r2
 80009fe:	d006      	beq.n	8000a0e <__aeabi_dadd+0x56e>
 8000a00:	08fc      	lsrs	r4, r7, #3
 8000a02:	4214      	tst	r4, r2
 8000a04:	d103      	bne.n	8000a0e <__aeabi_dadd+0x56e>
 8000a06:	0020      	movs	r0, r4
 8000a08:	08cb      	lsrs	r3, r1, #3
 8000a0a:	077a      	lsls	r2, r7, #29
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	0f5a      	lsrs	r2, r3, #29
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	0752      	lsls	r2, r2, #29
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	e690      	b.n	800073c <__aeabi_dadd+0x29c>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x582>
 8000a20:	e709      	b.n	8000836 <__aeabi_dadd+0x396>
 8000a22:	4643      	mov	r3, r8
 8000a24:	4642      	mov	r2, r8
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	075b      	lsls	r3, r3, #29
 8000a2a:	4655      	mov	r5, sl
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	08d0      	lsrs	r0, r2, #3
 8000a30:	e666      	b.n	8000700 <__aeabi_dadd+0x260>
 8000a32:	1acc      	subs	r4, r1, r3
 8000a34:	42a1      	cmp	r1, r4
 8000a36:	4189      	sbcs	r1, r1
 8000a38:	1a3f      	subs	r7, r7, r0
 8000a3a:	4249      	negs	r1, r1
 8000a3c:	4655      	mov	r5, sl
 8000a3e:	2601      	movs	r6, #1
 8000a40:	1a7f      	subs	r7, r7, r1
 8000a42:	e57e      	b.n	8000542 <__aeabi_dadd+0xa2>
 8000a44:	4642      	mov	r2, r8
 8000a46:	1a5c      	subs	r4, r3, r1
 8000a48:	1a87      	subs	r7, r0, r2
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	4192      	sbcs	r2, r2
 8000a4e:	4252      	negs	r2, r2
 8000a50:	1abf      	subs	r7, r7, r2
 8000a52:	023a      	lsls	r2, r7, #8
 8000a54:	d53d      	bpl.n	8000ad2 <__aeabi_dadd+0x632>
 8000a56:	1acc      	subs	r4, r1, r3
 8000a58:	42a1      	cmp	r1, r4
 8000a5a:	4189      	sbcs	r1, r1
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4249      	negs	r1, r1
 8000a60:	1a1f      	subs	r7, r3, r0
 8000a62:	4655      	mov	r5, sl
 8000a64:	1a7f      	subs	r7, r7, r1
 8000a66:	e595      	b.n	8000594 <__aeabi_dadd+0xf4>
 8000a68:	077b      	lsls	r3, r7, #29
 8000a6a:	08c9      	lsrs	r1, r1, #3
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	08f8      	lsrs	r0, r7, #3
 8000a70:	e643      	b.n	80006fa <__aeabi_dadd+0x25a>
 8000a72:	4644      	mov	r4, r8
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	430c      	orrs	r4, r1
 8000a78:	d130      	bne.n	8000adc <__aeabi_dadd+0x63c>
 8000a7a:	0742      	lsls	r2, r0, #29
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	08c0      	lsrs	r0, r0, #3
 8000a80:	e65c      	b.n	800073c <__aeabi_dadd+0x29c>
 8000a82:	077b      	lsls	r3, r7, #29
 8000a84:	08c9      	lsrs	r1, r1, #3
 8000a86:	430b      	orrs	r3, r1
 8000a88:	08f8      	lsrs	r0, r7, #3
 8000a8a:	e639      	b.n	8000700 <__aeabi_dadd+0x260>
 8000a8c:	185c      	adds	r4, r3, r1
 8000a8e:	429c      	cmp	r4, r3
 8000a90:	419b      	sbcs	r3, r3
 8000a92:	4440      	add	r0, r8
 8000a94:	425b      	negs	r3, r3
 8000a96:	18c7      	adds	r7, r0, r3
 8000a98:	023b      	lsls	r3, r7, #8
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_dadd+0x5fe>
 8000a9c:	e625      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <__aeabi_dadd+0x674>)
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	401f      	ands	r7, r3
 8000aa4:	e621      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	3a20      	subs	r2, #32
 8000aaa:	40d4      	lsrs	r4, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	2a20      	cmp	r2, #32
 8000ab0:	d004      	beq.n	8000abc <__aeabi_dadd+0x61c>
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	4666      	mov	r6, ip
 8000ab6:	1b92      	subs	r2, r2, r6
 8000ab8:	4090      	lsls	r0, r2
 8000aba:	4303      	orrs	r3, r0
 8000abc:	1e5a      	subs	r2, r3, #1
 8000abe:	4193      	sbcs	r3, r2
 8000ac0:	431c      	orrs	r4, r3
 8000ac2:	e67e      	b.n	80007c2 <__aeabi_dadd+0x322>
 8000ac4:	185c      	adds	r4, r3, r1
 8000ac6:	428c      	cmp	r4, r1
 8000ac8:	4189      	sbcs	r1, r1
 8000aca:	4440      	add	r0, r8
 8000acc:	4249      	negs	r1, r1
 8000ace:	1847      	adds	r7, r0, r1
 8000ad0:	e6dd      	b.n	800088e <__aeabi_dadd+0x3ee>
 8000ad2:	0023      	movs	r3, r4
 8000ad4:	433b      	orrs	r3, r7
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x63a>
 8000ad8:	e6ad      	b.n	8000836 <__aeabi_dadd+0x396>
 8000ada:	e606      	b.n	80006ea <__aeabi_dadd+0x24a>
 8000adc:	0744      	lsls	r4, r0, #29
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	2480      	movs	r4, #128	; 0x80
 8000ae2:	08c0      	lsrs	r0, r0, #3
 8000ae4:	0324      	lsls	r4, r4, #12
 8000ae6:	4220      	tst	r0, r4
 8000ae8:	d008      	beq.n	8000afc <__aeabi_dadd+0x65c>
 8000aea:	4642      	mov	r2, r8
 8000aec:	08d6      	lsrs	r6, r2, #3
 8000aee:	4226      	tst	r6, r4
 8000af0:	d104      	bne.n	8000afc <__aeabi_dadd+0x65c>
 8000af2:	4655      	mov	r5, sl
 8000af4:	0030      	movs	r0, r6
 8000af6:	08cb      	lsrs	r3, r1, #3
 8000af8:	0751      	lsls	r1, r2, #29
 8000afa:	430b      	orrs	r3, r1
 8000afc:	0f5a      	lsrs	r2, r3, #29
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	0752      	lsls	r2, r2, #29
 8000b04:	4313      	orrs	r3, r2
 8000b06:	e619      	b.n	800073c <__aeabi_dadd+0x29c>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4a01      	ldr	r2, [pc, #4]	; (8000b10 <__aeabi_dadd+0x670>)
 8000b0c:	001f      	movs	r7, r3
 8000b0e:	e55e      	b.n	80005ce <__aeabi_dadd+0x12e>
 8000b10:	000007ff 	.word	0x000007ff
 8000b14:	ff7fffff 	.word	0xff7fffff

08000b18 <__aeabi_ddiv>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	4657      	mov	r7, sl
 8000b1c:	464e      	mov	r6, r9
 8000b1e:	4645      	mov	r5, r8
 8000b20:	46de      	mov	lr, fp
 8000b22:	b5e0      	push	{r5, r6, r7, lr}
 8000b24:	4681      	mov	r9, r0
 8000b26:	0005      	movs	r5, r0
 8000b28:	030c      	lsls	r4, r1, #12
 8000b2a:	0048      	lsls	r0, r1, #1
 8000b2c:	4692      	mov	sl, r2
 8000b2e:	001f      	movs	r7, r3
 8000b30:	b085      	sub	sp, #20
 8000b32:	0b24      	lsrs	r4, r4, #12
 8000b34:	0d40      	lsrs	r0, r0, #21
 8000b36:	0fce      	lsrs	r6, r1, #31
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_ddiv+0x26>
 8000b3c:	e156      	b.n	8000dec <__aeabi_ddiv+0x2d4>
 8000b3e:	4bd4      	ldr	r3, [pc, #848]	; (8000e90 <__aeabi_ddiv+0x378>)
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x2e>
 8000b44:	e172      	b.n	8000e2c <__aeabi_ddiv+0x314>
 8000b46:	0f6b      	lsrs	r3, r5, #29
 8000b48:	00e4      	lsls	r4, r4, #3
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	041b      	lsls	r3, r3, #16
 8000b50:	4323      	orrs	r3, r4
 8000b52:	4698      	mov	r8, r3
 8000b54:	4bcf      	ldr	r3, [pc, #828]	; (8000e94 <__aeabi_ddiv+0x37c>)
 8000b56:	00ed      	lsls	r5, r5, #3
 8000b58:	469b      	mov	fp, r3
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	4483      	add	fp, r0
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	033c      	lsls	r4, r7, #12
 8000b64:	007b      	lsls	r3, r7, #1
 8000b66:	4650      	mov	r0, sl
 8000b68:	0b24      	lsrs	r4, r4, #12
 8000b6a:	0d5b      	lsrs	r3, r3, #21
 8000b6c:	0fff      	lsrs	r7, r7, #31
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0x5c>
 8000b72:	e11f      	b.n	8000db4 <__aeabi_ddiv+0x29c>
 8000b74:	4ac6      	ldr	r2, [pc, #792]	; (8000e90 <__aeabi_ddiv+0x378>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x64>
 8000b7a:	e162      	b.n	8000e42 <__aeabi_ddiv+0x32a>
 8000b7c:	49c5      	ldr	r1, [pc, #788]	; (8000e94 <__aeabi_ddiv+0x37c>)
 8000b7e:	0f42      	lsrs	r2, r0, #29
 8000b80:	468c      	mov	ip, r1
 8000b82:	00e4      	lsls	r4, r4, #3
 8000b84:	4659      	mov	r1, fp
 8000b86:	4314      	orrs	r4, r2
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	4463      	add	r3, ip
 8000b8c:	0412      	lsls	r2, r2, #16
 8000b8e:	1acb      	subs	r3, r1, r3
 8000b90:	4314      	orrs	r4, r2
 8000b92:	469b      	mov	fp, r3
 8000b94:	00c2      	lsls	r2, r0, #3
 8000b96:	2000      	movs	r0, #0
 8000b98:	0033      	movs	r3, r6
 8000b9a:	407b      	eors	r3, r7
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d827      	bhi.n	8000bf4 <__aeabi_ddiv+0xdc>
 8000ba4:	49bc      	ldr	r1, [pc, #752]	; (8000e98 <__aeabi_ddiv+0x380>)
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	58cb      	ldr	r3, [r1, r3]
 8000baa:	469f      	mov	pc, r3
 8000bac:	46b2      	mov	sl, r6
 8000bae:	9b00      	ldr	r3, [sp, #0]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d016      	beq.n	8000be2 <__aeabi_ddiv+0xca>
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d100      	bne.n	8000bba <__aeabi_ddiv+0xa2>
 8000bb8:	e28e      	b.n	80010d8 <__aeabi_ddiv+0x5c0>
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_ddiv+0xa8>
 8000bbe:	e0d9      	b.n	8000d74 <__aeabi_ddiv+0x25c>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	4652      	mov	r2, sl
 8000bc8:	051b      	lsls	r3, r3, #20
 8000bca:	4323      	orrs	r3, r4
 8000bcc:	07d2      	lsls	r2, r2, #31
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	0028      	movs	r0, r5
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	b005      	add	sp, #20
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	46bb      	mov	fp, r7
 8000bda:	46b2      	mov	sl, r6
 8000bdc:	46a9      	mov	r9, r5
 8000bde:	46a0      	mov	r8, r4
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	2400      	movs	r4, #0
 8000be4:	2500      	movs	r5, #0
 8000be6:	4baa      	ldr	r3, [pc, #680]	; (8000e90 <__aeabi_ddiv+0x378>)
 8000be8:	e7ed      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46a0      	mov	r8, r4
 8000bee:	0015      	movs	r5, r2
 8000bf0:	9000      	str	r0, [sp, #0]
 8000bf2:	e7dc      	b.n	8000bae <__aeabi_ddiv+0x96>
 8000bf4:	4544      	cmp	r4, r8
 8000bf6:	d200      	bcs.n	8000bfa <__aeabi_ddiv+0xe2>
 8000bf8:	e1c7      	b.n	8000f8a <__aeabi_ddiv+0x472>
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_ddiv+0xe6>
 8000bfc:	e1c2      	b.n	8000f84 <__aeabi_ddiv+0x46c>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	425b      	negs	r3, r3
 8000c02:	469c      	mov	ip, r3
 8000c04:	002e      	movs	r6, r5
 8000c06:	4640      	mov	r0, r8
 8000c08:	2500      	movs	r5, #0
 8000c0a:	44e3      	add	fp, ip
 8000c0c:	0223      	lsls	r3, r4, #8
 8000c0e:	0e14      	lsrs	r4, r2, #24
 8000c10:	431c      	orrs	r4, r3
 8000c12:	0c1b      	lsrs	r3, r3, #16
 8000c14:	4699      	mov	r9, r3
 8000c16:	0423      	lsls	r3, r4, #16
 8000c18:	0c1f      	lsrs	r7, r3, #16
 8000c1a:	0212      	lsls	r2, r2, #8
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	9701      	str	r7, [sp, #4]
 8000c22:	f7ff fb0f 	bl	8000244 <__aeabi_uidivmod>
 8000c26:	0002      	movs	r2, r0
 8000c28:	437a      	muls	r2, r7
 8000c2a:	040b      	lsls	r3, r1, #16
 8000c2c:	0c31      	lsrs	r1, r6, #16
 8000c2e:	4680      	mov	r8, r0
 8000c30:	4319      	orrs	r1, r3
 8000c32:	428a      	cmp	r2, r1
 8000c34:	d907      	bls.n	8000c46 <__aeabi_ddiv+0x12e>
 8000c36:	2301      	movs	r3, #1
 8000c38:	425b      	negs	r3, r3
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	1909      	adds	r1, r1, r4
 8000c3e:	44e0      	add	r8, ip
 8000c40:	428c      	cmp	r4, r1
 8000c42:	d800      	bhi.n	8000c46 <__aeabi_ddiv+0x12e>
 8000c44:	e207      	b.n	8001056 <__aeabi_ddiv+0x53e>
 8000c46:	1a88      	subs	r0, r1, r2
 8000c48:	4649      	mov	r1, r9
 8000c4a:	f7ff fafb 	bl	8000244 <__aeabi_uidivmod>
 8000c4e:	0409      	lsls	r1, r1, #16
 8000c50:	468c      	mov	ip, r1
 8000c52:	0431      	lsls	r1, r6, #16
 8000c54:	4666      	mov	r6, ip
 8000c56:	9a01      	ldr	r2, [sp, #4]
 8000c58:	0c09      	lsrs	r1, r1, #16
 8000c5a:	4342      	muls	r2, r0
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	4331      	orrs	r1, r6
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d904      	bls.n	8000c6e <__aeabi_ddiv+0x156>
 8000c64:	1909      	adds	r1, r1, r4
 8000c66:	3b01      	subs	r3, #1
 8000c68:	428c      	cmp	r4, r1
 8000c6a:	d800      	bhi.n	8000c6e <__aeabi_ddiv+0x156>
 8000c6c:	e1ed      	b.n	800104a <__aeabi_ddiv+0x532>
 8000c6e:	1a88      	subs	r0, r1, r2
 8000c70:	4642      	mov	r2, r8
 8000c72:	0412      	lsls	r2, r2, #16
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4690      	mov	r8, r2
 8000c78:	4641      	mov	r1, r8
 8000c7a:	9b00      	ldr	r3, [sp, #0]
 8000c7c:	040e      	lsls	r6, r1, #16
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	001f      	movs	r7, r3
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	9b00      	ldr	r3, [sp, #0]
 8000c86:	0c36      	lsrs	r6, r6, #16
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	0c19      	lsrs	r1, r3, #16
 8000c8c:	000b      	movs	r3, r1
 8000c8e:	4373      	muls	r3, r6
 8000c90:	0c12      	lsrs	r2, r2, #16
 8000c92:	437e      	muls	r6, r7
 8000c94:	9103      	str	r1, [sp, #12]
 8000c96:	4351      	muls	r1, r2
 8000c98:	437a      	muls	r2, r7
 8000c9a:	0c1f      	lsrs	r7, r3, #16
 8000c9c:	46bc      	mov	ip, r7
 8000c9e:	1876      	adds	r6, r6, r1
 8000ca0:	4466      	add	r6, ip
 8000ca2:	42b1      	cmp	r1, r6
 8000ca4:	d903      	bls.n	8000cae <__aeabi_ddiv+0x196>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	468c      	mov	ip, r1
 8000cac:	4462      	add	r2, ip
 8000cae:	0c31      	lsrs	r1, r6, #16
 8000cb0:	188a      	adds	r2, r1, r2
 8000cb2:	0431      	lsls	r1, r6, #16
 8000cb4:	041e      	lsls	r6, r3, #16
 8000cb6:	0c36      	lsrs	r6, r6, #16
 8000cb8:	198e      	adds	r6, r1, r6
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d302      	bcc.n	8000cc4 <__aeabi_ddiv+0x1ac>
 8000cbe:	d112      	bne.n	8000ce6 <__aeabi_ddiv+0x1ce>
 8000cc0:	42b5      	cmp	r5, r6
 8000cc2:	d210      	bcs.n	8000ce6 <__aeabi_ddiv+0x1ce>
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	1e59      	subs	r1, r3, #1
 8000cc8:	9b00      	ldr	r3, [sp, #0]
 8000cca:	469c      	mov	ip, r3
 8000ccc:	4465      	add	r5, ip
 8000cce:	001f      	movs	r7, r3
 8000cd0:	429d      	cmp	r5, r3
 8000cd2:	419b      	sbcs	r3, r3
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	191b      	adds	r3, r3, r4
 8000cd8:	18c0      	adds	r0, r0, r3
 8000cda:	4284      	cmp	r4, r0
 8000cdc:	d200      	bcs.n	8000ce0 <__aeabi_ddiv+0x1c8>
 8000cde:	e1a0      	b.n	8001022 <__aeabi_ddiv+0x50a>
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x1cc>
 8000ce2:	e19b      	b.n	800101c <__aeabi_ddiv+0x504>
 8000ce4:	4688      	mov	r8, r1
 8000ce6:	1bae      	subs	r6, r5, r6
 8000ce8:	42b5      	cmp	r5, r6
 8000cea:	41ad      	sbcs	r5, r5
 8000cec:	1a80      	subs	r0, r0, r2
 8000cee:	426d      	negs	r5, r5
 8000cf0:	1b40      	subs	r0, r0, r5
 8000cf2:	4284      	cmp	r4, r0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x1e0>
 8000cf6:	e1d5      	b.n	80010a4 <__aeabi_ddiv+0x58c>
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	f7ff faa3 	bl	8000244 <__aeabi_uidivmod>
 8000cfe:	9a01      	ldr	r2, [sp, #4]
 8000d00:	040b      	lsls	r3, r1, #16
 8000d02:	4342      	muls	r2, r0
 8000d04:	0c31      	lsrs	r1, r6, #16
 8000d06:	0005      	movs	r5, r0
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	d900      	bls.n	8000d10 <__aeabi_ddiv+0x1f8>
 8000d0e:	e16c      	b.n	8000fea <__aeabi_ddiv+0x4d2>
 8000d10:	1a88      	subs	r0, r1, r2
 8000d12:	4649      	mov	r1, r9
 8000d14:	f7ff fa96 	bl	8000244 <__aeabi_uidivmod>
 8000d18:	9a01      	ldr	r2, [sp, #4]
 8000d1a:	0436      	lsls	r6, r6, #16
 8000d1c:	4342      	muls	r2, r0
 8000d1e:	0409      	lsls	r1, r1, #16
 8000d20:	0c36      	lsrs	r6, r6, #16
 8000d22:	0003      	movs	r3, r0
 8000d24:	430e      	orrs	r6, r1
 8000d26:	42b2      	cmp	r2, r6
 8000d28:	d900      	bls.n	8000d2c <__aeabi_ddiv+0x214>
 8000d2a:	e153      	b.n	8000fd4 <__aeabi_ddiv+0x4bc>
 8000d2c:	9803      	ldr	r0, [sp, #12]
 8000d2e:	1ab6      	subs	r6, r6, r2
 8000d30:	0002      	movs	r2, r0
 8000d32:	042d      	lsls	r5, r5, #16
 8000d34:	431d      	orrs	r5, r3
 8000d36:	9f02      	ldr	r7, [sp, #8]
 8000d38:	042b      	lsls	r3, r5, #16
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	435a      	muls	r2, r3
 8000d3e:	437b      	muls	r3, r7
 8000d40:	469c      	mov	ip, r3
 8000d42:	0c29      	lsrs	r1, r5, #16
 8000d44:	4348      	muls	r0, r1
 8000d46:	0c13      	lsrs	r3, r2, #16
 8000d48:	4484      	add	ip, r0
 8000d4a:	4463      	add	r3, ip
 8000d4c:	4379      	muls	r1, r7
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d903      	bls.n	8000d5a <__aeabi_ddiv+0x242>
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	0240      	lsls	r0, r0, #9
 8000d56:	4684      	mov	ip, r0
 8000d58:	4461      	add	r1, ip
 8000d5a:	0c18      	lsrs	r0, r3, #16
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	0c12      	lsrs	r2, r2, #16
 8000d62:	1841      	adds	r1, r0, r1
 8000d64:	189b      	adds	r3, r3, r2
 8000d66:	428e      	cmp	r6, r1
 8000d68:	d200      	bcs.n	8000d6c <__aeabi_ddiv+0x254>
 8000d6a:	e0ff      	b.n	8000f6c <__aeabi_ddiv+0x454>
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_ddiv+0x258>
 8000d6e:	e0fa      	b.n	8000f66 <__aeabi_ddiv+0x44e>
 8000d70:	2301      	movs	r3, #1
 8000d72:	431d      	orrs	r5, r3
 8000d74:	4a49      	ldr	r2, [pc, #292]	; (8000e9c <__aeabi_ddiv+0x384>)
 8000d76:	445a      	add	r2, fp
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_ddiv+0x266>
 8000d7c:	e0aa      	b.n	8000ed4 <__aeabi_ddiv+0x3bc>
 8000d7e:	076b      	lsls	r3, r5, #29
 8000d80:	d000      	beq.n	8000d84 <__aeabi_ddiv+0x26c>
 8000d82:	e13d      	b.n	8001000 <__aeabi_ddiv+0x4e8>
 8000d84:	08ed      	lsrs	r5, r5, #3
 8000d86:	4643      	mov	r3, r8
 8000d88:	01db      	lsls	r3, r3, #7
 8000d8a:	d506      	bpl.n	8000d9a <__aeabi_ddiv+0x282>
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <__aeabi_ddiv+0x388>)
 8000d90:	401a      	ands	r2, r3
 8000d92:	4690      	mov	r8, r2
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	00d2      	lsls	r2, r2, #3
 8000d98:	445a      	add	r2, fp
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <__aeabi_ddiv+0x38c>)
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_ddiv+0x28a>
 8000da0:	e71f      	b.n	8000be2 <__aeabi_ddiv+0xca>
 8000da2:	4643      	mov	r3, r8
 8000da4:	075b      	lsls	r3, r3, #29
 8000da6:	431d      	orrs	r5, r3
 8000da8:	4643      	mov	r3, r8
 8000daa:	0552      	lsls	r2, r2, #21
 8000dac:	025c      	lsls	r4, r3, #9
 8000dae:	0b24      	lsrs	r4, r4, #12
 8000db0:	0d53      	lsrs	r3, r2, #21
 8000db2:	e708      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000db4:	4652      	mov	r2, sl
 8000db6:	4322      	orrs	r2, r4
 8000db8:	d100      	bne.n	8000dbc <__aeabi_ddiv+0x2a4>
 8000dba:	e07b      	b.n	8000eb4 <__aeabi_ddiv+0x39c>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0x2aa>
 8000dc0:	e0fa      	b.n	8000fb8 <__aeabi_ddiv+0x4a0>
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f001 f952 	bl	800206c <__clzsi2>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	3a0b      	subs	r2, #11
 8000dcc:	231d      	movs	r3, #29
 8000dce:	0001      	movs	r1, r0
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	4652      	mov	r2, sl
 8000dd4:	3908      	subs	r1, #8
 8000dd6:	40da      	lsrs	r2, r3
 8000dd8:	408c      	lsls	r4, r1
 8000dda:	4314      	orrs	r4, r2
 8000ddc:	4652      	mov	r2, sl
 8000dde:	408a      	lsls	r2, r1
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <__aeabi_ddiv+0x390>)
 8000de2:	4458      	add	r0, fp
 8000de4:	469b      	mov	fp, r3
 8000de6:	4483      	add	fp, r0
 8000de8:	2000      	movs	r0, #0
 8000dea:	e6d5      	b.n	8000b98 <__aeabi_ddiv+0x80>
 8000dec:	464b      	mov	r3, r9
 8000dee:	4323      	orrs	r3, r4
 8000df0:	4698      	mov	r8, r3
 8000df2:	d044      	beq.n	8000e7e <__aeabi_ddiv+0x366>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x2e2>
 8000df8:	e0ce      	b.n	8000f98 <__aeabi_ddiv+0x480>
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f001 f936 	bl	800206c <__clzsi2>
 8000e00:	0001      	movs	r1, r0
 8000e02:	0002      	movs	r2, r0
 8000e04:	390b      	subs	r1, #11
 8000e06:	231d      	movs	r3, #29
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	3808      	subs	r0, #8
 8000e12:	4084      	lsls	r4, r0
 8000e14:	000b      	movs	r3, r1
 8000e16:	464d      	mov	r5, r9
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	4085      	lsls	r5, r0
 8000e1e:	4823      	ldr	r0, [pc, #140]	; (8000eac <__aeabi_ddiv+0x394>)
 8000e20:	1a83      	subs	r3, r0, r2
 8000e22:	469b      	mov	fp, r3
 8000e24:	2300      	movs	r3, #0
 8000e26:	4699      	mov	r9, r3
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	e69a      	b.n	8000b62 <__aeabi_ddiv+0x4a>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	4698      	mov	r8, r3
 8000e32:	d11d      	bne.n	8000e70 <__aeabi_ddiv+0x358>
 8000e34:	2308      	movs	r3, #8
 8000e36:	4699      	mov	r9, r3
 8000e38:	3b06      	subs	r3, #6
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4683      	mov	fp, r0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	e68f      	b.n	8000b62 <__aeabi_ddiv+0x4a>
 8000e42:	4652      	mov	r2, sl
 8000e44:	4322      	orrs	r2, r4
 8000e46:	d109      	bne.n	8000e5c <__aeabi_ddiv+0x344>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <__aeabi_ddiv+0x398>)
 8000e50:	4689      	mov	r9, r1
 8000e52:	469c      	mov	ip, r3
 8000e54:	2400      	movs	r4, #0
 8000e56:	2002      	movs	r0, #2
 8000e58:	44e3      	add	fp, ip
 8000e5a:	e69d      	b.n	8000b98 <__aeabi_ddiv+0x80>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	464a      	mov	r2, r9
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <__aeabi_ddiv+0x398>)
 8000e64:	4691      	mov	r9, r2
 8000e66:	469c      	mov	ip, r3
 8000e68:	4652      	mov	r2, sl
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	44e3      	add	fp, ip
 8000e6e:	e693      	b.n	8000b98 <__aeabi_ddiv+0x80>
 8000e70:	230c      	movs	r3, #12
 8000e72:	4699      	mov	r9, r3
 8000e74:	3b09      	subs	r3, #9
 8000e76:	46a0      	mov	r8, r4
 8000e78:	4683      	mov	fp, r0
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	e671      	b.n	8000b62 <__aeabi_ddiv+0x4a>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	4699      	mov	r9, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	469b      	mov	fp, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	2500      	movs	r5, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e669      	b.n	8000b62 <__aeabi_ddiv+0x4a>
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	000007ff 	.word	0x000007ff
 8000e94:	fffffc01 	.word	0xfffffc01
 8000e98:	0800dbd0 	.word	0x0800dbd0
 8000e9c:	000003ff 	.word	0x000003ff
 8000ea0:	feffffff 	.word	0xfeffffff
 8000ea4:	000007fe 	.word	0x000007fe
 8000ea8:	000003f3 	.word	0x000003f3
 8000eac:	fffffc0d 	.word	0xfffffc0d
 8000eb0:	fffff801 	.word	0xfffff801
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4319      	orrs	r1, r3
 8000eba:	4689      	mov	r9, r1
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e66a      	b.n	8000b98 <__aeabi_ddiv+0x80>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2480      	movs	r4, #128	; 0x80
 8000ec6:	469a      	mov	sl, r3
 8000ec8:	2500      	movs	r5, #0
 8000eca:	4b8a      	ldr	r3, [pc, #552]	; (80010f4 <__aeabi_ddiv+0x5dc>)
 8000ecc:	0324      	lsls	r4, r4, #12
 8000ece:	e67a      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000ed0:	2501      	movs	r5, #1
 8000ed2:	426d      	negs	r5, r5
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	2b38      	cmp	r3, #56	; 0x38
 8000eda:	dd00      	ble.n	8000ede <__aeabi_ddiv+0x3c6>
 8000edc:	e670      	b.n	8000bc0 <__aeabi_ddiv+0xa8>
 8000ede:	2b1f      	cmp	r3, #31
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_ddiv+0x3cc>
 8000ee2:	e0bf      	b.n	8001064 <__aeabi_ddiv+0x54c>
 8000ee4:	211f      	movs	r1, #31
 8000ee6:	4249      	negs	r1, r1
 8000ee8:	1a8a      	subs	r2, r1, r2
 8000eea:	4641      	mov	r1, r8
 8000eec:	40d1      	lsrs	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d004      	beq.n	8000efe <__aeabi_ddiv+0x3e6>
 8000ef4:	4641      	mov	r1, r8
 8000ef6:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <__aeabi_ddiv+0x5e0>)
 8000ef8:	445b      	add	r3, fp
 8000efa:	4099      	lsls	r1, r3
 8000efc:	430d      	orrs	r5, r1
 8000efe:	1e6b      	subs	r3, r5, #1
 8000f00:	419d      	sbcs	r5, r3
 8000f02:	2307      	movs	r3, #7
 8000f04:	432a      	orrs	r2, r5
 8000f06:	001d      	movs	r5, r3
 8000f08:	2400      	movs	r4, #0
 8000f0a:	4015      	ands	r5, r2
 8000f0c:	4213      	tst	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x3fa>
 8000f10:	e0d4      	b.n	80010bc <__aeabi_ddiv+0x5a4>
 8000f12:	210f      	movs	r1, #15
 8000f14:	2300      	movs	r3, #0
 8000f16:	4011      	ands	r1, r2
 8000f18:	2904      	cmp	r1, #4
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0x406>
 8000f1c:	e0cb      	b.n	80010b6 <__aeabi_ddiv+0x59e>
 8000f1e:	1d11      	adds	r1, r2, #4
 8000f20:	4291      	cmp	r1, r2
 8000f22:	4192      	sbcs	r2, r2
 8000f24:	4252      	negs	r2, r2
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	000a      	movs	r2, r1
 8000f2a:	0219      	lsls	r1, r3, #8
 8000f2c:	d400      	bmi.n	8000f30 <__aeabi_ddiv+0x418>
 8000f2e:	e0c2      	b.n	80010b6 <__aeabi_ddiv+0x59e>
 8000f30:	2301      	movs	r3, #1
 8000f32:	2400      	movs	r4, #0
 8000f34:	2500      	movs	r5, #0
 8000f36:	e646      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	031b      	lsls	r3, r3, #12
 8000f3e:	4219      	tst	r1, r3
 8000f40:	d008      	beq.n	8000f54 <__aeabi_ddiv+0x43c>
 8000f42:	421c      	tst	r4, r3
 8000f44:	d106      	bne.n	8000f54 <__aeabi_ddiv+0x43c>
 8000f46:	431c      	orrs	r4, r3
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	0015      	movs	r5, r2
 8000f4e:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <__aeabi_ddiv+0x5dc>)
 8000f50:	0b24      	lsrs	r4, r4, #12
 8000f52:	e638      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000f54:	2480      	movs	r4, #128	; 0x80
 8000f56:	4643      	mov	r3, r8
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	46b2      	mov	sl, r6
 8000f60:	4b64      	ldr	r3, [pc, #400]	; (80010f4 <__aeabi_ddiv+0x5dc>)
 8000f62:	0b24      	lsrs	r4, r4, #12
 8000f64:	e62f      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x454>
 8000f6a:	e703      	b.n	8000d74 <__aeabi_ddiv+0x25c>
 8000f6c:	19a6      	adds	r6, r4, r6
 8000f6e:	1e68      	subs	r0, r5, #1
 8000f70:	42a6      	cmp	r6, r4
 8000f72:	d200      	bcs.n	8000f76 <__aeabi_ddiv+0x45e>
 8000f74:	e08d      	b.n	8001092 <__aeabi_ddiv+0x57a>
 8000f76:	428e      	cmp	r6, r1
 8000f78:	d200      	bcs.n	8000f7c <__aeabi_ddiv+0x464>
 8000f7a:	e0a3      	b.n	80010c4 <__aeabi_ddiv+0x5ac>
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x468>
 8000f7e:	e0b3      	b.n	80010e8 <__aeabi_ddiv+0x5d0>
 8000f80:	0005      	movs	r5, r0
 8000f82:	e6f5      	b.n	8000d70 <__aeabi_ddiv+0x258>
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d900      	bls.n	8000f8a <__aeabi_ddiv+0x472>
 8000f88:	e639      	b.n	8000bfe <__aeabi_ddiv+0xe6>
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	07de      	lsls	r6, r3, #31
 8000f8e:	0858      	lsrs	r0, r3, #1
 8000f90:	086b      	lsrs	r3, r5, #1
 8000f92:	431e      	orrs	r6, r3
 8000f94:	07ed      	lsls	r5, r5, #31
 8000f96:	e639      	b.n	8000c0c <__aeabi_ddiv+0xf4>
 8000f98:	4648      	mov	r0, r9
 8000f9a:	f001 f867 	bl	800206c <__clzsi2>
 8000f9e:	0001      	movs	r1, r0
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	3115      	adds	r1, #21
 8000fa4:	3220      	adds	r2, #32
 8000fa6:	291c      	cmp	r1, #28
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_ddiv+0x494>
 8000faa:	e72c      	b.n	8000e06 <__aeabi_ddiv+0x2ee>
 8000fac:	464b      	mov	r3, r9
 8000fae:	3808      	subs	r0, #8
 8000fb0:	4083      	lsls	r3, r0
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	e732      	b.n	8000e1e <__aeabi_ddiv+0x306>
 8000fb8:	f001 f858 	bl	800206c <__clzsi2>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	3215      	adds	r2, #21
 8000fc2:	3020      	adds	r0, #32
 8000fc4:	2a1c      	cmp	r2, #28
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_ddiv+0x4b2>
 8000fc8:	e700      	b.n	8000dcc <__aeabi_ddiv+0x2b4>
 8000fca:	4654      	mov	r4, sl
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	409c      	lsls	r4, r3
 8000fd2:	e705      	b.n	8000de0 <__aeabi_ddiv+0x2c8>
 8000fd4:	1936      	adds	r6, r6, r4
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	42b4      	cmp	r4, r6
 8000fda:	d900      	bls.n	8000fde <__aeabi_ddiv+0x4c6>
 8000fdc:	e6a6      	b.n	8000d2c <__aeabi_ddiv+0x214>
 8000fde:	42b2      	cmp	r2, r6
 8000fe0:	d800      	bhi.n	8000fe4 <__aeabi_ddiv+0x4cc>
 8000fe2:	e6a3      	b.n	8000d2c <__aeabi_ddiv+0x214>
 8000fe4:	1e83      	subs	r3, r0, #2
 8000fe6:	1936      	adds	r6, r6, r4
 8000fe8:	e6a0      	b.n	8000d2c <__aeabi_ddiv+0x214>
 8000fea:	1909      	adds	r1, r1, r4
 8000fec:	3d01      	subs	r5, #1
 8000fee:	428c      	cmp	r4, r1
 8000ff0:	d900      	bls.n	8000ff4 <__aeabi_ddiv+0x4dc>
 8000ff2:	e68d      	b.n	8000d10 <__aeabi_ddiv+0x1f8>
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d800      	bhi.n	8000ffa <__aeabi_ddiv+0x4e2>
 8000ff8:	e68a      	b.n	8000d10 <__aeabi_ddiv+0x1f8>
 8000ffa:	1e85      	subs	r5, r0, #2
 8000ffc:	1909      	adds	r1, r1, r4
 8000ffe:	e687      	b.n	8000d10 <__aeabi_ddiv+0x1f8>
 8001000:	230f      	movs	r3, #15
 8001002:	402b      	ands	r3, r5
 8001004:	2b04      	cmp	r3, #4
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0x4f2>
 8001008:	e6bc      	b.n	8000d84 <__aeabi_ddiv+0x26c>
 800100a:	2305      	movs	r3, #5
 800100c:	425b      	negs	r3, r3
 800100e:	42ab      	cmp	r3, r5
 8001010:	419b      	sbcs	r3, r3
 8001012:	3504      	adds	r5, #4
 8001014:	425b      	negs	r3, r3
 8001016:	08ed      	lsrs	r5, r5, #3
 8001018:	4498      	add	r8, r3
 800101a:	e6b4      	b.n	8000d86 <__aeabi_ddiv+0x26e>
 800101c:	42af      	cmp	r7, r5
 800101e:	d900      	bls.n	8001022 <__aeabi_ddiv+0x50a>
 8001020:	e660      	b.n	8000ce4 <__aeabi_ddiv+0x1cc>
 8001022:	4282      	cmp	r2, r0
 8001024:	d804      	bhi.n	8001030 <__aeabi_ddiv+0x518>
 8001026:	d000      	beq.n	800102a <__aeabi_ddiv+0x512>
 8001028:	e65c      	b.n	8000ce4 <__aeabi_ddiv+0x1cc>
 800102a:	42ae      	cmp	r6, r5
 800102c:	d800      	bhi.n	8001030 <__aeabi_ddiv+0x518>
 800102e:	e659      	b.n	8000ce4 <__aeabi_ddiv+0x1cc>
 8001030:	2302      	movs	r3, #2
 8001032:	425b      	negs	r3, r3
 8001034:	469c      	mov	ip, r3
 8001036:	9b00      	ldr	r3, [sp, #0]
 8001038:	44e0      	add	r8, ip
 800103a:	469c      	mov	ip, r3
 800103c:	4465      	add	r5, ip
 800103e:	429d      	cmp	r5, r3
 8001040:	419b      	sbcs	r3, r3
 8001042:	425b      	negs	r3, r3
 8001044:	191b      	adds	r3, r3, r4
 8001046:	18c0      	adds	r0, r0, r3
 8001048:	e64d      	b.n	8000ce6 <__aeabi_ddiv+0x1ce>
 800104a:	428a      	cmp	r2, r1
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x538>
 800104e:	e60e      	b.n	8000c6e <__aeabi_ddiv+0x156>
 8001050:	1e83      	subs	r3, r0, #2
 8001052:	1909      	adds	r1, r1, r4
 8001054:	e60b      	b.n	8000c6e <__aeabi_ddiv+0x156>
 8001056:	428a      	cmp	r2, r1
 8001058:	d800      	bhi.n	800105c <__aeabi_ddiv+0x544>
 800105a:	e5f4      	b.n	8000c46 <__aeabi_ddiv+0x12e>
 800105c:	1e83      	subs	r3, r0, #2
 800105e:	4698      	mov	r8, r3
 8001060:	1909      	adds	r1, r1, r4
 8001062:	e5f0      	b.n	8000c46 <__aeabi_ddiv+0x12e>
 8001064:	4925      	ldr	r1, [pc, #148]	; (80010fc <__aeabi_ddiv+0x5e4>)
 8001066:	0028      	movs	r0, r5
 8001068:	4459      	add	r1, fp
 800106a:	408d      	lsls	r5, r1
 800106c:	4642      	mov	r2, r8
 800106e:	408a      	lsls	r2, r1
 8001070:	1e69      	subs	r1, r5, #1
 8001072:	418d      	sbcs	r5, r1
 8001074:	4641      	mov	r1, r8
 8001076:	40d8      	lsrs	r0, r3
 8001078:	40d9      	lsrs	r1, r3
 800107a:	4302      	orrs	r2, r0
 800107c:	432a      	orrs	r2, r5
 800107e:	000b      	movs	r3, r1
 8001080:	0751      	lsls	r1, r2, #29
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x56e>
 8001084:	e751      	b.n	8000f2a <__aeabi_ddiv+0x412>
 8001086:	210f      	movs	r1, #15
 8001088:	4011      	ands	r1, r2
 800108a:	2904      	cmp	r1, #4
 800108c:	d000      	beq.n	8001090 <__aeabi_ddiv+0x578>
 800108e:	e746      	b.n	8000f1e <__aeabi_ddiv+0x406>
 8001090:	e74b      	b.n	8000f2a <__aeabi_ddiv+0x412>
 8001092:	0005      	movs	r5, r0
 8001094:	428e      	cmp	r6, r1
 8001096:	d000      	beq.n	800109a <__aeabi_ddiv+0x582>
 8001098:	e66a      	b.n	8000d70 <__aeabi_ddiv+0x258>
 800109a:	9a00      	ldr	r2, [sp, #0]
 800109c:	4293      	cmp	r3, r2
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x58a>
 80010a0:	e666      	b.n	8000d70 <__aeabi_ddiv+0x258>
 80010a2:	e667      	b.n	8000d74 <__aeabi_ddiv+0x25c>
 80010a4:	4a16      	ldr	r2, [pc, #88]	; (8001100 <__aeabi_ddiv+0x5e8>)
 80010a6:	445a      	add	r2, fp
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	dc00      	bgt.n	80010ae <__aeabi_ddiv+0x596>
 80010ac:	e710      	b.n	8000ed0 <__aeabi_ddiv+0x3b8>
 80010ae:	2301      	movs	r3, #1
 80010b0:	2500      	movs	r5, #0
 80010b2:	4498      	add	r8, r3
 80010b4:	e667      	b.n	8000d86 <__aeabi_ddiv+0x26e>
 80010b6:	075d      	lsls	r5, r3, #29
 80010b8:	025b      	lsls	r3, r3, #9
 80010ba:	0b1c      	lsrs	r4, r3, #12
 80010bc:	08d2      	lsrs	r2, r2, #3
 80010be:	2300      	movs	r3, #0
 80010c0:	4315      	orrs	r5, r2
 80010c2:	e580      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 80010c4:	9800      	ldr	r0, [sp, #0]
 80010c6:	3d02      	subs	r5, #2
 80010c8:	0042      	lsls	r2, r0, #1
 80010ca:	4282      	cmp	r2, r0
 80010cc:	41bf      	sbcs	r7, r7
 80010ce:	427f      	negs	r7, r7
 80010d0:	193c      	adds	r4, r7, r4
 80010d2:	1936      	adds	r6, r6, r4
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	e7dd      	b.n	8001094 <__aeabi_ddiv+0x57c>
 80010d8:	2480      	movs	r4, #128	; 0x80
 80010da:	4643      	mov	r3, r8
 80010dc:	0324      	lsls	r4, r4, #12
 80010de:	431c      	orrs	r4, r3
 80010e0:	0324      	lsls	r4, r4, #12
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__aeabi_ddiv+0x5dc>)
 80010e4:	0b24      	lsrs	r4, r4, #12
 80010e6:	e56e      	b.n	8000bc6 <__aeabi_ddiv+0xae>
 80010e8:	9a00      	ldr	r2, [sp, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3ea      	bcc.n	80010c4 <__aeabi_ddiv+0x5ac>
 80010ee:	0005      	movs	r5, r0
 80010f0:	e7d3      	b.n	800109a <__aeabi_ddiv+0x582>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	0000043e 	.word	0x0000043e
 80010fc:	0000041e 	.word	0x0000041e
 8001100:	000003ff 	.word	0x000003ff

08001104 <__eqdf2>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	464e      	mov	r6, r9
 8001108:	4645      	mov	r5, r8
 800110a:	46de      	mov	lr, fp
 800110c:	4657      	mov	r7, sl
 800110e:	4690      	mov	r8, r2
 8001110:	b5e0      	push	{r5, r6, r7, lr}
 8001112:	0017      	movs	r7, r2
 8001114:	031a      	lsls	r2, r3, #12
 8001116:	0b12      	lsrs	r2, r2, #12
 8001118:	0005      	movs	r5, r0
 800111a:	4684      	mov	ip, r0
 800111c:	4819      	ldr	r0, [pc, #100]	; (8001184 <__eqdf2+0x80>)
 800111e:	030e      	lsls	r6, r1, #12
 8001120:	004c      	lsls	r4, r1, #1
 8001122:	4691      	mov	r9, r2
 8001124:	005a      	lsls	r2, r3, #1
 8001126:	0fdb      	lsrs	r3, r3, #31
 8001128:	469b      	mov	fp, r3
 800112a:	0b36      	lsrs	r6, r6, #12
 800112c:	0d64      	lsrs	r4, r4, #21
 800112e:	0fc9      	lsrs	r1, r1, #31
 8001130:	0d52      	lsrs	r2, r2, #21
 8001132:	4284      	cmp	r4, r0
 8001134:	d019      	beq.n	800116a <__eqdf2+0x66>
 8001136:	4282      	cmp	r2, r0
 8001138:	d010      	beq.n	800115c <__eqdf2+0x58>
 800113a:	2001      	movs	r0, #1
 800113c:	4294      	cmp	r4, r2
 800113e:	d10e      	bne.n	800115e <__eqdf2+0x5a>
 8001140:	454e      	cmp	r6, r9
 8001142:	d10c      	bne.n	800115e <__eqdf2+0x5a>
 8001144:	2001      	movs	r0, #1
 8001146:	45c4      	cmp	ip, r8
 8001148:	d109      	bne.n	800115e <__eqdf2+0x5a>
 800114a:	4559      	cmp	r1, fp
 800114c:	d017      	beq.n	800117e <__eqdf2+0x7a>
 800114e:	2c00      	cmp	r4, #0
 8001150:	d105      	bne.n	800115e <__eqdf2+0x5a>
 8001152:	0030      	movs	r0, r6
 8001154:	4328      	orrs	r0, r5
 8001156:	1e43      	subs	r3, r0, #1
 8001158:	4198      	sbcs	r0, r3
 800115a:	e000      	b.n	800115e <__eqdf2+0x5a>
 800115c:	2001      	movs	r0, #1
 800115e:	bcf0      	pop	{r4, r5, r6, r7}
 8001160:	46bb      	mov	fp, r7
 8001162:	46b2      	mov	sl, r6
 8001164:	46a9      	mov	r9, r5
 8001166:	46a0      	mov	r8, r4
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116a:	0033      	movs	r3, r6
 800116c:	2001      	movs	r0, #1
 800116e:	432b      	orrs	r3, r5
 8001170:	d1f5      	bne.n	800115e <__eqdf2+0x5a>
 8001172:	42a2      	cmp	r2, r4
 8001174:	d1f3      	bne.n	800115e <__eqdf2+0x5a>
 8001176:	464b      	mov	r3, r9
 8001178:	433b      	orrs	r3, r7
 800117a:	d1f0      	bne.n	800115e <__eqdf2+0x5a>
 800117c:	e7e2      	b.n	8001144 <__eqdf2+0x40>
 800117e:	2000      	movs	r0, #0
 8001180:	e7ed      	b.n	800115e <__eqdf2+0x5a>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	000007ff 	.word	0x000007ff

08001188 <__gedf2>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	4647      	mov	r7, r8
 800118c:	46ce      	mov	lr, r9
 800118e:	0004      	movs	r4, r0
 8001190:	0018      	movs	r0, r3
 8001192:	0016      	movs	r6, r2
 8001194:	031b      	lsls	r3, r3, #12
 8001196:	0b1b      	lsrs	r3, r3, #12
 8001198:	4d2d      	ldr	r5, [pc, #180]	; (8001250 <__gedf2+0xc8>)
 800119a:	004a      	lsls	r2, r1, #1
 800119c:	4699      	mov	r9, r3
 800119e:	b580      	push	{r7, lr}
 80011a0:	0043      	lsls	r3, r0, #1
 80011a2:	030f      	lsls	r7, r1, #12
 80011a4:	46a4      	mov	ip, r4
 80011a6:	46b0      	mov	r8, r6
 80011a8:	0b3f      	lsrs	r7, r7, #12
 80011aa:	0d52      	lsrs	r2, r2, #21
 80011ac:	0fc9      	lsrs	r1, r1, #31
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	0fc0      	lsrs	r0, r0, #31
 80011b2:	42aa      	cmp	r2, r5
 80011b4:	d021      	beq.n	80011fa <__gedf2+0x72>
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	d013      	beq.n	80011e2 <__gedf2+0x5a>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d122      	bne.n	8001204 <__gedf2+0x7c>
 80011be:	433c      	orrs	r4, r7
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <__gedf2+0x42>
 80011c4:	464d      	mov	r5, r9
 80011c6:	432e      	orrs	r6, r5
 80011c8:	d022      	beq.n	8001210 <__gedf2+0x88>
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d010      	beq.n	80011f0 <__gedf2+0x68>
 80011ce:	4281      	cmp	r1, r0
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x90>
 80011d2:	2002      	movs	r0, #2
 80011d4:	3901      	subs	r1, #1
 80011d6:	4008      	ands	r0, r1
 80011d8:	3801      	subs	r0, #1
 80011da:	bcc0      	pop	{r6, r7}
 80011dc:	46b9      	mov	r9, r7
 80011de:	46b0      	mov	r8, r6
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e2:	464d      	mov	r5, r9
 80011e4:	432e      	orrs	r6, r5
 80011e6:	d129      	bne.n	800123c <__gedf2+0xb4>
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d1f0      	bne.n	80011ce <__gedf2+0x46>
 80011ec:	433c      	orrs	r4, r7
 80011ee:	d1ee      	bne.n	80011ce <__gedf2+0x46>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d1f2      	bne.n	80011da <__gedf2+0x52>
 80011f4:	2001      	movs	r0, #1
 80011f6:	4240      	negs	r0, r0
 80011f8:	e7ef      	b.n	80011da <__gedf2+0x52>
 80011fa:	003d      	movs	r5, r7
 80011fc:	4325      	orrs	r5, r4
 80011fe:	d11d      	bne.n	800123c <__gedf2+0xb4>
 8001200:	4293      	cmp	r3, r2
 8001202:	d0ee      	beq.n	80011e2 <__gedf2+0x5a>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e2      	bne.n	80011ce <__gedf2+0x46>
 8001208:	464c      	mov	r4, r9
 800120a:	4326      	orrs	r6, r4
 800120c:	d1df      	bne.n	80011ce <__gedf2+0x46>
 800120e:	e7e0      	b.n	80011d2 <__gedf2+0x4a>
 8001210:	2000      	movs	r0, #0
 8001212:	2c00      	cmp	r4, #0
 8001214:	d0e1      	beq.n	80011da <__gedf2+0x52>
 8001216:	e7dc      	b.n	80011d2 <__gedf2+0x4a>
 8001218:	429a      	cmp	r2, r3
 800121a:	dc0a      	bgt.n	8001232 <__gedf2+0xaa>
 800121c:	dbe8      	blt.n	80011f0 <__gedf2+0x68>
 800121e:	454f      	cmp	r7, r9
 8001220:	d8d7      	bhi.n	80011d2 <__gedf2+0x4a>
 8001222:	d00e      	beq.n	8001242 <__gedf2+0xba>
 8001224:	2000      	movs	r0, #0
 8001226:	454f      	cmp	r7, r9
 8001228:	d2d7      	bcs.n	80011da <__gedf2+0x52>
 800122a:	2900      	cmp	r1, #0
 800122c:	d0e2      	beq.n	80011f4 <__gedf2+0x6c>
 800122e:	0008      	movs	r0, r1
 8001230:	e7d3      	b.n	80011da <__gedf2+0x52>
 8001232:	4243      	negs	r3, r0
 8001234:	4158      	adcs	r0, r3
 8001236:	0040      	lsls	r0, r0, #1
 8001238:	3801      	subs	r0, #1
 800123a:	e7ce      	b.n	80011da <__gedf2+0x52>
 800123c:	2002      	movs	r0, #2
 800123e:	4240      	negs	r0, r0
 8001240:	e7cb      	b.n	80011da <__gedf2+0x52>
 8001242:	45c4      	cmp	ip, r8
 8001244:	d8c5      	bhi.n	80011d2 <__gedf2+0x4a>
 8001246:	2000      	movs	r0, #0
 8001248:	45c4      	cmp	ip, r8
 800124a:	d2c6      	bcs.n	80011da <__gedf2+0x52>
 800124c:	e7ed      	b.n	800122a <__gedf2+0xa2>
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	000007ff 	.word	0x000007ff

08001254 <__ledf2>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	4647      	mov	r7, r8
 8001258:	46ce      	mov	lr, r9
 800125a:	0004      	movs	r4, r0
 800125c:	0018      	movs	r0, r3
 800125e:	0016      	movs	r6, r2
 8001260:	031b      	lsls	r3, r3, #12
 8001262:	0b1b      	lsrs	r3, r3, #12
 8001264:	4d2c      	ldr	r5, [pc, #176]	; (8001318 <__ledf2+0xc4>)
 8001266:	004a      	lsls	r2, r1, #1
 8001268:	4699      	mov	r9, r3
 800126a:	b580      	push	{r7, lr}
 800126c:	0043      	lsls	r3, r0, #1
 800126e:	030f      	lsls	r7, r1, #12
 8001270:	46a4      	mov	ip, r4
 8001272:	46b0      	mov	r8, r6
 8001274:	0b3f      	lsrs	r7, r7, #12
 8001276:	0d52      	lsrs	r2, r2, #21
 8001278:	0fc9      	lsrs	r1, r1, #31
 800127a:	0d5b      	lsrs	r3, r3, #21
 800127c:	0fc0      	lsrs	r0, r0, #31
 800127e:	42aa      	cmp	r2, r5
 8001280:	d00d      	beq.n	800129e <__ledf2+0x4a>
 8001282:	42ab      	cmp	r3, r5
 8001284:	d010      	beq.n	80012a8 <__ledf2+0x54>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d127      	bne.n	80012da <__ledf2+0x86>
 800128a:	433c      	orrs	r4, r7
 800128c:	2b00      	cmp	r3, #0
 800128e:	d111      	bne.n	80012b4 <__ledf2+0x60>
 8001290:	464d      	mov	r5, r9
 8001292:	432e      	orrs	r6, r5
 8001294:	d10e      	bne.n	80012b4 <__ledf2+0x60>
 8001296:	2000      	movs	r0, #0
 8001298:	2c00      	cmp	r4, #0
 800129a:	d015      	beq.n	80012c8 <__ledf2+0x74>
 800129c:	e00e      	b.n	80012bc <__ledf2+0x68>
 800129e:	003d      	movs	r5, r7
 80012a0:	4325      	orrs	r5, r4
 80012a2:	d110      	bne.n	80012c6 <__ledf2+0x72>
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d118      	bne.n	80012da <__ledf2+0x86>
 80012a8:	464d      	mov	r5, r9
 80012aa:	432e      	orrs	r6, r5
 80012ac:	d10b      	bne.n	80012c6 <__ledf2+0x72>
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d102      	bne.n	80012b8 <__ledf2+0x64>
 80012b2:	433c      	orrs	r4, r7
 80012b4:	2c00      	cmp	r4, #0
 80012b6:	d00b      	beq.n	80012d0 <__ledf2+0x7c>
 80012b8:	4281      	cmp	r1, r0
 80012ba:	d014      	beq.n	80012e6 <__ledf2+0x92>
 80012bc:	2002      	movs	r0, #2
 80012be:	3901      	subs	r1, #1
 80012c0:	4008      	ands	r0, r1
 80012c2:	3801      	subs	r0, #1
 80012c4:	e000      	b.n	80012c8 <__ledf2+0x74>
 80012c6:	2002      	movs	r0, #2
 80012c8:	bcc0      	pop	{r6, r7}
 80012ca:	46b9      	mov	r9, r7
 80012cc:	46b0      	mov	r8, r6
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d1f9      	bne.n	80012c8 <__ledf2+0x74>
 80012d4:	2001      	movs	r0, #1
 80012d6:	4240      	negs	r0, r0
 80012d8:	e7f6      	b.n	80012c8 <__ledf2+0x74>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1ec      	bne.n	80012b8 <__ledf2+0x64>
 80012de:	464c      	mov	r4, r9
 80012e0:	4326      	orrs	r6, r4
 80012e2:	d1e9      	bne.n	80012b8 <__ledf2+0x64>
 80012e4:	e7ea      	b.n	80012bc <__ledf2+0x68>
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dd04      	ble.n	80012f4 <__ledf2+0xa0>
 80012ea:	4243      	negs	r3, r0
 80012ec:	4158      	adcs	r0, r3
 80012ee:	0040      	lsls	r0, r0, #1
 80012f0:	3801      	subs	r0, #1
 80012f2:	e7e9      	b.n	80012c8 <__ledf2+0x74>
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbeb      	blt.n	80012d0 <__ledf2+0x7c>
 80012f8:	454f      	cmp	r7, r9
 80012fa:	d8df      	bhi.n	80012bc <__ledf2+0x68>
 80012fc:	d006      	beq.n	800130c <__ledf2+0xb8>
 80012fe:	2000      	movs	r0, #0
 8001300:	454f      	cmp	r7, r9
 8001302:	d2e1      	bcs.n	80012c8 <__ledf2+0x74>
 8001304:	2900      	cmp	r1, #0
 8001306:	d0e5      	beq.n	80012d4 <__ledf2+0x80>
 8001308:	0008      	movs	r0, r1
 800130a:	e7dd      	b.n	80012c8 <__ledf2+0x74>
 800130c:	45c4      	cmp	ip, r8
 800130e:	d8d5      	bhi.n	80012bc <__ledf2+0x68>
 8001310:	2000      	movs	r0, #0
 8001312:	45c4      	cmp	ip, r8
 8001314:	d2d8      	bcs.n	80012c8 <__ledf2+0x74>
 8001316:	e7f5      	b.n	8001304 <__ledf2+0xb0>
 8001318:	000007ff 	.word	0x000007ff

0800131c <__aeabi_dmul>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	464e      	mov	r6, r9
 8001322:	4645      	mov	r5, r8
 8001324:	46de      	mov	lr, fp
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	4698      	mov	r8, r3
 800132a:	030c      	lsls	r4, r1, #12
 800132c:	004b      	lsls	r3, r1, #1
 800132e:	0006      	movs	r6, r0
 8001330:	4692      	mov	sl, r2
 8001332:	b087      	sub	sp, #28
 8001334:	0b24      	lsrs	r4, r4, #12
 8001336:	0d5b      	lsrs	r3, r3, #21
 8001338:	0fcf      	lsrs	r7, r1, #31
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_dmul+0x24>
 800133e:	e15c      	b.n	80015fa <__aeabi_dmul+0x2de>
 8001340:	4ad9      	ldr	r2, [pc, #868]	; (80016a8 <__aeabi_dmul+0x38c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x2c>
 8001346:	e175      	b.n	8001634 <__aeabi_dmul+0x318>
 8001348:	0f42      	lsrs	r2, r0, #29
 800134a:	00e4      	lsls	r4, r4, #3
 800134c:	4314      	orrs	r4, r2
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	0412      	lsls	r2, r2, #16
 8001352:	4314      	orrs	r4, r2
 8001354:	4ad5      	ldr	r2, [pc, #852]	; (80016ac <__aeabi_dmul+0x390>)
 8001356:	00c5      	lsls	r5, r0, #3
 8001358:	4694      	mov	ip, r2
 800135a:	4463      	add	r3, ip
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	4699      	mov	r9, r3
 8001362:	469b      	mov	fp, r3
 8001364:	4643      	mov	r3, r8
 8001366:	4642      	mov	r2, r8
 8001368:	031e      	lsls	r6, r3, #12
 800136a:	0fd2      	lsrs	r2, r2, #31
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4650      	mov	r0, sl
 8001370:	4690      	mov	r8, r2
 8001372:	0b36      	lsrs	r6, r6, #12
 8001374:	0d5b      	lsrs	r3, r3, #21
 8001376:	d100      	bne.n	800137a <__aeabi_dmul+0x5e>
 8001378:	e120      	b.n	80015bc <__aeabi_dmul+0x2a0>
 800137a:	4acb      	ldr	r2, [pc, #812]	; (80016a8 <__aeabi_dmul+0x38c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x66>
 8001380:	e162      	b.n	8001648 <__aeabi_dmul+0x32c>
 8001382:	49ca      	ldr	r1, [pc, #808]	; (80016ac <__aeabi_dmul+0x390>)
 8001384:	0f42      	lsrs	r2, r0, #29
 8001386:	468c      	mov	ip, r1
 8001388:	9900      	ldr	r1, [sp, #0]
 800138a:	4463      	add	r3, ip
 800138c:	00f6      	lsls	r6, r6, #3
 800138e:	468c      	mov	ip, r1
 8001390:	4316      	orrs	r6, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	449c      	add	ip, r3
 8001396:	0412      	lsls	r2, r2, #16
 8001398:	4663      	mov	r3, ip
 800139a:	4316      	orrs	r6, r2
 800139c:	00c2      	lsls	r2, r0, #3
 800139e:	2000      	movs	r0, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	9900      	ldr	r1, [sp, #0]
 80013a4:	4643      	mov	r3, r8
 80013a6:	3101      	adds	r1, #1
 80013a8:	468c      	mov	ip, r1
 80013aa:	4649      	mov	r1, r9
 80013ac:	407b      	eors	r3, r7
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	290f      	cmp	r1, #15
 80013b2:	d826      	bhi.n	8001402 <__aeabi_dmul+0xe6>
 80013b4:	4bbe      	ldr	r3, [pc, #760]	; (80016b0 <__aeabi_dmul+0x394>)
 80013b6:	0089      	lsls	r1, r1, #2
 80013b8:	5859      	ldr	r1, [r3, r1]
 80013ba:	468f      	mov	pc, r1
 80013bc:	4643      	mov	r3, r8
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	0034      	movs	r4, r6
 80013c2:	0015      	movs	r5, r2
 80013c4:	4683      	mov	fp, r0
 80013c6:	465b      	mov	r3, fp
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d016      	beq.n	80013fa <__aeabi_dmul+0xde>
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dmul+0xb6>
 80013d0:	e203      	b.n	80017da <__aeabi_dmul+0x4be>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dmul+0xbc>
 80013d6:	e0cd      	b.n	8001574 <__aeabi_dmul+0x258>
 80013d8:	2200      	movs	r2, #0
 80013da:	2400      	movs	r4, #0
 80013dc:	2500      	movs	r5, #0
 80013de:	9b01      	ldr	r3, [sp, #4]
 80013e0:	0512      	lsls	r2, r2, #20
 80013e2:	4322      	orrs	r2, r4
 80013e4:	07db      	lsls	r3, r3, #31
 80013e6:	431a      	orrs	r2, r3
 80013e8:	0028      	movs	r0, r5
 80013ea:	0011      	movs	r1, r2
 80013ec:	b007      	add	sp, #28
 80013ee:	bcf0      	pop	{r4, r5, r6, r7}
 80013f0:	46bb      	mov	fp, r7
 80013f2:	46b2      	mov	sl, r6
 80013f4:	46a9      	mov	r9, r5
 80013f6:	46a0      	mov	r8, r4
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	2400      	movs	r4, #0
 80013fc:	2500      	movs	r5, #0
 80013fe:	4aaa      	ldr	r2, [pc, #680]	; (80016a8 <__aeabi_dmul+0x38c>)
 8001400:	e7ed      	b.n	80013de <__aeabi_dmul+0xc2>
 8001402:	0c28      	lsrs	r0, r5, #16
 8001404:	042d      	lsls	r5, r5, #16
 8001406:	0c2d      	lsrs	r5, r5, #16
 8001408:	002b      	movs	r3, r5
 800140a:	0c11      	lsrs	r1, r2, #16
 800140c:	0412      	lsls	r2, r2, #16
 800140e:	0c12      	lsrs	r2, r2, #16
 8001410:	4353      	muls	r3, r2
 8001412:	4698      	mov	r8, r3
 8001414:	0013      	movs	r3, r2
 8001416:	002f      	movs	r7, r5
 8001418:	4343      	muls	r3, r0
 800141a:	4699      	mov	r9, r3
 800141c:	434f      	muls	r7, r1
 800141e:	444f      	add	r7, r9
 8001420:	46bb      	mov	fp, r7
 8001422:	4647      	mov	r7, r8
 8001424:	000b      	movs	r3, r1
 8001426:	0c3f      	lsrs	r7, r7, #16
 8001428:	46ba      	mov	sl, r7
 800142a:	4343      	muls	r3, r0
 800142c:	44da      	add	sl, fp
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	45d1      	cmp	r9, sl
 8001432:	d904      	bls.n	800143e <__aeabi_dmul+0x122>
 8001434:	2780      	movs	r7, #128	; 0x80
 8001436:	027f      	lsls	r7, r7, #9
 8001438:	46b9      	mov	r9, r7
 800143a:	444b      	add	r3, r9
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	4653      	mov	r3, sl
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	469b      	mov	fp, r3
 8001444:	4653      	mov	r3, sl
 8001446:	041f      	lsls	r7, r3, #16
 8001448:	4643      	mov	r3, r8
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	0c1b      	lsrs	r3, r3, #16
 800144e:	4698      	mov	r8, r3
 8001450:	003b      	movs	r3, r7
 8001452:	4443      	add	r3, r8
 8001454:	9304      	str	r3, [sp, #16]
 8001456:	0c33      	lsrs	r3, r6, #16
 8001458:	0436      	lsls	r6, r6, #16
 800145a:	0c36      	lsrs	r6, r6, #16
 800145c:	4698      	mov	r8, r3
 800145e:	0033      	movs	r3, r6
 8001460:	4343      	muls	r3, r0
 8001462:	4699      	mov	r9, r3
 8001464:	4643      	mov	r3, r8
 8001466:	4343      	muls	r3, r0
 8001468:	002f      	movs	r7, r5
 800146a:	469a      	mov	sl, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4377      	muls	r7, r6
 8001470:	435d      	muls	r5, r3
 8001472:	0c38      	lsrs	r0, r7, #16
 8001474:	444d      	add	r5, r9
 8001476:	1945      	adds	r5, r0, r5
 8001478:	45a9      	cmp	r9, r5
 800147a:	d903      	bls.n	8001484 <__aeabi_dmul+0x168>
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	4699      	mov	r9, r3
 8001482:	44ca      	add	sl, r9
 8001484:	043f      	lsls	r7, r7, #16
 8001486:	0c28      	lsrs	r0, r5, #16
 8001488:	0c3f      	lsrs	r7, r7, #16
 800148a:	042d      	lsls	r5, r5, #16
 800148c:	19ed      	adds	r5, r5, r7
 800148e:	0c27      	lsrs	r7, r4, #16
 8001490:	0424      	lsls	r4, r4, #16
 8001492:	0c24      	lsrs	r4, r4, #16
 8001494:	0003      	movs	r3, r0
 8001496:	0020      	movs	r0, r4
 8001498:	4350      	muls	r0, r2
 800149a:	437a      	muls	r2, r7
 800149c:	4691      	mov	r9, r2
 800149e:	003a      	movs	r2, r7
 80014a0:	4453      	add	r3, sl
 80014a2:	9305      	str	r3, [sp, #20]
 80014a4:	0c03      	lsrs	r3, r0, #16
 80014a6:	469a      	mov	sl, r3
 80014a8:	434a      	muls	r2, r1
 80014aa:	4361      	muls	r1, r4
 80014ac:	4449      	add	r1, r9
 80014ae:	4451      	add	r1, sl
 80014b0:	44ab      	add	fp, r5
 80014b2:	4589      	cmp	r9, r1
 80014b4:	d903      	bls.n	80014be <__aeabi_dmul+0x1a2>
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4699      	mov	r9, r3
 80014bc:	444a      	add	r2, r9
 80014be:	0400      	lsls	r0, r0, #16
 80014c0:	0c0b      	lsrs	r3, r1, #16
 80014c2:	0c00      	lsrs	r0, r0, #16
 80014c4:	0409      	lsls	r1, r1, #16
 80014c6:	1809      	adds	r1, r1, r0
 80014c8:	0020      	movs	r0, r4
 80014ca:	4699      	mov	r9, r3
 80014cc:	4643      	mov	r3, r8
 80014ce:	4370      	muls	r0, r6
 80014d0:	435c      	muls	r4, r3
 80014d2:	437e      	muls	r6, r7
 80014d4:	435f      	muls	r7, r3
 80014d6:	0c03      	lsrs	r3, r0, #16
 80014d8:	4698      	mov	r8, r3
 80014da:	19a4      	adds	r4, r4, r6
 80014dc:	4444      	add	r4, r8
 80014de:	444a      	add	r2, r9
 80014e0:	9703      	str	r7, [sp, #12]
 80014e2:	42a6      	cmp	r6, r4
 80014e4:	d904      	bls.n	80014f0 <__aeabi_dmul+0x1d4>
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	4698      	mov	r8, r3
 80014ec:	4447      	add	r7, r8
 80014ee:	9703      	str	r7, [sp, #12]
 80014f0:	0423      	lsls	r3, r4, #16
 80014f2:	9e02      	ldr	r6, [sp, #8]
 80014f4:	469a      	mov	sl, r3
 80014f6:	9b05      	ldr	r3, [sp, #20]
 80014f8:	445e      	add	r6, fp
 80014fa:	4698      	mov	r8, r3
 80014fc:	42ae      	cmp	r6, r5
 80014fe:	41ad      	sbcs	r5, r5
 8001500:	1876      	adds	r6, r6, r1
 8001502:	428e      	cmp	r6, r1
 8001504:	4189      	sbcs	r1, r1
 8001506:	0400      	lsls	r0, r0, #16
 8001508:	0c00      	lsrs	r0, r0, #16
 800150a:	4450      	add	r0, sl
 800150c:	4440      	add	r0, r8
 800150e:	426d      	negs	r5, r5
 8001510:	1947      	adds	r7, r0, r5
 8001512:	46b8      	mov	r8, r7
 8001514:	4693      	mov	fp, r2
 8001516:	4249      	negs	r1, r1
 8001518:	4689      	mov	r9, r1
 800151a:	44c3      	add	fp, r8
 800151c:	44d9      	add	r9, fp
 800151e:	4298      	cmp	r0, r3
 8001520:	4180      	sbcs	r0, r0
 8001522:	45a8      	cmp	r8, r5
 8001524:	41ad      	sbcs	r5, r5
 8001526:	4593      	cmp	fp, r2
 8001528:	4192      	sbcs	r2, r2
 800152a:	4589      	cmp	r9, r1
 800152c:	4189      	sbcs	r1, r1
 800152e:	426d      	negs	r5, r5
 8001530:	4240      	negs	r0, r0
 8001532:	4328      	orrs	r0, r5
 8001534:	0c24      	lsrs	r4, r4, #16
 8001536:	4252      	negs	r2, r2
 8001538:	4249      	negs	r1, r1
 800153a:	430a      	orrs	r2, r1
 800153c:	9b03      	ldr	r3, [sp, #12]
 800153e:	1900      	adds	r0, r0, r4
 8001540:	1880      	adds	r0, r0, r2
 8001542:	18c7      	adds	r7, r0, r3
 8001544:	464b      	mov	r3, r9
 8001546:	0ddc      	lsrs	r4, r3, #23
 8001548:	9b04      	ldr	r3, [sp, #16]
 800154a:	0275      	lsls	r5, r6, #9
 800154c:	431d      	orrs	r5, r3
 800154e:	1e6a      	subs	r2, r5, #1
 8001550:	4195      	sbcs	r5, r2
 8001552:	464b      	mov	r3, r9
 8001554:	0df6      	lsrs	r6, r6, #23
 8001556:	027f      	lsls	r7, r7, #9
 8001558:	4335      	orrs	r5, r6
 800155a:	025a      	lsls	r2, r3, #9
 800155c:	433c      	orrs	r4, r7
 800155e:	4315      	orrs	r5, r2
 8001560:	01fb      	lsls	r3, r7, #7
 8001562:	d400      	bmi.n	8001566 <__aeabi_dmul+0x24a>
 8001564:	e11c      	b.n	80017a0 <__aeabi_dmul+0x484>
 8001566:	2101      	movs	r1, #1
 8001568:	086a      	lsrs	r2, r5, #1
 800156a:	400d      	ands	r5, r1
 800156c:	4315      	orrs	r5, r2
 800156e:	07e2      	lsls	r2, r4, #31
 8001570:	4315      	orrs	r5, r2
 8001572:	0864      	lsrs	r4, r4, #1
 8001574:	494f      	ldr	r1, [pc, #316]	; (80016b4 <__aeabi_dmul+0x398>)
 8001576:	4461      	add	r1, ip
 8001578:	2900      	cmp	r1, #0
 800157a:	dc00      	bgt.n	800157e <__aeabi_dmul+0x262>
 800157c:	e0b0      	b.n	80016e0 <__aeabi_dmul+0x3c4>
 800157e:	076b      	lsls	r3, r5, #29
 8001580:	d009      	beq.n	8001596 <__aeabi_dmul+0x27a>
 8001582:	220f      	movs	r2, #15
 8001584:	402a      	ands	r2, r5
 8001586:	2a04      	cmp	r2, #4
 8001588:	d005      	beq.n	8001596 <__aeabi_dmul+0x27a>
 800158a:	1d2a      	adds	r2, r5, #4
 800158c:	42aa      	cmp	r2, r5
 800158e:	41ad      	sbcs	r5, r5
 8001590:	426d      	negs	r5, r5
 8001592:	1964      	adds	r4, r4, r5
 8001594:	0015      	movs	r5, r2
 8001596:	01e3      	lsls	r3, r4, #7
 8001598:	d504      	bpl.n	80015a4 <__aeabi_dmul+0x288>
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <__aeabi_dmul+0x39c>)
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	4014      	ands	r4, r2
 80015a2:	4461      	add	r1, ip
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <__aeabi_dmul+0x3a0>)
 80015a6:	4291      	cmp	r1, r2
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dmul+0x290>
 80015aa:	e726      	b.n	80013fa <__aeabi_dmul+0xde>
 80015ac:	0762      	lsls	r2, r4, #29
 80015ae:	08ed      	lsrs	r5, r5, #3
 80015b0:	0264      	lsls	r4, r4, #9
 80015b2:	0549      	lsls	r1, r1, #21
 80015b4:	4315      	orrs	r5, r2
 80015b6:	0b24      	lsrs	r4, r4, #12
 80015b8:	0d4a      	lsrs	r2, r1, #21
 80015ba:	e710      	b.n	80013de <__aeabi_dmul+0xc2>
 80015bc:	4652      	mov	r2, sl
 80015be:	4332      	orrs	r2, r6
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x2a8>
 80015c2:	e07f      	b.n	80016c4 <__aeabi_dmul+0x3a8>
 80015c4:	2e00      	cmp	r6, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0x2ae>
 80015c8:	e0dc      	b.n	8001784 <__aeabi_dmul+0x468>
 80015ca:	0030      	movs	r0, r6
 80015cc:	f000 fd4e 	bl	800206c <__clzsi2>
 80015d0:	0002      	movs	r2, r0
 80015d2:	3a0b      	subs	r2, #11
 80015d4:	231d      	movs	r3, #29
 80015d6:	0001      	movs	r1, r0
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	4652      	mov	r2, sl
 80015dc:	3908      	subs	r1, #8
 80015de:	40da      	lsrs	r2, r3
 80015e0:	408e      	lsls	r6, r1
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4652      	mov	r2, sl
 80015e6:	408a      	lsls	r2, r1
 80015e8:	9b00      	ldr	r3, [sp, #0]
 80015ea:	4935      	ldr	r1, [pc, #212]	; (80016c0 <__aeabi_dmul+0x3a4>)
 80015ec:	1a18      	subs	r0, r3, r0
 80015ee:	0003      	movs	r3, r0
 80015f0:	468c      	mov	ip, r1
 80015f2:	4463      	add	r3, ip
 80015f4:	2000      	movs	r0, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	e6d3      	b.n	80013a2 <__aeabi_dmul+0x86>
 80015fa:	0025      	movs	r5, r4
 80015fc:	4305      	orrs	r5, r0
 80015fe:	d04a      	beq.n	8001696 <__aeabi_dmul+0x37a>
 8001600:	2c00      	cmp	r4, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dmul+0x2ea>
 8001604:	e0b0      	b.n	8001768 <__aeabi_dmul+0x44c>
 8001606:	0020      	movs	r0, r4
 8001608:	f000 fd30 	bl	800206c <__clzsi2>
 800160c:	0001      	movs	r1, r0
 800160e:	0002      	movs	r2, r0
 8001610:	390b      	subs	r1, #11
 8001612:	231d      	movs	r3, #29
 8001614:	0010      	movs	r0, r2
 8001616:	1a5b      	subs	r3, r3, r1
 8001618:	0031      	movs	r1, r6
 800161a:	0035      	movs	r5, r6
 800161c:	3808      	subs	r0, #8
 800161e:	4084      	lsls	r4, r0
 8001620:	40d9      	lsrs	r1, r3
 8001622:	4085      	lsls	r5, r0
 8001624:	430c      	orrs	r4, r1
 8001626:	4826      	ldr	r0, [pc, #152]	; (80016c0 <__aeabi_dmul+0x3a4>)
 8001628:	1a83      	subs	r3, r0, r2
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	469b      	mov	fp, r3
 8001632:	e697      	b.n	8001364 <__aeabi_dmul+0x48>
 8001634:	0005      	movs	r5, r0
 8001636:	4325      	orrs	r5, r4
 8001638:	d126      	bne.n	8001688 <__aeabi_dmul+0x36c>
 800163a:	2208      	movs	r2, #8
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2302      	movs	r3, #2
 8001640:	2400      	movs	r4, #0
 8001642:	4691      	mov	r9, r2
 8001644:	469b      	mov	fp, r3
 8001646:	e68d      	b.n	8001364 <__aeabi_dmul+0x48>
 8001648:	4652      	mov	r2, sl
 800164a:	9b00      	ldr	r3, [sp, #0]
 800164c:	4332      	orrs	r2, r6
 800164e:	d110      	bne.n	8001672 <__aeabi_dmul+0x356>
 8001650:	4915      	ldr	r1, [pc, #84]	; (80016a8 <__aeabi_dmul+0x38c>)
 8001652:	2600      	movs	r6, #0
 8001654:	468c      	mov	ip, r1
 8001656:	4463      	add	r3, ip
 8001658:	4649      	mov	r1, r9
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2302      	movs	r3, #2
 800165e:	4319      	orrs	r1, r3
 8001660:	4689      	mov	r9, r1
 8001662:	2002      	movs	r0, #2
 8001664:	e69d      	b.n	80013a2 <__aeabi_dmul+0x86>
 8001666:	465b      	mov	r3, fp
 8001668:	9701      	str	r7, [sp, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d000      	beq.n	8001670 <__aeabi_dmul+0x354>
 800166e:	e6ad      	b.n	80013cc <__aeabi_dmul+0xb0>
 8001670:	e6c3      	b.n	80013fa <__aeabi_dmul+0xde>
 8001672:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <__aeabi_dmul+0x38c>)
 8001674:	2003      	movs	r0, #3
 8001676:	4694      	mov	ip, r2
 8001678:	4463      	add	r3, ip
 800167a:	464a      	mov	r2, r9
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2303      	movs	r3, #3
 8001680:	431a      	orrs	r2, r3
 8001682:	4691      	mov	r9, r2
 8001684:	4652      	mov	r2, sl
 8001686:	e68c      	b.n	80013a2 <__aeabi_dmul+0x86>
 8001688:	220c      	movs	r2, #12
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2303      	movs	r3, #3
 800168e:	0005      	movs	r5, r0
 8001690:	4691      	mov	r9, r2
 8001692:	469b      	mov	fp, r3
 8001694:	e666      	b.n	8001364 <__aeabi_dmul+0x48>
 8001696:	2304      	movs	r3, #4
 8001698:	4699      	mov	r9, r3
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	2400      	movs	r4, #0
 80016a2:	469b      	mov	fp, r3
 80016a4:	e65e      	b.n	8001364 <__aeabi_dmul+0x48>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff
 80016ac:	fffffc01 	.word	0xfffffc01
 80016b0:	0800dc10 	.word	0x0800dc10
 80016b4:	000003ff 	.word	0x000003ff
 80016b8:	feffffff 	.word	0xfeffffff
 80016bc:	000007fe 	.word	0x000007fe
 80016c0:	fffffc0d 	.word	0xfffffc0d
 80016c4:	4649      	mov	r1, r9
 80016c6:	2301      	movs	r3, #1
 80016c8:	4319      	orrs	r1, r3
 80016ca:	4689      	mov	r9, r1
 80016cc:	2600      	movs	r6, #0
 80016ce:	2001      	movs	r0, #1
 80016d0:	e667      	b.n	80013a2 <__aeabi_dmul+0x86>
 80016d2:	2300      	movs	r3, #0
 80016d4:	2480      	movs	r4, #128	; 0x80
 80016d6:	2500      	movs	r5, #0
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <__aeabi_dmul+0x4cc>)
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	0324      	lsls	r4, r4, #12
 80016de:	e67e      	b.n	80013de <__aeabi_dmul+0xc2>
 80016e0:	2001      	movs	r0, #1
 80016e2:	1a40      	subs	r0, r0, r1
 80016e4:	2838      	cmp	r0, #56	; 0x38
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dmul+0x3ce>
 80016e8:	e676      	b.n	80013d8 <__aeabi_dmul+0xbc>
 80016ea:	281f      	cmp	r0, #31
 80016ec:	dd5b      	ble.n	80017a6 <__aeabi_dmul+0x48a>
 80016ee:	221f      	movs	r2, #31
 80016f0:	0023      	movs	r3, r4
 80016f2:	4252      	negs	r2, r2
 80016f4:	1a51      	subs	r1, r2, r1
 80016f6:	40cb      	lsrs	r3, r1
 80016f8:	0019      	movs	r1, r3
 80016fa:	2820      	cmp	r0, #32
 80016fc:	d003      	beq.n	8001706 <__aeabi_dmul+0x3ea>
 80016fe:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <__aeabi_dmul+0x4d0>)
 8001700:	4462      	add	r2, ip
 8001702:	4094      	lsls	r4, r2
 8001704:	4325      	orrs	r5, r4
 8001706:	1e6a      	subs	r2, r5, #1
 8001708:	4195      	sbcs	r5, r2
 800170a:	002a      	movs	r2, r5
 800170c:	430a      	orrs	r2, r1
 800170e:	2107      	movs	r1, #7
 8001710:	000d      	movs	r5, r1
 8001712:	2400      	movs	r4, #0
 8001714:	4015      	ands	r5, r2
 8001716:	4211      	tst	r1, r2
 8001718:	d05b      	beq.n	80017d2 <__aeabi_dmul+0x4b6>
 800171a:	210f      	movs	r1, #15
 800171c:	2400      	movs	r4, #0
 800171e:	4011      	ands	r1, r2
 8001720:	2904      	cmp	r1, #4
 8001722:	d053      	beq.n	80017cc <__aeabi_dmul+0x4b0>
 8001724:	1d11      	adds	r1, r2, #4
 8001726:	4291      	cmp	r1, r2
 8001728:	4192      	sbcs	r2, r2
 800172a:	4252      	negs	r2, r2
 800172c:	18a4      	adds	r4, r4, r2
 800172e:	000a      	movs	r2, r1
 8001730:	0223      	lsls	r3, r4, #8
 8001732:	d54b      	bpl.n	80017cc <__aeabi_dmul+0x4b0>
 8001734:	2201      	movs	r2, #1
 8001736:	2400      	movs	r4, #0
 8001738:	2500      	movs	r5, #0
 800173a:	e650      	b.n	80013de <__aeabi_dmul+0xc2>
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	421c      	tst	r4, r3
 8001742:	d009      	beq.n	8001758 <__aeabi_dmul+0x43c>
 8001744:	421e      	tst	r6, r3
 8001746:	d107      	bne.n	8001758 <__aeabi_dmul+0x43c>
 8001748:	4333      	orrs	r3, r6
 800174a:	031c      	lsls	r4, r3, #12
 800174c:	4643      	mov	r3, r8
 800174e:	0015      	movs	r5, r2
 8001750:	0b24      	lsrs	r4, r4, #12
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <__aeabi_dmul+0x4cc>)
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	e642      	b.n	80013de <__aeabi_dmul+0xc2>
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0312      	lsls	r2, r2, #12
 800175c:	4314      	orrs	r4, r2
 800175e:	0324      	lsls	r4, r4, #12
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <__aeabi_dmul+0x4cc>)
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	9701      	str	r7, [sp, #4]
 8001766:	e63a      	b.n	80013de <__aeabi_dmul+0xc2>
 8001768:	f000 fc80 	bl	800206c <__clzsi2>
 800176c:	0001      	movs	r1, r0
 800176e:	0002      	movs	r2, r0
 8001770:	3115      	adds	r1, #21
 8001772:	3220      	adds	r2, #32
 8001774:	291c      	cmp	r1, #28
 8001776:	dc00      	bgt.n	800177a <__aeabi_dmul+0x45e>
 8001778:	e74b      	b.n	8001612 <__aeabi_dmul+0x2f6>
 800177a:	0034      	movs	r4, r6
 800177c:	3808      	subs	r0, #8
 800177e:	2500      	movs	r5, #0
 8001780:	4084      	lsls	r4, r0
 8001782:	e750      	b.n	8001626 <__aeabi_dmul+0x30a>
 8001784:	f000 fc72 	bl	800206c <__clzsi2>
 8001788:	0003      	movs	r3, r0
 800178a:	001a      	movs	r2, r3
 800178c:	3215      	adds	r2, #21
 800178e:	3020      	adds	r0, #32
 8001790:	2a1c      	cmp	r2, #28
 8001792:	dc00      	bgt.n	8001796 <__aeabi_dmul+0x47a>
 8001794:	e71e      	b.n	80015d4 <__aeabi_dmul+0x2b8>
 8001796:	4656      	mov	r6, sl
 8001798:	3b08      	subs	r3, #8
 800179a:	2200      	movs	r2, #0
 800179c:	409e      	lsls	r6, r3
 800179e:	e723      	b.n	80015e8 <__aeabi_dmul+0x2cc>
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	469c      	mov	ip, r3
 80017a4:	e6e6      	b.n	8001574 <__aeabi_dmul+0x258>
 80017a6:	4912      	ldr	r1, [pc, #72]	; (80017f0 <__aeabi_dmul+0x4d4>)
 80017a8:	0022      	movs	r2, r4
 80017aa:	4461      	add	r1, ip
 80017ac:	002e      	movs	r6, r5
 80017ae:	408d      	lsls	r5, r1
 80017b0:	408a      	lsls	r2, r1
 80017b2:	40c6      	lsrs	r6, r0
 80017b4:	1e69      	subs	r1, r5, #1
 80017b6:	418d      	sbcs	r5, r1
 80017b8:	4332      	orrs	r2, r6
 80017ba:	432a      	orrs	r2, r5
 80017bc:	40c4      	lsrs	r4, r0
 80017be:	0753      	lsls	r3, r2, #29
 80017c0:	d0b6      	beq.n	8001730 <__aeabi_dmul+0x414>
 80017c2:	210f      	movs	r1, #15
 80017c4:	4011      	ands	r1, r2
 80017c6:	2904      	cmp	r1, #4
 80017c8:	d1ac      	bne.n	8001724 <__aeabi_dmul+0x408>
 80017ca:	e7b1      	b.n	8001730 <__aeabi_dmul+0x414>
 80017cc:	0765      	lsls	r5, r4, #29
 80017ce:	0264      	lsls	r4, r4, #9
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	08d2      	lsrs	r2, r2, #3
 80017d4:	4315      	orrs	r5, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	e601      	b.n	80013de <__aeabi_dmul+0xc2>
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	0312      	lsls	r2, r2, #12
 80017de:	4314      	orrs	r4, r2
 80017e0:	0324      	lsls	r4, r4, #12
 80017e2:	4a01      	ldr	r2, [pc, #4]	; (80017e8 <__aeabi_dmul+0x4cc>)
 80017e4:	0b24      	lsrs	r4, r4, #12
 80017e6:	e5fa      	b.n	80013de <__aeabi_dmul+0xc2>
 80017e8:	000007ff 	.word	0x000007ff
 80017ec:	0000043e 	.word	0x0000043e
 80017f0:	0000041e 	.word	0x0000041e

080017f4 <__aeabi_dsub>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	4657      	mov	r7, sl
 80017f8:	464e      	mov	r6, r9
 80017fa:	4645      	mov	r5, r8
 80017fc:	46de      	mov	lr, fp
 80017fe:	b5e0      	push	{r5, r6, r7, lr}
 8001800:	001e      	movs	r6, r3
 8001802:	0017      	movs	r7, r2
 8001804:	004a      	lsls	r2, r1, #1
 8001806:	030b      	lsls	r3, r1, #12
 8001808:	0d52      	lsrs	r2, r2, #21
 800180a:	0a5b      	lsrs	r3, r3, #9
 800180c:	4690      	mov	r8, r2
 800180e:	0f42      	lsrs	r2, r0, #29
 8001810:	431a      	orrs	r2, r3
 8001812:	0fcd      	lsrs	r5, r1, #31
 8001814:	4ccd      	ldr	r4, [pc, #820]	; (8001b4c <__aeabi_dsub+0x358>)
 8001816:	0331      	lsls	r1, r6, #12
 8001818:	00c3      	lsls	r3, r0, #3
 800181a:	4694      	mov	ip, r2
 800181c:	0070      	lsls	r0, r6, #1
 800181e:	0f7a      	lsrs	r2, r7, #29
 8001820:	0a49      	lsrs	r1, r1, #9
 8001822:	00ff      	lsls	r7, r7, #3
 8001824:	469a      	mov	sl, r3
 8001826:	46b9      	mov	r9, r7
 8001828:	0d40      	lsrs	r0, r0, #21
 800182a:	0ff6      	lsrs	r6, r6, #31
 800182c:	4311      	orrs	r1, r2
 800182e:	42a0      	cmp	r0, r4
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x40>
 8001832:	e0b1      	b.n	8001998 <__aeabi_dsub+0x1a4>
 8001834:	2201      	movs	r2, #1
 8001836:	4056      	eors	r6, r2
 8001838:	46b3      	mov	fp, r6
 800183a:	42b5      	cmp	r5, r6
 800183c:	d100      	bne.n	8001840 <__aeabi_dsub+0x4c>
 800183e:	e088      	b.n	8001952 <__aeabi_dsub+0x15e>
 8001840:	4642      	mov	r2, r8
 8001842:	1a12      	subs	r2, r2, r0
 8001844:	2a00      	cmp	r2, #0
 8001846:	dc00      	bgt.n	800184a <__aeabi_dsub+0x56>
 8001848:	e0ae      	b.n	80019a8 <__aeabi_dsub+0x1b4>
 800184a:	2800      	cmp	r0, #0
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x5c>
 800184e:	e0c1      	b.n	80019d4 <__aeabi_dsub+0x1e0>
 8001850:	48be      	ldr	r0, [pc, #760]	; (8001b4c <__aeabi_dsub+0x358>)
 8001852:	4580      	cmp	r8, r0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x64>
 8001856:	e151      	b.n	8001afc <__aeabi_dsub+0x308>
 8001858:	2080      	movs	r0, #128	; 0x80
 800185a:	0400      	lsls	r0, r0, #16
 800185c:	4301      	orrs	r1, r0
 800185e:	2a38      	cmp	r2, #56	; 0x38
 8001860:	dd00      	ble.n	8001864 <__aeabi_dsub+0x70>
 8001862:	e17b      	b.n	8001b5c <__aeabi_dsub+0x368>
 8001864:	2a1f      	cmp	r2, #31
 8001866:	dd00      	ble.n	800186a <__aeabi_dsub+0x76>
 8001868:	e1ee      	b.n	8001c48 <__aeabi_dsub+0x454>
 800186a:	2020      	movs	r0, #32
 800186c:	003e      	movs	r6, r7
 800186e:	1a80      	subs	r0, r0, r2
 8001870:	000c      	movs	r4, r1
 8001872:	40d6      	lsrs	r6, r2
 8001874:	40d1      	lsrs	r1, r2
 8001876:	4087      	lsls	r7, r0
 8001878:	4662      	mov	r2, ip
 800187a:	4084      	lsls	r4, r0
 800187c:	1a52      	subs	r2, r2, r1
 800187e:	1e78      	subs	r0, r7, #1
 8001880:	4187      	sbcs	r7, r0
 8001882:	4694      	mov	ip, r2
 8001884:	4334      	orrs	r4, r6
 8001886:	4327      	orrs	r7, r4
 8001888:	1bdc      	subs	r4, r3, r7
 800188a:	42a3      	cmp	r3, r4
 800188c:	419b      	sbcs	r3, r3
 800188e:	4662      	mov	r2, ip
 8001890:	425b      	negs	r3, r3
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4699      	mov	r9, r3
 8001896:	464b      	mov	r3, r9
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	d400      	bmi.n	800189e <__aeabi_dsub+0xaa>
 800189c:	e118      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 800189e:	464b      	mov	r3, r9
 80018a0:	0258      	lsls	r0, r3, #9
 80018a2:	0a43      	lsrs	r3, r0, #9
 80018a4:	4699      	mov	r9, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <__aeabi_dsub+0xba>
 80018ac:	e137      	b.n	8001b1e <__aeabi_dsub+0x32a>
 80018ae:	4648      	mov	r0, r9
 80018b0:	f000 fbdc 	bl	800206c <__clzsi2>
 80018b4:	0001      	movs	r1, r0
 80018b6:	3908      	subs	r1, #8
 80018b8:	2320      	movs	r3, #32
 80018ba:	0022      	movs	r2, r4
 80018bc:	4648      	mov	r0, r9
 80018be:	1a5b      	subs	r3, r3, r1
 80018c0:	40da      	lsrs	r2, r3
 80018c2:	4088      	lsls	r0, r1
 80018c4:	408c      	lsls	r4, r1
 80018c6:	4643      	mov	r3, r8
 80018c8:	4310      	orrs	r0, r2
 80018ca:	4588      	cmp	r8, r1
 80018cc:	dd00      	ble.n	80018d0 <__aeabi_dsub+0xdc>
 80018ce:	e136      	b.n	8001b3e <__aeabi_dsub+0x34a>
 80018d0:	1ac9      	subs	r1, r1, r3
 80018d2:	1c4b      	adds	r3, r1, #1
 80018d4:	2b1f      	cmp	r3, #31
 80018d6:	dd00      	ble.n	80018da <__aeabi_dsub+0xe6>
 80018d8:	e0ea      	b.n	8001ab0 <__aeabi_dsub+0x2bc>
 80018da:	2220      	movs	r2, #32
 80018dc:	0026      	movs	r6, r4
 80018de:	1ad2      	subs	r2, r2, r3
 80018e0:	0001      	movs	r1, r0
 80018e2:	4094      	lsls	r4, r2
 80018e4:	40de      	lsrs	r6, r3
 80018e6:	40d8      	lsrs	r0, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	4091      	lsls	r1, r2
 80018ec:	1e62      	subs	r2, r4, #1
 80018ee:	4194      	sbcs	r4, r2
 80018f0:	4681      	mov	r9, r0
 80018f2:	4698      	mov	r8, r3
 80018f4:	4331      	orrs	r1, r6
 80018f6:	430c      	orrs	r4, r1
 80018f8:	0763      	lsls	r3, r4, #29
 80018fa:	d009      	beq.n	8001910 <__aeabi_dsub+0x11c>
 80018fc:	230f      	movs	r3, #15
 80018fe:	4023      	ands	r3, r4
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <__aeabi_dsub+0x11c>
 8001904:	1d23      	adds	r3, r4, #4
 8001906:	42a3      	cmp	r3, r4
 8001908:	41a4      	sbcs	r4, r4
 800190a:	4264      	negs	r4, r4
 800190c:	44a1      	add	r9, r4
 800190e:	001c      	movs	r4, r3
 8001910:	464b      	mov	r3, r9
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	d400      	bmi.n	8001918 <__aeabi_dsub+0x124>
 8001916:	e0de      	b.n	8001ad6 <__aeabi_dsub+0x2e2>
 8001918:	4641      	mov	r1, r8
 800191a:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <__aeabi_dsub+0x358>)
 800191c:	3101      	adds	r1, #1
 800191e:	4299      	cmp	r1, r3
 8001920:	d100      	bne.n	8001924 <__aeabi_dsub+0x130>
 8001922:	e0e7      	b.n	8001af4 <__aeabi_dsub+0x300>
 8001924:	464b      	mov	r3, r9
 8001926:	488a      	ldr	r0, [pc, #552]	; (8001b50 <__aeabi_dsub+0x35c>)
 8001928:	08e4      	lsrs	r4, r4, #3
 800192a:	4003      	ands	r3, r0
 800192c:	0018      	movs	r0, r3
 800192e:	0549      	lsls	r1, r1, #21
 8001930:	075b      	lsls	r3, r3, #29
 8001932:	0240      	lsls	r0, r0, #9
 8001934:	4323      	orrs	r3, r4
 8001936:	0d4a      	lsrs	r2, r1, #21
 8001938:	0b04      	lsrs	r4, r0, #12
 800193a:	0512      	lsls	r2, r2, #20
 800193c:	07ed      	lsls	r5, r5, #31
 800193e:	4322      	orrs	r2, r4
 8001940:	432a      	orrs	r2, r5
 8001942:	0018      	movs	r0, r3
 8001944:	0011      	movs	r1, r2
 8001946:	bcf0      	pop	{r4, r5, r6, r7}
 8001948:	46bb      	mov	fp, r7
 800194a:	46b2      	mov	sl, r6
 800194c:	46a9      	mov	r9, r5
 800194e:	46a0      	mov	r8, r4
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001952:	4642      	mov	r2, r8
 8001954:	1a12      	subs	r2, r2, r0
 8001956:	2a00      	cmp	r2, #0
 8001958:	dd52      	ble.n	8001a00 <__aeabi_dsub+0x20c>
 800195a:	2800      	cmp	r0, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x16c>
 800195e:	e09c      	b.n	8001a9a <__aeabi_dsub+0x2a6>
 8001960:	45a0      	cmp	r8, r4
 8001962:	d100      	bne.n	8001966 <__aeabi_dsub+0x172>
 8001964:	e0ca      	b.n	8001afc <__aeabi_dsub+0x308>
 8001966:	2080      	movs	r0, #128	; 0x80
 8001968:	0400      	lsls	r0, r0, #16
 800196a:	4301      	orrs	r1, r0
 800196c:	2a38      	cmp	r2, #56	; 0x38
 800196e:	dd00      	ble.n	8001972 <__aeabi_dsub+0x17e>
 8001970:	e149      	b.n	8001c06 <__aeabi_dsub+0x412>
 8001972:	2a1f      	cmp	r2, #31
 8001974:	dc00      	bgt.n	8001978 <__aeabi_dsub+0x184>
 8001976:	e197      	b.n	8001ca8 <__aeabi_dsub+0x4b4>
 8001978:	0010      	movs	r0, r2
 800197a:	000e      	movs	r6, r1
 800197c:	3820      	subs	r0, #32
 800197e:	40c6      	lsrs	r6, r0
 8001980:	2a20      	cmp	r2, #32
 8001982:	d004      	beq.n	800198e <__aeabi_dsub+0x19a>
 8001984:	2040      	movs	r0, #64	; 0x40
 8001986:	1a82      	subs	r2, r0, r2
 8001988:	4091      	lsls	r1, r2
 800198a:	430f      	orrs	r7, r1
 800198c:	46b9      	mov	r9, r7
 800198e:	464c      	mov	r4, r9
 8001990:	1e62      	subs	r2, r4, #1
 8001992:	4194      	sbcs	r4, r2
 8001994:	4334      	orrs	r4, r6
 8001996:	e13a      	b.n	8001c0e <__aeabi_dsub+0x41a>
 8001998:	000a      	movs	r2, r1
 800199a:	433a      	orrs	r2, r7
 800199c:	d028      	beq.n	80019f0 <__aeabi_dsub+0x1fc>
 800199e:	46b3      	mov	fp, r6
 80019a0:	42b5      	cmp	r5, r6
 80019a2:	d02b      	beq.n	80019fc <__aeabi_dsub+0x208>
 80019a4:	4a6b      	ldr	r2, [pc, #428]	; (8001b54 <__aeabi_dsub+0x360>)
 80019a6:	4442      	add	r2, r8
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d05d      	beq.n	8001a68 <__aeabi_dsub+0x274>
 80019ac:	4642      	mov	r2, r8
 80019ae:	4644      	mov	r4, r8
 80019b0:	1a82      	subs	r2, r0, r2
 80019b2:	2c00      	cmp	r4, #0
 80019b4:	d000      	beq.n	80019b8 <__aeabi_dsub+0x1c4>
 80019b6:	e0f5      	b.n	8001ba4 <__aeabi_dsub+0x3b0>
 80019b8:	4665      	mov	r5, ip
 80019ba:	431d      	orrs	r5, r3
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dsub+0x1cc>
 80019be:	e19c      	b.n	8001cfa <__aeabi_dsub+0x506>
 80019c0:	1e55      	subs	r5, r2, #1
 80019c2:	2a01      	cmp	r2, #1
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1d4>
 80019c6:	e1fb      	b.n	8001dc0 <__aeabi_dsub+0x5cc>
 80019c8:	4c60      	ldr	r4, [pc, #384]	; (8001b4c <__aeabi_dsub+0x358>)
 80019ca:	42a2      	cmp	r2, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1dc>
 80019ce:	e1bd      	b.n	8001d4c <__aeabi_dsub+0x558>
 80019d0:	002a      	movs	r2, r5
 80019d2:	e0f0      	b.n	8001bb6 <__aeabi_dsub+0x3c2>
 80019d4:	0008      	movs	r0, r1
 80019d6:	4338      	orrs	r0, r7
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x1e8>
 80019da:	e0c3      	b.n	8001b64 <__aeabi_dsub+0x370>
 80019dc:	1e50      	subs	r0, r2, #1
 80019de:	2a01      	cmp	r2, #1
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1f0>
 80019e2:	e1a8      	b.n	8001d36 <__aeabi_dsub+0x542>
 80019e4:	4c59      	ldr	r4, [pc, #356]	; (8001b4c <__aeabi_dsub+0x358>)
 80019e6:	42a2      	cmp	r2, r4
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f8>
 80019ea:	e087      	b.n	8001afc <__aeabi_dsub+0x308>
 80019ec:	0002      	movs	r2, r0
 80019ee:	e736      	b.n	800185e <__aeabi_dsub+0x6a>
 80019f0:	2201      	movs	r2, #1
 80019f2:	4056      	eors	r6, r2
 80019f4:	46b3      	mov	fp, r6
 80019f6:	42b5      	cmp	r5, r6
 80019f8:	d000      	beq.n	80019fc <__aeabi_dsub+0x208>
 80019fa:	e721      	b.n	8001840 <__aeabi_dsub+0x4c>
 80019fc:	4a55      	ldr	r2, [pc, #340]	; (8001b54 <__aeabi_dsub+0x360>)
 80019fe:	4442      	add	r2, r8
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x212>
 8001a04:	e0b5      	b.n	8001b72 <__aeabi_dsub+0x37e>
 8001a06:	4642      	mov	r2, r8
 8001a08:	4644      	mov	r4, r8
 8001a0a:	1a82      	subs	r2, r0, r2
 8001a0c:	2c00      	cmp	r4, #0
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x21e>
 8001a10:	e138      	b.n	8001c84 <__aeabi_dsub+0x490>
 8001a12:	4e4e      	ldr	r6, [pc, #312]	; (8001b4c <__aeabi_dsub+0x358>)
 8001a14:	42b0      	cmp	r0, r6
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x226>
 8001a18:	e1de      	b.n	8001dd8 <__aeabi_dsub+0x5e4>
 8001a1a:	2680      	movs	r6, #128	; 0x80
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	0436      	lsls	r6, r6, #16
 8001a20:	4334      	orrs	r4, r6
 8001a22:	46a4      	mov	ip, r4
 8001a24:	2a38      	cmp	r2, #56	; 0x38
 8001a26:	dd00      	ble.n	8001a2a <__aeabi_dsub+0x236>
 8001a28:	e196      	b.n	8001d58 <__aeabi_dsub+0x564>
 8001a2a:	2a1f      	cmp	r2, #31
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dsub+0x23c>
 8001a2e:	e224      	b.n	8001e7a <__aeabi_dsub+0x686>
 8001a30:	2620      	movs	r6, #32
 8001a32:	1ab4      	subs	r4, r6, r2
 8001a34:	46a2      	mov	sl, r4
 8001a36:	4664      	mov	r4, ip
 8001a38:	4656      	mov	r6, sl
 8001a3a:	40b4      	lsls	r4, r6
 8001a3c:	46a1      	mov	r9, r4
 8001a3e:	001c      	movs	r4, r3
 8001a40:	464e      	mov	r6, r9
 8001a42:	40d4      	lsrs	r4, r2
 8001a44:	4326      	orrs	r6, r4
 8001a46:	0034      	movs	r4, r6
 8001a48:	4656      	mov	r6, sl
 8001a4a:	40b3      	lsls	r3, r6
 8001a4c:	1e5e      	subs	r6, r3, #1
 8001a4e:	41b3      	sbcs	r3, r6
 8001a50:	431c      	orrs	r4, r3
 8001a52:	4663      	mov	r3, ip
 8001a54:	40d3      	lsrs	r3, r2
 8001a56:	18c9      	adds	r1, r1, r3
 8001a58:	19e4      	adds	r4, r4, r7
 8001a5a:	42bc      	cmp	r4, r7
 8001a5c:	41bf      	sbcs	r7, r7
 8001a5e:	427f      	negs	r7, r7
 8001a60:	46b9      	mov	r9, r7
 8001a62:	4680      	mov	r8, r0
 8001a64:	4489      	add	r9, r1
 8001a66:	e0d8      	b.n	8001c1a <__aeabi_dsub+0x426>
 8001a68:	4640      	mov	r0, r8
 8001a6a:	4c3b      	ldr	r4, [pc, #236]	; (8001b58 <__aeabi_dsub+0x364>)
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	4220      	tst	r0, r4
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dsub+0x280>
 8001a72:	e0b4      	b.n	8001bde <__aeabi_dsub+0x3ea>
 8001a74:	4640      	mov	r0, r8
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x288>
 8001a7a:	e144      	b.n	8001d06 <__aeabi_dsub+0x512>
 8001a7c:	4660      	mov	r0, ip
 8001a7e:	4318      	orrs	r0, r3
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x290>
 8001a82:	e190      	b.n	8001da6 <__aeabi_dsub+0x5b2>
 8001a84:	0008      	movs	r0, r1
 8001a86:	4338      	orrs	r0, r7
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dsub+0x298>
 8001a8a:	e1aa      	b.n	8001de2 <__aeabi_dsub+0x5ee>
 8001a8c:	4661      	mov	r1, ip
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	0749      	lsls	r1, r1, #29
 8001a92:	430b      	orrs	r3, r1
 8001a94:	4661      	mov	r1, ip
 8001a96:	08cc      	lsrs	r4, r1, #3
 8001a98:	e027      	b.n	8001aea <__aeabi_dsub+0x2f6>
 8001a9a:	0008      	movs	r0, r1
 8001a9c:	4338      	orrs	r0, r7
 8001a9e:	d061      	beq.n	8001b64 <__aeabi_dsub+0x370>
 8001aa0:	1e50      	subs	r0, r2, #1
 8001aa2:	2a01      	cmp	r2, #1
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x2b4>
 8001aa6:	e139      	b.n	8001d1c <__aeabi_dsub+0x528>
 8001aa8:	42a2      	cmp	r2, r4
 8001aaa:	d027      	beq.n	8001afc <__aeabi_dsub+0x308>
 8001aac:	0002      	movs	r2, r0
 8001aae:	e75d      	b.n	800196c <__aeabi_dsub+0x178>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	391f      	subs	r1, #31
 8001ab4:	40ca      	lsrs	r2, r1
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d003      	beq.n	8001ac4 <__aeabi_dsub+0x2d0>
 8001abc:	2240      	movs	r2, #64	; 0x40
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4098      	lsls	r0, r3
 8001ac2:	4304      	orrs	r4, r0
 8001ac4:	1e63      	subs	r3, r4, #1
 8001ac6:	419c      	sbcs	r4, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4699      	mov	r9, r3
 8001acc:	4698      	mov	r8, r3
 8001ace:	430c      	orrs	r4, r1
 8001ad0:	0763      	lsls	r3, r4, #29
 8001ad2:	d000      	beq.n	8001ad6 <__aeabi_dsub+0x2e2>
 8001ad4:	e712      	b.n	80018fc <__aeabi_dsub+0x108>
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	464a      	mov	r2, r9
 8001ada:	08e4      	lsrs	r4, r4, #3
 8001adc:	075b      	lsls	r3, r3, #29
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	08d4      	lsrs	r4, r2, #3
 8001ae2:	4642      	mov	r2, r8
 8001ae4:	4919      	ldr	r1, [pc, #100]	; (8001b4c <__aeabi_dsub+0x358>)
 8001ae6:	428a      	cmp	r2, r1
 8001ae8:	d00e      	beq.n	8001b08 <__aeabi_dsub+0x314>
 8001aea:	0324      	lsls	r4, r4, #12
 8001aec:	0552      	lsls	r2, r2, #21
 8001aee:	0b24      	lsrs	r4, r4, #12
 8001af0:	0d52      	lsrs	r2, r2, #21
 8001af2:	e722      	b.n	800193a <__aeabi_dsub+0x146>
 8001af4:	000a      	movs	r2, r1
 8001af6:	2400      	movs	r4, #0
 8001af8:	2300      	movs	r3, #0
 8001afa:	e71e      	b.n	800193a <__aeabi_dsub+0x146>
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	4662      	mov	r2, ip
 8001b00:	0752      	lsls	r2, r2, #29
 8001b02:	4313      	orrs	r3, r2
 8001b04:	4662      	mov	r2, ip
 8001b06:	08d4      	lsrs	r4, r2, #3
 8001b08:	001a      	movs	r2, r3
 8001b0a:	4322      	orrs	r2, r4
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x31c>
 8001b0e:	e1fc      	b.n	8001f0a <__aeabi_dsub+0x716>
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0312      	lsls	r2, r2, #12
 8001b14:	4314      	orrs	r4, r2
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <__aeabi_dsub+0x358>)
 8001b1a:	0b24      	lsrs	r4, r4, #12
 8001b1c:	e70d      	b.n	800193a <__aeabi_dsub+0x146>
 8001b1e:	0020      	movs	r0, r4
 8001b20:	f000 faa4 	bl	800206c <__clzsi2>
 8001b24:	0001      	movs	r1, r0
 8001b26:	3118      	adds	r1, #24
 8001b28:	291f      	cmp	r1, #31
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_dsub+0x33a>
 8001b2c:	e6c4      	b.n	80018b8 <__aeabi_dsub+0xc4>
 8001b2e:	3808      	subs	r0, #8
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4643      	mov	r3, r8
 8001b34:	0020      	movs	r0, r4
 8001b36:	2400      	movs	r4, #0
 8001b38:	4588      	cmp	r8, r1
 8001b3a:	dc00      	bgt.n	8001b3e <__aeabi_dsub+0x34a>
 8001b3c:	e6c8      	b.n	80018d0 <__aeabi_dsub+0xdc>
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__aeabi_dsub+0x35c>)
 8001b40:	1a5b      	subs	r3, r3, r1
 8001b42:	4010      	ands	r0, r2
 8001b44:	4698      	mov	r8, r3
 8001b46:	4681      	mov	r9, r0
 8001b48:	e6d6      	b.n	80018f8 <__aeabi_dsub+0x104>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	000007ff 	.word	0x000007ff
 8001b50:	ff7fffff 	.word	0xff7fffff
 8001b54:	fffff801 	.word	0xfffff801
 8001b58:	000007fe 	.word	0x000007fe
 8001b5c:	430f      	orrs	r7, r1
 8001b5e:	1e7a      	subs	r2, r7, #1
 8001b60:	4197      	sbcs	r7, r2
 8001b62:	e691      	b.n	8001888 <__aeabi_dsub+0x94>
 8001b64:	4661      	mov	r1, ip
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	0749      	lsls	r1, r1, #29
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08cc      	lsrs	r4, r1, #3
 8001b70:	e7b8      	b.n	8001ae4 <__aeabi_dsub+0x2f0>
 8001b72:	4640      	mov	r0, r8
 8001b74:	4cd3      	ldr	r4, [pc, #844]	; (8001ec4 <__aeabi_dsub+0x6d0>)
 8001b76:	3001      	adds	r0, #1
 8001b78:	4220      	tst	r0, r4
 8001b7a:	d000      	beq.n	8001b7e <__aeabi_dsub+0x38a>
 8001b7c:	e0a2      	b.n	8001cc4 <__aeabi_dsub+0x4d0>
 8001b7e:	4640      	mov	r0, r8
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x392>
 8001b84:	e101      	b.n	8001d8a <__aeabi_dsub+0x596>
 8001b86:	4660      	mov	r0, ip
 8001b88:	4318      	orrs	r0, r3
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dsub+0x39a>
 8001b8c:	e15e      	b.n	8001e4c <__aeabi_dsub+0x658>
 8001b8e:	0008      	movs	r0, r1
 8001b90:	4338      	orrs	r0, r7
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3a2>
 8001b94:	e15f      	b.n	8001e56 <__aeabi_dsub+0x662>
 8001b96:	4661      	mov	r1, ip
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	0749      	lsls	r1, r1, #29
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08cc      	lsrs	r4, r1, #3
 8001ba2:	e7a2      	b.n	8001aea <__aeabi_dsub+0x2f6>
 8001ba4:	4dc8      	ldr	r5, [pc, #800]	; (8001ec8 <__aeabi_dsub+0x6d4>)
 8001ba6:	42a8      	cmp	r0, r5
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x3b8>
 8001baa:	e0cf      	b.n	8001d4c <__aeabi_dsub+0x558>
 8001bac:	2580      	movs	r5, #128	; 0x80
 8001bae:	4664      	mov	r4, ip
 8001bb0:	042d      	lsls	r5, r5, #16
 8001bb2:	432c      	orrs	r4, r5
 8001bb4:	46a4      	mov	ip, r4
 8001bb6:	2a38      	cmp	r2, #56	; 0x38
 8001bb8:	dc56      	bgt.n	8001c68 <__aeabi_dsub+0x474>
 8001bba:	2a1f      	cmp	r2, #31
 8001bbc:	dd00      	ble.n	8001bc0 <__aeabi_dsub+0x3cc>
 8001bbe:	e0d1      	b.n	8001d64 <__aeabi_dsub+0x570>
 8001bc0:	2520      	movs	r5, #32
 8001bc2:	001e      	movs	r6, r3
 8001bc4:	1aad      	subs	r5, r5, r2
 8001bc6:	4664      	mov	r4, ip
 8001bc8:	40ab      	lsls	r3, r5
 8001bca:	40ac      	lsls	r4, r5
 8001bcc:	40d6      	lsrs	r6, r2
 8001bce:	1e5d      	subs	r5, r3, #1
 8001bd0:	41ab      	sbcs	r3, r5
 8001bd2:	4334      	orrs	r4, r6
 8001bd4:	4323      	orrs	r3, r4
 8001bd6:	4664      	mov	r4, ip
 8001bd8:	40d4      	lsrs	r4, r2
 8001bda:	1b09      	subs	r1, r1, r4
 8001bdc:	e049      	b.n	8001c72 <__aeabi_dsub+0x47e>
 8001bde:	4660      	mov	r0, ip
 8001be0:	1bdc      	subs	r4, r3, r7
 8001be2:	1a46      	subs	r6, r0, r1
 8001be4:	42a3      	cmp	r3, r4
 8001be6:	4180      	sbcs	r0, r0
 8001be8:	4240      	negs	r0, r0
 8001bea:	4681      	mov	r9, r0
 8001bec:	0030      	movs	r0, r6
 8001bee:	464e      	mov	r6, r9
 8001bf0:	1b80      	subs	r0, r0, r6
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0200      	lsls	r0, r0, #8
 8001bf6:	d476      	bmi.n	8001ce6 <__aeabi_dsub+0x4f2>
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x40c>
 8001bfe:	e652      	b.n	80018a6 <__aeabi_dsub+0xb2>
 8001c00:	2400      	movs	r4, #0
 8001c02:	2500      	movs	r5, #0
 8001c04:	e771      	b.n	8001aea <__aeabi_dsub+0x2f6>
 8001c06:	4339      	orrs	r1, r7
 8001c08:	000c      	movs	r4, r1
 8001c0a:	1e62      	subs	r2, r4, #1
 8001c0c:	4194      	sbcs	r4, r2
 8001c0e:	18e4      	adds	r4, r4, r3
 8001c10:	429c      	cmp	r4, r3
 8001c12:	419b      	sbcs	r3, r3
 8001c14:	425b      	negs	r3, r3
 8001c16:	4463      	add	r3, ip
 8001c18:	4699      	mov	r9, r3
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	d400      	bmi.n	8001c22 <__aeabi_dsub+0x42e>
 8001c20:	e756      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001c22:	2301      	movs	r3, #1
 8001c24:	469c      	mov	ip, r3
 8001c26:	4ba8      	ldr	r3, [pc, #672]	; (8001ec8 <__aeabi_dsub+0x6d4>)
 8001c28:	44e0      	add	r8, ip
 8001c2a:	4598      	cmp	r8, r3
 8001c2c:	d038      	beq.n	8001ca0 <__aeabi_dsub+0x4ac>
 8001c2e:	464b      	mov	r3, r9
 8001c30:	48a6      	ldr	r0, [pc, #664]	; (8001ecc <__aeabi_dsub+0x6d8>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	4003      	ands	r3, r0
 8001c36:	0018      	movs	r0, r3
 8001c38:	0863      	lsrs	r3, r4, #1
 8001c3a:	4014      	ands	r4, r2
 8001c3c:	431c      	orrs	r4, r3
 8001c3e:	07c3      	lsls	r3, r0, #31
 8001c40:	431c      	orrs	r4, r3
 8001c42:	0843      	lsrs	r3, r0, #1
 8001c44:	4699      	mov	r9, r3
 8001c46:	e657      	b.n	80018f8 <__aeabi_dsub+0x104>
 8001c48:	0010      	movs	r0, r2
 8001c4a:	000e      	movs	r6, r1
 8001c4c:	3820      	subs	r0, #32
 8001c4e:	40c6      	lsrs	r6, r0
 8001c50:	2a20      	cmp	r2, #32
 8001c52:	d004      	beq.n	8001c5e <__aeabi_dsub+0x46a>
 8001c54:	2040      	movs	r0, #64	; 0x40
 8001c56:	1a82      	subs	r2, r0, r2
 8001c58:	4091      	lsls	r1, r2
 8001c5a:	430f      	orrs	r7, r1
 8001c5c:	46b9      	mov	r9, r7
 8001c5e:	464f      	mov	r7, r9
 8001c60:	1e7a      	subs	r2, r7, #1
 8001c62:	4197      	sbcs	r7, r2
 8001c64:	4337      	orrs	r7, r6
 8001c66:	e60f      	b.n	8001888 <__aeabi_dsub+0x94>
 8001c68:	4662      	mov	r2, ip
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	4193      	sbcs	r3, r2
 8001c72:	1afc      	subs	r4, r7, r3
 8001c74:	42a7      	cmp	r7, r4
 8001c76:	41bf      	sbcs	r7, r7
 8001c78:	427f      	negs	r7, r7
 8001c7a:	1bcb      	subs	r3, r1, r7
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	465d      	mov	r5, fp
 8001c80:	4680      	mov	r8, r0
 8001c82:	e608      	b.n	8001896 <__aeabi_dsub+0xa2>
 8001c84:	4666      	mov	r6, ip
 8001c86:	431e      	orrs	r6, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x498>
 8001c8a:	e0be      	b.n	8001e0a <__aeabi_dsub+0x616>
 8001c8c:	1e56      	subs	r6, r2, #1
 8001c8e:	2a01      	cmp	r2, #1
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x4a0>
 8001c92:	e109      	b.n	8001ea8 <__aeabi_dsub+0x6b4>
 8001c94:	4c8c      	ldr	r4, [pc, #560]	; (8001ec8 <__aeabi_dsub+0x6d4>)
 8001c96:	42a2      	cmp	r2, r4
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a8>
 8001c9a:	e119      	b.n	8001ed0 <__aeabi_dsub+0x6dc>
 8001c9c:	0032      	movs	r2, r6
 8001c9e:	e6c1      	b.n	8001a24 <__aeabi_dsub+0x230>
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e648      	b.n	800193a <__aeabi_dsub+0x146>
 8001ca8:	2020      	movs	r0, #32
 8001caa:	000c      	movs	r4, r1
 8001cac:	1a80      	subs	r0, r0, r2
 8001cae:	003e      	movs	r6, r7
 8001cb0:	4087      	lsls	r7, r0
 8001cb2:	4084      	lsls	r4, r0
 8001cb4:	40d6      	lsrs	r6, r2
 8001cb6:	1e78      	subs	r0, r7, #1
 8001cb8:	4187      	sbcs	r7, r0
 8001cba:	40d1      	lsrs	r1, r2
 8001cbc:	4334      	orrs	r4, r6
 8001cbe:	433c      	orrs	r4, r7
 8001cc0:	448c      	add	ip, r1
 8001cc2:	e7a4      	b.n	8001c0e <__aeabi_dsub+0x41a>
 8001cc4:	4a80      	ldr	r2, [pc, #512]	; (8001ec8 <__aeabi_dsub+0x6d4>)
 8001cc6:	4290      	cmp	r0, r2
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x4d8>
 8001cca:	e0e9      	b.n	8001ea0 <__aeabi_dsub+0x6ac>
 8001ccc:	19df      	adds	r7, r3, r7
 8001cce:	429f      	cmp	r7, r3
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	4461      	add	r1, ip
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	18c9      	adds	r1, r1, r3
 8001cd8:	07cc      	lsls	r4, r1, #31
 8001cda:	087f      	lsrs	r7, r7, #1
 8001cdc:	084b      	lsrs	r3, r1, #1
 8001cde:	4699      	mov	r9, r3
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	433c      	orrs	r4, r7
 8001ce4:	e6f4      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001ce6:	1afc      	subs	r4, r7, r3
 8001ce8:	42a7      	cmp	r7, r4
 8001cea:	41bf      	sbcs	r7, r7
 8001cec:	4663      	mov	r3, ip
 8001cee:	427f      	negs	r7, r7
 8001cf0:	1ac9      	subs	r1, r1, r3
 8001cf2:	1bcb      	subs	r3, r1, r7
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	465d      	mov	r5, fp
 8001cf8:	e5d5      	b.n	80018a6 <__aeabi_dsub+0xb2>
 8001cfa:	08ff      	lsrs	r7, r7, #3
 8001cfc:	074b      	lsls	r3, r1, #29
 8001cfe:	465d      	mov	r5, fp
 8001d00:	433b      	orrs	r3, r7
 8001d02:	08cc      	lsrs	r4, r1, #3
 8001d04:	e6ee      	b.n	8001ae4 <__aeabi_dsub+0x2f0>
 8001d06:	4662      	mov	r2, ip
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x51a>
 8001d0c:	e082      	b.n	8001e14 <__aeabi_dsub+0x620>
 8001d0e:	000b      	movs	r3, r1
 8001d10:	433b      	orrs	r3, r7
 8001d12:	d11b      	bne.n	8001d4c <__aeabi_dsub+0x558>
 8001d14:	2480      	movs	r4, #128	; 0x80
 8001d16:	2500      	movs	r5, #0
 8001d18:	0324      	lsls	r4, r4, #12
 8001d1a:	e6f9      	b.n	8001b10 <__aeabi_dsub+0x31c>
 8001d1c:	19dc      	adds	r4, r3, r7
 8001d1e:	429c      	cmp	r4, r3
 8001d20:	419b      	sbcs	r3, r3
 8001d22:	4461      	add	r1, ip
 8001d24:	4689      	mov	r9, r1
 8001d26:	425b      	negs	r3, r3
 8001d28:	4499      	add	r9, r3
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	d444      	bmi.n	8001dba <__aeabi_dsub+0x5c6>
 8001d30:	2301      	movs	r3, #1
 8001d32:	4698      	mov	r8, r3
 8001d34:	e6cc      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001d36:	1bdc      	subs	r4, r3, r7
 8001d38:	4662      	mov	r2, ip
 8001d3a:	42a3      	cmp	r3, r4
 8001d3c:	419b      	sbcs	r3, r3
 8001d3e:	1a51      	subs	r1, r2, r1
 8001d40:	425b      	negs	r3, r3
 8001d42:	1acb      	subs	r3, r1, r3
 8001d44:	4699      	mov	r9, r3
 8001d46:	2301      	movs	r3, #1
 8001d48:	4698      	mov	r8, r3
 8001d4a:	e5a4      	b.n	8001896 <__aeabi_dsub+0xa2>
 8001d4c:	08ff      	lsrs	r7, r7, #3
 8001d4e:	074b      	lsls	r3, r1, #29
 8001d50:	465d      	mov	r5, fp
 8001d52:	433b      	orrs	r3, r7
 8001d54:	08cc      	lsrs	r4, r1, #3
 8001d56:	e6d7      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001d58:	4662      	mov	r2, ip
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	0014      	movs	r4, r2
 8001d5e:	1e63      	subs	r3, r4, #1
 8001d60:	419c      	sbcs	r4, r3
 8001d62:	e679      	b.n	8001a58 <__aeabi_dsub+0x264>
 8001d64:	0015      	movs	r5, r2
 8001d66:	4664      	mov	r4, ip
 8001d68:	3d20      	subs	r5, #32
 8001d6a:	40ec      	lsrs	r4, r5
 8001d6c:	46a0      	mov	r8, r4
 8001d6e:	2a20      	cmp	r2, #32
 8001d70:	d005      	beq.n	8001d7e <__aeabi_dsub+0x58a>
 8001d72:	2540      	movs	r5, #64	; 0x40
 8001d74:	4664      	mov	r4, ip
 8001d76:	1aaa      	subs	r2, r5, r2
 8001d78:	4094      	lsls	r4, r2
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	469a      	mov	sl, r3
 8001d7e:	4654      	mov	r4, sl
 8001d80:	1e63      	subs	r3, r4, #1
 8001d82:	419c      	sbcs	r4, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	4323      	orrs	r3, r4
 8001d88:	e773      	b.n	8001c72 <__aeabi_dsub+0x47e>
 8001d8a:	4662      	mov	r2, ip
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	d023      	beq.n	8001dd8 <__aeabi_dsub+0x5e4>
 8001d90:	000a      	movs	r2, r1
 8001d92:	433a      	orrs	r2, r7
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x5a4>
 8001d96:	e0a0      	b.n	8001eda <__aeabi_dsub+0x6e6>
 8001d98:	4662      	mov	r2, ip
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	0752      	lsls	r2, r2, #29
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4662      	mov	r2, ip
 8001da2:	08d4      	lsrs	r4, r2, #3
 8001da4:	e6b0      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001da6:	000b      	movs	r3, r1
 8001da8:	433b      	orrs	r3, r7
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x5ba>
 8001dac:	e728      	b.n	8001c00 <__aeabi_dsub+0x40c>
 8001dae:	08ff      	lsrs	r7, r7, #3
 8001db0:	074b      	lsls	r3, r1, #29
 8001db2:	465d      	mov	r5, fp
 8001db4:	433b      	orrs	r3, r7
 8001db6:	08cc      	lsrs	r4, r1, #3
 8001db8:	e697      	b.n	8001aea <__aeabi_dsub+0x2f6>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	e736      	b.n	8001c2e <__aeabi_dsub+0x43a>
 8001dc0:	1afc      	subs	r4, r7, r3
 8001dc2:	42a7      	cmp	r7, r4
 8001dc4:	41bf      	sbcs	r7, r7
 8001dc6:	4663      	mov	r3, ip
 8001dc8:	427f      	negs	r7, r7
 8001dca:	1ac9      	subs	r1, r1, r3
 8001dcc:	1bcb      	subs	r3, r1, r7
 8001dce:	4699      	mov	r9, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	465d      	mov	r5, fp
 8001dd4:	4698      	mov	r8, r3
 8001dd6:	e55e      	b.n	8001896 <__aeabi_dsub+0xa2>
 8001dd8:	074b      	lsls	r3, r1, #29
 8001dda:	08ff      	lsrs	r7, r7, #3
 8001ddc:	433b      	orrs	r3, r7
 8001dde:	08cc      	lsrs	r4, r1, #3
 8001de0:	e692      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001de2:	1bdc      	subs	r4, r3, r7
 8001de4:	4660      	mov	r0, ip
 8001de6:	42a3      	cmp	r3, r4
 8001de8:	41b6      	sbcs	r6, r6
 8001dea:	1a40      	subs	r0, r0, r1
 8001dec:	4276      	negs	r6, r6
 8001dee:	1b80      	subs	r0, r0, r6
 8001df0:	4681      	mov	r9, r0
 8001df2:	0200      	lsls	r0, r0, #8
 8001df4:	d560      	bpl.n	8001eb8 <__aeabi_dsub+0x6c4>
 8001df6:	1afc      	subs	r4, r7, r3
 8001df8:	42a7      	cmp	r7, r4
 8001dfa:	41bf      	sbcs	r7, r7
 8001dfc:	4663      	mov	r3, ip
 8001dfe:	427f      	negs	r7, r7
 8001e00:	1ac9      	subs	r1, r1, r3
 8001e02:	1bcb      	subs	r3, r1, r7
 8001e04:	4699      	mov	r9, r3
 8001e06:	465d      	mov	r5, fp
 8001e08:	e576      	b.n	80018f8 <__aeabi_dsub+0x104>
 8001e0a:	08ff      	lsrs	r7, r7, #3
 8001e0c:	074b      	lsls	r3, r1, #29
 8001e0e:	433b      	orrs	r3, r7
 8001e10:	08cc      	lsrs	r4, r1, #3
 8001e12:	e667      	b.n	8001ae4 <__aeabi_dsub+0x2f0>
 8001e14:	000a      	movs	r2, r1
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	433a      	orrs	r2, r7
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x62a>
 8001e1c:	e66f      	b.n	8001afe <__aeabi_dsub+0x30a>
 8001e1e:	4662      	mov	r2, ip
 8001e20:	0752      	lsls	r2, r2, #29
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4662      	mov	r2, ip
 8001e26:	08d4      	lsrs	r4, r2, #3
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	0312      	lsls	r2, r2, #12
 8001e2c:	4214      	tst	r4, r2
 8001e2e:	d007      	beq.n	8001e40 <__aeabi_dsub+0x64c>
 8001e30:	08c8      	lsrs	r0, r1, #3
 8001e32:	4210      	tst	r0, r2
 8001e34:	d104      	bne.n	8001e40 <__aeabi_dsub+0x64c>
 8001e36:	465d      	mov	r5, fp
 8001e38:	0004      	movs	r4, r0
 8001e3a:	08fb      	lsrs	r3, r7, #3
 8001e3c:	0749      	lsls	r1, r1, #29
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	0f5a      	lsrs	r2, r3, #29
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	0752      	lsls	r2, r2, #29
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	e65d      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001e4c:	074b      	lsls	r3, r1, #29
 8001e4e:	08ff      	lsrs	r7, r7, #3
 8001e50:	433b      	orrs	r3, r7
 8001e52:	08cc      	lsrs	r4, r1, #3
 8001e54:	e649      	b.n	8001aea <__aeabi_dsub+0x2f6>
 8001e56:	19dc      	adds	r4, r3, r7
 8001e58:	429c      	cmp	r4, r3
 8001e5a:	419b      	sbcs	r3, r3
 8001e5c:	4461      	add	r1, ip
 8001e5e:	4689      	mov	r9, r1
 8001e60:	425b      	negs	r3, r3
 8001e62:	4499      	add	r9, r3
 8001e64:	464b      	mov	r3, r9
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	d400      	bmi.n	8001e6c <__aeabi_dsub+0x678>
 8001e6a:	e631      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <__aeabi_dsub+0x6d8>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	2301      	movs	r3, #1
 8001e74:	4691      	mov	r9, r2
 8001e76:	4698      	mov	r8, r3
 8001e78:	e62a      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4664      	mov	r4, ip
 8001e7e:	3e20      	subs	r6, #32
 8001e80:	40f4      	lsrs	r4, r6
 8001e82:	46a0      	mov	r8, r4
 8001e84:	2a20      	cmp	r2, #32
 8001e86:	d005      	beq.n	8001e94 <__aeabi_dsub+0x6a0>
 8001e88:	2640      	movs	r6, #64	; 0x40
 8001e8a:	4664      	mov	r4, ip
 8001e8c:	1ab2      	subs	r2, r6, r2
 8001e8e:	4094      	lsls	r4, r2
 8001e90:	4323      	orrs	r3, r4
 8001e92:	469a      	mov	sl, r3
 8001e94:	4654      	mov	r4, sl
 8001e96:	1e63      	subs	r3, r4, #1
 8001e98:	419c      	sbcs	r4, r3
 8001e9a:	4643      	mov	r3, r8
 8001e9c:	431c      	orrs	r4, r3
 8001e9e:	e5db      	b.n	8001a58 <__aeabi_dsub+0x264>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	2400      	movs	r4, #0
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e548      	b.n	800193a <__aeabi_dsub+0x146>
 8001ea8:	19dc      	adds	r4, r3, r7
 8001eaa:	42bc      	cmp	r4, r7
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	4461      	add	r1, ip
 8001eb0:	4689      	mov	r9, r1
 8001eb2:	427f      	negs	r7, r7
 8001eb4:	44b9      	add	r9, r7
 8001eb6:	e738      	b.n	8001d2a <__aeabi_dsub+0x536>
 8001eb8:	464b      	mov	r3, r9
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x6cc>
 8001ebe:	e69f      	b.n	8001c00 <__aeabi_dsub+0x40c>
 8001ec0:	e606      	b.n	8001ad0 <__aeabi_dsub+0x2dc>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	000007fe 	.word	0x000007fe
 8001ec8:	000007ff 	.word	0x000007ff
 8001ecc:	ff7fffff 	.word	0xff7fffff
 8001ed0:	08ff      	lsrs	r7, r7, #3
 8001ed2:	074b      	lsls	r3, r1, #29
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	08cc      	lsrs	r4, r1, #3
 8001ed8:	e616      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001eda:	4662      	mov	r2, ip
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	0752      	lsls	r2, r2, #29
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08d4      	lsrs	r4, r2, #3
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4214      	tst	r4, r2
 8001eec:	d007      	beq.n	8001efe <__aeabi_dsub+0x70a>
 8001eee:	08c8      	lsrs	r0, r1, #3
 8001ef0:	4210      	tst	r0, r2
 8001ef2:	d104      	bne.n	8001efe <__aeabi_dsub+0x70a>
 8001ef4:	465d      	mov	r5, fp
 8001ef6:	0004      	movs	r4, r0
 8001ef8:	08fb      	lsrs	r3, r7, #3
 8001efa:	0749      	lsls	r1, r1, #29
 8001efc:	430b      	orrs	r3, r1
 8001efe:	0f5a      	lsrs	r2, r3, #29
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	0752      	lsls	r2, r2, #29
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	e5fe      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4a01      	ldr	r2, [pc, #4]	; (8001f14 <__aeabi_dsub+0x720>)
 8001f0e:	001c      	movs	r4, r3
 8001f10:	e513      	b.n	800193a <__aeabi_dsub+0x146>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	000007ff 	.word	0x000007ff

08001f18 <__aeabi_dcmpun>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	0005      	movs	r5, r0
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <__aeabi_dcmpun+0x38>)
 8001f1e:	031c      	lsls	r4, r3, #12
 8001f20:	0016      	movs	r6, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	030a      	lsls	r2, r1, #12
 8001f26:	0049      	lsls	r1, r1, #1
 8001f28:	0b12      	lsrs	r2, r2, #12
 8001f2a:	0d49      	lsrs	r1, r1, #21
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	0d5b      	lsrs	r3, r3, #21
 8001f30:	4281      	cmp	r1, r0
 8001f32:	d008      	beq.n	8001f46 <__aeabi_dcmpun+0x2e>
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <__aeabi_dcmpun+0x38>)
 8001f36:	2000      	movs	r0, #0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d103      	bne.n	8001f44 <__aeabi_dcmpun+0x2c>
 8001f3c:	0020      	movs	r0, r4
 8001f3e:	4330      	orrs	r0, r6
 8001f40:	1e43      	subs	r3, r0, #1
 8001f42:	4198      	sbcs	r0, r3
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
 8001f46:	2001      	movs	r0, #1
 8001f48:	432a      	orrs	r2, r5
 8001f4a:	d1fb      	bne.n	8001f44 <__aeabi_dcmpun+0x2c>
 8001f4c:	e7f2      	b.n	8001f34 <__aeabi_dcmpun+0x1c>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff

08001f54 <__aeabi_d2iz>:
 8001f54:	000a      	movs	r2, r1
 8001f56:	b530      	push	{r4, r5, lr}
 8001f58:	4c13      	ldr	r4, [pc, #76]	; (8001fa8 <__aeabi_d2iz+0x54>)
 8001f5a:	0053      	lsls	r3, r2, #1
 8001f5c:	0309      	lsls	r1, r1, #12
 8001f5e:	0005      	movs	r5, r0
 8001f60:	0b09      	lsrs	r1, r1, #12
 8001f62:	2000      	movs	r0, #0
 8001f64:	0d5b      	lsrs	r3, r3, #21
 8001f66:	0fd2      	lsrs	r2, r2, #31
 8001f68:	42a3      	cmp	r3, r4
 8001f6a:	dd04      	ble.n	8001f76 <__aeabi_d2iz+0x22>
 8001f6c:	480f      	ldr	r0, [pc, #60]	; (8001fac <__aeabi_d2iz+0x58>)
 8001f6e:	4283      	cmp	r3, r0
 8001f70:	dd02      	ble.n	8001f78 <__aeabi_d2iz+0x24>
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <__aeabi_d2iz+0x5c>)
 8001f74:	18d0      	adds	r0, r2, r3
 8001f76:	bd30      	pop	{r4, r5, pc}
 8001f78:	2080      	movs	r0, #128	; 0x80
 8001f7a:	0340      	lsls	r0, r0, #13
 8001f7c:	4301      	orrs	r1, r0
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <__aeabi_d2iz+0x60>)
 8001f80:	1ac0      	subs	r0, r0, r3
 8001f82:	281f      	cmp	r0, #31
 8001f84:	dd08      	ble.n	8001f98 <__aeabi_d2iz+0x44>
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <__aeabi_d2iz+0x64>)
 8001f88:	1ac3      	subs	r3, r0, r3
 8001f8a:	40d9      	lsrs	r1, r3
 8001f8c:	000b      	movs	r3, r1
 8001f8e:	4258      	negs	r0, r3
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d1f0      	bne.n	8001f76 <__aeabi_d2iz+0x22>
 8001f94:	0018      	movs	r0, r3
 8001f96:	e7ee      	b.n	8001f76 <__aeabi_d2iz+0x22>
 8001f98:	4c08      	ldr	r4, [pc, #32]	; (8001fbc <__aeabi_d2iz+0x68>)
 8001f9a:	40c5      	lsrs	r5, r0
 8001f9c:	46a4      	mov	ip, r4
 8001f9e:	4463      	add	r3, ip
 8001fa0:	4099      	lsls	r1, r3
 8001fa2:	000b      	movs	r3, r1
 8001fa4:	432b      	orrs	r3, r5
 8001fa6:	e7f2      	b.n	8001f8e <__aeabi_d2iz+0x3a>
 8001fa8:	000003fe 	.word	0x000003fe
 8001fac:	0000041d 	.word	0x0000041d
 8001fb0:	7fffffff 	.word	0x7fffffff
 8001fb4:	00000433 	.word	0x00000433
 8001fb8:	00000413 	.word	0x00000413
 8001fbc:	fffffbed 	.word	0xfffffbed

08001fc0 <__aeabi_i2d>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d016      	beq.n	8001ff4 <__aeabi_i2d+0x34>
 8001fc6:	17c3      	asrs	r3, r0, #31
 8001fc8:	18c5      	adds	r5, r0, r3
 8001fca:	405d      	eors	r5, r3
 8001fcc:	0fc4      	lsrs	r4, r0, #31
 8001fce:	0028      	movs	r0, r5
 8001fd0:	f000 f84c 	bl	800206c <__clzsi2>
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <__aeabi_i2d+0x5c>)
 8001fd6:	1a12      	subs	r2, r2, r0
 8001fd8:	280a      	cmp	r0, #10
 8001fda:	dc16      	bgt.n	800200a <__aeabi_i2d+0x4a>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	002e      	movs	r6, r5
 8001fe0:	3315      	adds	r3, #21
 8001fe2:	409e      	lsls	r6, r3
 8001fe4:	230b      	movs	r3, #11
 8001fe6:	1a18      	subs	r0, r3, r0
 8001fe8:	40c5      	lsrs	r5, r0
 8001fea:	0552      	lsls	r2, r2, #21
 8001fec:	032d      	lsls	r5, r5, #12
 8001fee:	0b2d      	lsrs	r5, r5, #12
 8001ff0:	0d53      	lsrs	r3, r2, #21
 8001ff2:	e003      	b.n	8001ffc <__aeabi_i2d+0x3c>
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	432b      	orrs	r3, r5
 8002000:	07e4      	lsls	r4, r4, #31
 8002002:	4323      	orrs	r3, r4
 8002004:	0030      	movs	r0, r6
 8002006:	0019      	movs	r1, r3
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	380b      	subs	r0, #11
 800200c:	4085      	lsls	r5, r0
 800200e:	0552      	lsls	r2, r2, #21
 8002010:	032d      	lsls	r5, r5, #12
 8002012:	2600      	movs	r6, #0
 8002014:	0b2d      	lsrs	r5, r5, #12
 8002016:	0d53      	lsrs	r3, r2, #21
 8002018:	e7f0      	b.n	8001ffc <__aeabi_i2d+0x3c>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	0000041e 	.word	0x0000041e

08002020 <__aeabi_ui2d>:
 8002020:	b510      	push	{r4, lr}
 8002022:	1e04      	subs	r4, r0, #0
 8002024:	d010      	beq.n	8002048 <__aeabi_ui2d+0x28>
 8002026:	f000 f821 	bl	800206c <__clzsi2>
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <__aeabi_ui2d+0x48>)
 800202c:	1a1b      	subs	r3, r3, r0
 800202e:	280a      	cmp	r0, #10
 8002030:	dc11      	bgt.n	8002056 <__aeabi_ui2d+0x36>
 8002032:	220b      	movs	r2, #11
 8002034:	0021      	movs	r1, r4
 8002036:	1a12      	subs	r2, r2, r0
 8002038:	40d1      	lsrs	r1, r2
 800203a:	3015      	adds	r0, #21
 800203c:	030a      	lsls	r2, r1, #12
 800203e:	055b      	lsls	r3, r3, #21
 8002040:	4084      	lsls	r4, r0
 8002042:	0b12      	lsrs	r2, r2, #12
 8002044:	0d5b      	lsrs	r3, r3, #21
 8002046:	e001      	b.n	800204c <__aeabi_ui2d+0x2c>
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	4313      	orrs	r3, r2
 8002050:	0020      	movs	r0, r4
 8002052:	0019      	movs	r1, r3
 8002054:	bd10      	pop	{r4, pc}
 8002056:	0022      	movs	r2, r4
 8002058:	380b      	subs	r0, #11
 800205a:	4082      	lsls	r2, r0
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	0312      	lsls	r2, r2, #12
 8002060:	2400      	movs	r4, #0
 8002062:	0b12      	lsrs	r2, r2, #12
 8002064:	0d5b      	lsrs	r3, r3, #21
 8002066:	e7f1      	b.n	800204c <__aeabi_ui2d+0x2c>
 8002068:	0000041e 	.word	0x0000041e

0800206c <__clzsi2>:
 800206c:	211c      	movs	r1, #28
 800206e:	2301      	movs	r3, #1
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	4298      	cmp	r0, r3
 8002074:	d301      	bcc.n	800207a <__clzsi2+0xe>
 8002076:	0c00      	lsrs	r0, r0, #16
 8002078:	3910      	subs	r1, #16
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	4298      	cmp	r0, r3
 800207e:	d301      	bcc.n	8002084 <__clzsi2+0x18>
 8002080:	0a00      	lsrs	r0, r0, #8
 8002082:	3908      	subs	r1, #8
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	4298      	cmp	r0, r3
 8002088:	d301      	bcc.n	800208e <__clzsi2+0x22>
 800208a:	0900      	lsrs	r0, r0, #4
 800208c:	3904      	subs	r1, #4
 800208e:	a202      	add	r2, pc, #8	; (adr r2, 8002098 <__clzsi2+0x2c>)
 8002090:	5c10      	ldrb	r0, [r2, r0]
 8002092:	1840      	adds	r0, r0, r1
 8002094:	4770      	bx	lr
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	02020304 	.word	0x02020304
 800209c:	01010101 	.word	0x01010101
	...

080020a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	0018      	movs	r0, r3
 80020b2:	230c      	movs	r3, #12
 80020b4:	001a      	movs	r2, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	f008 ff7b 	bl	800afb2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020be:	4a22      	ldr	r2, [pc, #136]	; (8002148 <MX_ADC1_Init+0xa0>)
 80020c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020dc:	2204      	movs	r2, #4
 80020de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_ADC1_Init+0x9c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_ADC1_Init+0x9c>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MX_ADC1_Init+0x9c>)
 8002106:	222c      	movs	r2, #44	; 0x2c
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <MX_ADC1_Init+0x9c>)
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_ADC1_Init+0x9c>)
 8002114:	2203      	movs	r2, #3
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <MX_ADC1_Init+0x9c>)
 800211a:	2203      	movs	r2, #3
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_ADC1_Init+0x9c>)
 8002120:	223c      	movs	r2, #60	; 0x3c
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <MX_ADC1_Init+0x9c>)
 8002128:	2200      	movs	r2, #0
 800212a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <MX_ADC1_Init+0x9c>)
 800212e:	0018      	movs	r0, r3
 8002130:	f001 fe50 	bl	8003dd4 <HAL_ADC_Init>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002138:	f000 fc1f 	bl	800297a <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000280 	.word	0x20000280
 8002148:	40012400 	.word	0x40012400

0800214c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b091      	sub	sp, #68	; 0x44
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	232c      	movs	r3, #44	; 0x2c
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	0018      	movs	r0, r3
 800215a:	2314      	movs	r3, #20
 800215c:	001a      	movs	r2, r3
 800215e:	2100      	movs	r1, #0
 8002160:	f008 ff27 	bl	800afb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002164:	2414      	movs	r4, #20
 8002166:	193b      	adds	r3, r7, r4
 8002168:	0018      	movs	r0, r3
 800216a:	2318      	movs	r3, #24
 800216c:	001a      	movs	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	f008 ff1f 	bl	800afb2 <memset>
  if(adcHandle->Instance==ADC1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_ADC_MspInit+0xf4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d15c      	bne.n	8002238 <HAL_ADC_MspInit+0xec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800217e:	193b      	adds	r3, r7, r4
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	01d2      	lsls	r2, r2, #7
 8002184:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002186:	193b      	adds	r3, r7, r4
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218c:	193b      	adds	r3, r7, r4
 800218e:	0018      	movs	r0, r3
 8002190:	f004 f86a 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002198:	f000 fbef 	bl	800297a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 800219e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0349      	lsls	r1, r1, #13
 80021a6:	430a      	orrs	r2, r1
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	035b      	lsls	r3, r3, #13
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021d6:	2102      	movs	r1, #2
 80021d8:	430a      	orrs	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_ADC_MspInit+0xf8>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = CURRENT_SEN_Pin;
 80021e8:	242c      	movs	r4, #44	; 0x2c
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2203      	movs	r2, #3
 80021f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CURRENT_SEN_GPIO_Port, &GPIO_InitStruct);
 80021fc:	193a      	adds	r2, r7, r4
 80021fe:	23a0      	movs	r3, #160	; 0xa0
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f003 f9a7 	bl	8005558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTG_SEN_Pin;
 800220a:	193b      	adds	r3, r7, r4
 800220c:	2204      	movs	r2, #4
 800220e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002210:	193b      	adds	r3, r7, r4
 8002212:	2203      	movs	r2, #3
 8002214:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VOLTG_SEN_GPIO_Port, &GPIO_InitStruct);
 800221c:	193b      	adds	r3, r7, r4
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_ADC_MspInit+0xfc>)
 8002220:	0019      	movs	r1, r3
 8002222:	0010      	movs	r0, r2
 8002224:	f003 f998 	bl	8005558 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	200c      	movs	r0, #12
 800222e:	f002 ff05 	bl	800503c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002232:	200c      	movs	r0, #12
 8002234:	f002 ff17 	bl	8005066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b011      	add	sp, #68	; 0x44
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	40012400 	.word	0x40012400
 8002244:	40021000 	.word	0x40021000
 8002248:	50000400 	.word	0x50000400

0800224c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_DMA_Init+0x38>)
 8002254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_DMA_Init+0x38>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_DMA_Init+0x38>)
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2009      	movs	r0, #9
 8002270:	f002 fee4 	bl	800503c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002274:	2009      	movs	r0, #9
 8002276:	f002 fef6 	bl	8005066 <HAL_NVIC_EnableIRQ>

}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40021000 	.word	0x40021000

08002288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228e:	240c      	movs	r4, #12
 8002290:	193b      	adds	r3, r7, r4
 8002292:	0018      	movs	r0, r3
 8002294:	2314      	movs	r3, #20
 8002296:	001a      	movs	r2, r3
 8002298:	2100      	movs	r1, #0
 800229a:	f008 fe8a 	bl	800afb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2201      	movs	r2, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b32      	ldr	r3, [pc, #200]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022bc:	2102      	movs	r1, #2
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <MX_GPIO_Init+0xfc>)
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin|GATE_PWR_ENA_Pin, GPIO_PIN_RESET);
 80022ce:	2384      	movs	r3, #132	; 0x84
 80022d0:	0099      	lsls	r1, r3, #2
 80022d2:	23a0      	movs	r3, #160	; 0xa0
 80022d4:	05db      	lsls	r3, r3, #23
 80022d6:	2200      	movs	r2, #0
 80022d8:	0018      	movs	r0, r3
 80022da:	f003 faa1 	bl	8005820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <MX_GPIO_Init+0x100>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	2101      	movs	r1, #1
 80022e4:	0018      	movs	r0, r3
 80022e6:	f003 fa9b 	bl	8005820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STAT_LED_Pin|GATE_PWR_ENA_Pin;
 80022ea:	193b      	adds	r3, r7, r4
 80022ec:	2284      	movs	r2, #132	; 0x84
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	2201      	movs	r2, #1
 80022f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	193a      	adds	r2, r7, r4
 8002306:	23a0      	movs	r3, #160	; 0xa0
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f003 f923 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002312:	193b      	adds	r3, r7, r4
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	193b      	adds	r3, r7, r4
 800231a:	2201      	movs	r2, #1
 800231c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	193b      	adds	r3, r7, r4
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	193b      	adds	r3, r7, r4
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800232a:	193b      	adds	r3, r7, r4
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <MX_GPIO_Init+0x100>)
 800232e:	0019      	movs	r1, r3
 8002330:	0010      	movs	r0, r2
 8002332:	f003 f911 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_CFG_Pin;
 8002336:	193b      	adds	r3, r7, r4
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	0212      	lsls	r2, r2, #8
 800233c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RESET_CFG_GPIO_Port, &GPIO_InitStruct);
 800234a:	193a      	adds	r2, r7, r4
 800234c:	23a0      	movs	r3, #160	; 0xa0
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f003 f900 	bl	8005558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_Z_Pin;
 8002358:	0021      	movs	r1, r4
 800235a:	187b      	adds	r3, r7, r1
 800235c:	22e0      	movs	r2, #224	; 0xe0
 800235e:	0052      	lsls	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2288      	movs	r2, #136	; 0x88
 8002366:	0352      	lsls	r2, r2, #13
 8002368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	187b      	adds	r3, r7, r1
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <MX_GPIO_Init+0x100>)
 8002374:	0019      	movs	r1, r3
 8002376:	0010      	movs	r0, r2
 8002378:	f003 f8ee 	bl	8005558 <HAL_GPIO_Init>

}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b009      	add	sp, #36	; 0x24
 8002382:	bd90      	pop	{r4, r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	50000400 	.word	0x50000400

0800238c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002394:	2301      	movs	r3, #1
 8002396:	425b      	negs	r3, r3
 8002398:	1d39      	adds	r1, r7, #4
 800239a:	4804      	ldr	r0, [pc, #16]	; (80023ac <__io_putchar+0x20>)
 800239c:	2201      	movs	r2, #1
 800239e:	f005 ff65 	bl	800826c <HAL_UART_Transmit>
  return ch;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000508 	.word	0x20000508

080023b0 <HAL_TIM_PeriodElapsedCallback>:
volatile int adcSwitch = 1;

#include "../../DC_Motor/DC_Motor.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM17)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12c      	bne.n	800241c <HAL_TIM_PeriodElapsedCallback+0x6c>
    {
        adcSwitch = !adcSwitch;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	425a      	negs	r2, r3
 80023c8:	4153      	adcs	r3, r2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	001a      	movs	r2, r3
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023d0:	601a      	str	r2, [r3, #0]
        if (adcSwitch == 1)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d110      	bne.n	80023fc <HAL_TIM_PeriodElapsedCallback+0x4c>
        {
            rawVoltage = HAL_ADC_GetValue(&sensor_adc);
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f001 ffbf 	bl	8004360 <HAL_ADC_GetValue>
 80023e2:	0003      	movs	r3, r0
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023e8:	801a      	strh	r2, [r3, #0]
            HAL_ADC_Stop(&sensor_adc);
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023ec:	0018      	movs	r0, r3
 80023ee:	f001 fee7 	bl	80041c0 <HAL_ADC_Stop>
            DCMotor_GetSensor(0, 100);
 80023f2:	2164      	movs	r1, #100	; 0x64
 80023f4:	2000      	movs	r0, #0
 80023f6:	f001 f9e9 	bl	80037cc <DCMotor_GetSensor>
            rawCurrent = HAL_ADC_GetValue(&sensor_adc);
            HAL_ADC_Stop(&sensor_adc);
            DCMotor_GetSensor(1, 100);
        }
    }
}
 80023fa:	e00f      	b.n	800241c <HAL_TIM_PeriodElapsedCallback+0x6c>
            rawCurrent = HAL_ADC_GetValue(&sensor_adc);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f001 ffae 	bl	8004360 <HAL_ADC_GetValue>
 8002404:	0003      	movs	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800240a:	801a      	strh	r2, [r3, #0]
            HAL_ADC_Stop(&sensor_adc);
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800240e:	0018      	movs	r0, r3
 8002410:	f001 fed6 	bl	80041c0 <HAL_ADC_Stop>
            DCMotor_GetSensor(1, 100);
 8002414:	2164      	movs	r1, #100	; 0x64
 8002416:	2001      	movs	r0, #1
 8002418:	f001 f9d8 	bl	80037cc <DCMotor_GetSensor>
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40014800 	.word	0x40014800
 8002428:	20000004 	.word	0x20000004
 800242c:	20000280 	.word	0x20000280
 8002430:	20000312 	.word	0x20000312
 8002434:	20000310 	.word	0x20000310

08002438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243e:	f001 faa9 	bl	8003994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002442:	f000 f843 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002446:	f7ff ff1f 	bl	8002288 <MX_GPIO_Init>
  MX_ADC1_Init();
 800244a:	f7ff fe2d 	bl	80020a8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800244e:	f000 fa9d 	bl	800298c <MX_SPI1_Init>
  MX_DMA_Init();
 8002452:	f7ff fefb 	bl	800224c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002456:	f000 ff0b 	bl	8003270 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 800245a:	f000 fd53 	bl	8002f04 <MX_TIM14_Init>
  MX_TIM16_Init();
 800245e:	f000 fd77 	bl	8002f50 <MX_TIM16_Init>
  MX_TIM3_Init();
 8002462:	f000 fcbd 	bl	8002de0 <MX_TIM3_Init>
  MX_TIM17_Init();
 8002466:	f000 fdf5 	bl	8003054 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

    // printf("hello\r\n");
    HAL_ADCEx_Calibration_Start(&hadc1);
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <main+0x8c>)
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fc31 	bl	8004cd4 <HAL_ADCEx_Calibration_Start>
    W25qxx_Init();
 8002472:	f008 fc6f 	bl	800ad54 <W25qxx_Init>

    HAL_GPIO_WritePin(GATE_PWR_ENA_GPIO_Port, GATE_PWR_ENA_Pin, 1);
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	0099      	lsls	r1, r3, #2
 800247a:	23a0      	movs	r3, #160	; 0xa0
 800247c:	05db      	lsls	r3, r3, #23
 800247e:	2201      	movs	r2, #1
 8002480:	0018      	movs	r0, r3
 8002482:	f003 f9cd 	bl	8005820 <HAL_GPIO_WritePin>

    DCMotor_Init();
 8002486:	f000 ffcd 	bl	8003424 <DCMotor_Init>
    // printf("i max: %ld\r\n", i_max);
    // HAL_Delay(2000);

    // MedianFilter_In(motor.current_filter, HAL_ADC_GetValue(&sensor_adc));

    for (size_t i = 0; i < REG_HOLDING_NREGS; i++) usRegHoldingBuf[i] = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	e007      	b.n	80024a0 <main+0x68>
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <main+0x90>)
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	0052      	lsls	r2, r2, #1
 8002496:	2100      	movs	r1, #0
 8002498:	52d1      	strh	r1, [r2, r3]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3301      	adds	r3, #1
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b15      	cmp	r3, #21
 80024a4:	d9f4      	bls.n	8002490 <main+0x58>
    eMBInit(MB_RTU, 2, 3, 9600, MB_PAR_NONE);
 80024a6:	2396      	movs	r3, #150	; 0x96
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	2200      	movs	r2, #0
 80024ac:	9200      	str	r2, [sp, #0]
 80024ae:	2203      	movs	r2, #3
 80024b0:	2102      	movs	r1, #2
 80024b2:	2000      	movs	r0, #0
 80024b4:	f007 f8c4 	bl	8009640 <eMBInit>
    eMBEnable();
 80024b8:	f007 f95a 	bl	8009770 <eMBEnable>
        // }

        // // printf("\r\n");
        // HAL_Delay(100);

        eMBPoll();
 80024bc:	f007 f976 	bl	80097ac <eMBPoll>
 80024c0:	e7fc      	b.n	80024bc <main+0x84>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	20000280 	.word	0x20000280
 80024c8:	200002e4 	.word	0x200002e4

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b093      	sub	sp, #76	; 0x4c
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	2414      	movs	r4, #20
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	0018      	movs	r0, r3
 80024d8:	2334      	movs	r3, #52	; 0x34
 80024da:	001a      	movs	r2, r3
 80024dc:	2100      	movs	r1, #0
 80024de:	f008 fd68 	bl	800afb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2310      	movs	r3, #16
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f008 fd61 	bl	800afb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f003 f9b1 	bl	800585c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	2202      	movs	r2, #2
 80024fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002500:	193b      	adds	r3, r7, r4
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	0052      	lsls	r2, r2, #1
 8002506:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002508:	0021      	movs	r1, r4
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2202      	movs	r2, #2
 800251a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2202      	movs	r2, #2
 8002520:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2208      	movs	r2, #8
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	0292      	lsls	r2, r2, #10
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	0592      	lsls	r2, r2, #22
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253e:	187b      	adds	r3, r7, r1
 8002540:	0018      	movs	r0, r3
 8002542:	f003 f9d7 	bl	80058f4 <HAL_RCC_OscConfig>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800254a:	f000 fa16 	bl	800297a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2202      	movs	r2, #2
 8002558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2102      	movs	r1, #2
 800256a:	0018      	movs	r0, r3
 800256c:	f003 fcd2 	bl	8005f14 <HAL_RCC_ClockConfig>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002574:	f000 fa01 	bl	800297a <Error_Handler>
  }
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b013      	add	sp, #76	; 0x4c
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <fetchHoldingRegsData>:
 *
 *@param iRegIndex 
 *@return uint8_t 
 */
uint8_t fetchHoldingRegsData(int iRegIndex)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    uint8_t numUs = 1;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    switch (iRegIndex)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b0b      	cmp	r3, #11
 8002594:	d834      	bhi.n	8002600 <fetchHoldingRegsData+0x80>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	009a      	lsls	r2, r3, #2
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <fetchHoldingRegsData+0x9c>)
 800259c:	18d3      	adds	r3, r2, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	469f      	mov	pc, r3
        case HREG_DCMOTOR_RUN:
            break;
        case HREG_DCMOTOR_DIRECTION:
            break;
        case HREG_DCMOTOR_SPEED:
            usRegHoldingBuf[HREG_DCMOTOR_SPEED] = DCMotor_GetSpeed();
 80025a2:	f001 f9e3 	bl	800396c <DCMotor_GetSpeed>
 80025a6:	0003      	movs	r3, r0
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <fetchHoldingRegsData+0xa0>)
 80025ac:	809a      	strh	r2, [r3, #4]
            break;
 80025ae:	e02d      	b.n	800260c <fetchHoldingRegsData+0x8c>
        case HREG_DCMOTOR_ACCELERATION:
            usRegHoldingBuf[HREG_DCMOTOR_ACCELERATION] = DCMotor_GetAcceleration();
 80025b0:	f001 f9e6 	bl	8003980 <DCMotor_GetAcceleration>
 80025b4:	0003      	movs	r3, r0
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <fetchHoldingRegsData+0xa0>)
 80025ba:	80da      	strh	r2, [r3, #6]
            break;
 80025bc:	e026      	b.n	800260c <fetchHoldingRegsData+0x8c>
        case HREG_DCMOTOR_SET_LIMIT_VOLTAGE:
            break;
        case HREG_DCMOTOR_SET_LIMIT_CURRENT:
            break;
        case HREG_DCMOTOR_GET_VOLTAGE:
            usRegHoldingBuf[HREG_DCMOTOR_GET_VOLTAGE] = DCMotor_GetVoltageValue();
 80025be:	f001 f989 	bl	80038d4 <DCMotor_GetVoltageValue>
 80025c2:	0003      	movs	r3, r0
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <fetchHoldingRegsData+0xa0>)
 80025c8:	819a      	strh	r2, [r3, #12]
            break;
 80025ca:	e01f      	b.n	800260c <fetchHoldingRegsData+0x8c>
        case HREG_DCMOTOR_GET_CURRENT:
            MedianFilter_In(motor.current_filter, DCMotor_GetCurrentValue());
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <fetchHoldingRegsData+0xa4>)
 80025ce:	691c      	ldr	r4, [r3, #16]
 80025d0:	f001 f93e 	bl	8003850 <DCMotor_GetCurrentValue>
 80025d4:	0003      	movs	r3, r0
 80025d6:	0019      	movs	r1, r3
 80025d8:	0020      	movs	r0, r4
 80025da:	f006 ff10 	bl	80093fe <MedianFilter_In>
            usRegHoldingBuf[HREG_DCMOTOR_GET_CURRENT] = MedianFilter_Out(motor.current_filter);
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <fetchHoldingRegsData+0xa4>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f007 f818 	bl	8009618 <MedianFilter_Out>
 80025e8:	0003      	movs	r3, r0
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <fetchHoldingRegsData+0xa0>)
 80025ee:	81da      	strh	r2, [r3, #14]
            break;
 80025f0:	e00c      	b.n	800260c <fetchHoldingRegsData+0x8c>
        case HREG_DCMOTOR_GET_RESISTANCE:
            usRegHoldingBuf[HREG_DCMOTOR_GET_RESISTANCE] = DCMotor_GetResistanceValue();
 80025f2:	f001 f9a7 	bl	8003944 <DCMotor_GetResistanceValue>
 80025f6:	0003      	movs	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <fetchHoldingRegsData+0xa0>)
 80025fc:	821a      	strh	r2, [r3, #16]
            break;
 80025fe:	e005      	b.n	800260c <fetchHoldingRegsData+0x8c>
        case HREG_MODBUS_ADDRESS:
            break;
        case HREG_MODBUS_BAUDRATE:
            break;
        default:
            numUs = 0;
 8002600:	230f      	movs	r3, #15
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
            break;
 8002608:	e000      	b.n	800260c <fetchHoldingRegsData+0x8c>
            break;
 800260a:	46c0      	nop			; (mov r8, r8)
    }
    return numUs;
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b005      	add	sp, #20
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	0800dc50 	.word	0x0800dc50
 8002620:	200002e4 	.word	0x200002e4
 8002624:	20000598 	.word	0x20000598

08002628 <validateWriteHoldingRegs>:
 *@param iRegIndex 
 *@param usNRegs 
 *@return result
 */
uint8_t validateWriteHoldingRegs(int iRegIndex, uint16_t usNRegs)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	000a      	movs	r2, r1
 8002632:	1cbb      	adds	r3, r7, #2
 8002634:	801a      	strh	r2, [r3, #0]
    uint8_t result = 1;
 8002636:	230b      	movs	r3, #11
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < usNRegs; ++i)
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e014      	b.n	800266e <validateWriteHoldingRegs+0x46>
    {
        switch (iRegIndex + i)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	18d3      	adds	r3, r2, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d804      	bhi.n	8002658 <validateWriteHoldingRegs+0x30>
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <validateWriteHoldingRegs+0x60>)
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	469f      	mov	pc, r3
            case HREG_DCMOTOR_SET_LIMIT_VOLTAGE:
                break;
            case HREG_DCMOTOR_SET_LIMIT_CURRENT:
                break;
            default:
                if (i == 0) return 0;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <validateWriteHoldingRegs+0x3e>
 800265e:	2300      	movs	r3, #0
 8002660:	e00d      	b.n	800267e <validateWriteHoldingRegs+0x56>
                break;
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	e000      	b.n	8002668 <validateWriteHoldingRegs+0x40>
                break;
 8002666:	46c0      	nop			; (mov r8, r8)
    for (size_t i = 0; i < usNRegs; ++i)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3301      	adds	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	1cbb      	adds	r3, r7, #2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d3e5      	bcc.n	8002644 <validateWriteHoldingRegs+0x1c>
        }
    }
    return result;
 8002678:	230b      	movs	r3, #11
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	0800dc80 	.word	0x0800dc80

0800268c <writeHoldingRegs>:
 *
 *@param iRegIndex 
 *@param tempReg
 */
void writeHoldingRegs(int iRegIndex, uint16_t tempReg)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	000a      	movs	r2, r1
 8002696:	1cbb      	adds	r3, r7, #2
 8002698:	801a      	strh	r2, [r3, #0]
    switch (iRegIndex)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d858      	bhi.n	8002752 <writeHoldingRegs+0xc6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <writeHoldingRegs+0xe4>)
 80026a6:	18d3      	adds	r3, r2, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	469f      	mov	pc, r3
    {
        case HREG_DCMOTOR_RUN:
            if (tempReg > 1) break;
 80026ac:	1cbb      	adds	r3, r7, #2
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d850      	bhi.n	8002756 <writeHoldingRegs+0xca>
            usRegHoldingBuf[HREG_DCMOTOR_RUN] = tempReg;
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <writeHoldingRegs+0xe8>)
 80026b6:	1cba      	adds	r2, r7, #2
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	801a      	strh	r2, [r3, #0]
            if (usRegHoldingBuf[HREG_DCMOTOR_RUN] == 1) DCMotor_Run();
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <writeHoldingRegs+0xe8>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <writeHoldingRegs+0x3e>
 80026c4:	f000 ffc2 	bl	800364c <DCMotor_Run>
            else
            {
                DCMotor_Stop();
                DCMotor_Reset();
            }
            break;
 80026c8:	e04e      	b.n	8002768 <writeHoldingRegs+0xdc>
                DCMotor_Stop();
 80026ca:	f000 ffe1 	bl	8003690 <DCMotor_Stop>
                DCMotor_Reset();
 80026ce:	f001 f865 	bl	800379c <DCMotor_Reset>
            break;
 80026d2:	e049      	b.n	8002768 <writeHoldingRegs+0xdc>
        case HREG_DCMOTOR_DIRECTION:
            if (tempReg > 1) break;
 80026d4:	1cbb      	adds	r3, r7, #2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d83e      	bhi.n	800275a <writeHoldingRegs+0xce>
            usRegHoldingBuf[HREG_DCMOTOR_DIRECTION] = tempReg;
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <writeHoldingRegs+0xe8>)
 80026de:	1cba      	adds	r2, r7, #2
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	805a      	strh	r2, [r3, #2]
            DCMotor_Stop();
 80026e4:	f000 ffd4 	bl	8003690 <DCMotor_Stop>
            DCMotor_SetDirection(tempReg);
 80026e8:	1cbb      	adds	r3, r7, #2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 fef8 	bl	80034e4 <DCMotor_SetDirection>
            if (usRegHoldingBuf[HREG_DCMOTOR_RUN] == 1) DCMotor_Run();
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <writeHoldingRegs+0xe8>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d130      	bne.n	800275e <writeHoldingRegs+0xd2>
 80026fc:	f000 ffa6 	bl	800364c <DCMotor_Run>
            break;
 8002700:	e02d      	b.n	800275e <writeHoldingRegs+0xd2>
        case HREG_DCMOTOR_SPEED:
            if (tempReg > 100) break;
 8002702:	1cbb      	adds	r3, r7, #2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d82b      	bhi.n	8002762 <writeHoldingRegs+0xd6>
            usRegHoldingBuf[HREG_DCMOTOR_SPEED] = tempReg;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <writeHoldingRegs+0xe8>)
 800270c:	1cba      	adds	r2, r7, #2
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	809a      	strh	r2, [r3, #4]
            DCMotor_SetSpeed(tempReg);
 8002712:	1cbb      	adds	r3, r7, #2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fec6 	bl	80034a8 <DCMotor_SetSpeed>
            if (usRegHoldingBuf[HREG_DCMOTOR_RUN] == 1) DCMotor_Run();
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <writeHoldingRegs+0xe8>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d120      	bne.n	8002766 <writeHoldingRegs+0xda>
 8002724:	f000 ff92 	bl	800364c <DCMotor_Run>
            break;
 8002728:	e01d      	b.n	8002766 <writeHoldingRegs+0xda>
        case HREG_DCMOTOR_ACCELERATION:
            usRegHoldingBuf[HREG_DCMOTOR_ACCELERATION] = tempReg;
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <writeHoldingRegs+0xe8>)
 800272c:	1cba      	adds	r2, r7, #2
 800272e:	8812      	ldrh	r2, [r2, #0]
 8002730:	80da      	strh	r2, [r3, #6]
            DCMotor_SetAcceleration(tempReg);
 8002732:	1cbb      	adds	r3, r7, #2
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fea8 	bl	800348c <DCMotor_SetAcceleration>
            break;
 800273c:	e014      	b.n	8002768 <writeHoldingRegs+0xdc>
        case HREG_DCMOTOR_SET_LIMIT_VOLTAGE:
            usRegHoldingBuf[HREG_DCMOTOR_SET_LIMIT_VOLTAGE] = tempReg;
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <writeHoldingRegs+0xe8>)
 8002740:	1cba      	adds	r2, r7, #2
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	811a      	strh	r2, [r3, #8]
            break;
 8002746:	e00f      	b.n	8002768 <writeHoldingRegs+0xdc>
        case HREG_DCMOTOR_SET_LIMIT_CURRENT:
            usRegHoldingBuf[HREG_DCMOTOR_SET_LIMIT_CURRENT] = tempReg;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <writeHoldingRegs+0xe8>)
 800274a:	1cba      	adds	r2, r7, #2
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	815a      	strh	r2, [r3, #10]
            break;
 8002750:	e00a      	b.n	8002768 <writeHoldingRegs+0xdc>
        //    	writeDeviceAddress(itoa(usRegHoldingBuf[HREG_NEW_MODBUS_ADDRESS], value, 10));
        //     break;
        
        default:
           	// usRegHoldingBuf[iRegIndex] = tempReg;
            break;
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	e008      	b.n	8002768 <writeHoldingRegs+0xdc>
            if (tempReg > 1) break;
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	e006      	b.n	8002768 <writeHoldingRegs+0xdc>
            if (tempReg > 1) break;
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	e004      	b.n	8002768 <writeHoldingRegs+0xdc>
            break;
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	e002      	b.n	8002768 <writeHoldingRegs+0xdc>
            if (tempReg > 100) break;
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	e000      	b.n	8002768 <writeHoldingRegs+0xdc>
            break;
 8002766:	46c0      	nop			; (mov r8, r8)
    }
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}
 8002770:	0800dc98 	.word	0x0800dc98
 8002774:	200002e4 	.word	0x200002e4

08002778 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	000c      	movs	r4, r1
 8002782:	0010      	movs	r0, r2
 8002784:	0019      	movs	r1, r3
 8002786:	250a      	movs	r5, #10
 8002788:	197b      	adds	r3, r7, r5
 800278a:	1c22      	adds	r2, r4, #0
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	2408      	movs	r4, #8
 8002790:	193b      	adds	r3, r7, r4
 8002792:	1c02      	adds	r2, r0, #0
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	1c0a      	adds	r2, r1, #0
 800279a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode eStatus = MB_ENOERR;
 800279c:	231f      	movs	r3, #31
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    int iRegIndex;

    if (eMode == MB_REG_READ)
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d159      	bne.n	8002860 <eMBRegHoldingCB+0xe8>
    {
        if ((usAddress >= REG_HOLDING_START) &&
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d051      	beq.n	8002858 <eMBRegHoldingCB+0xe0>
            (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80027b4:	197b      	adds	r3, r7, r5
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	18d3      	adds	r3, r2, r3
        if ((usAddress >= REG_HOLDING_START) &&
 80027be:	2b17      	cmp	r3, #23
 80027c0:	dc4a      	bgt.n	8002858 <eMBRegHoldingCB+0xe0>
        {
            iRegIndex = (int)(usAddress - usRegHoldingStart);
 80027c2:	197b      	adds	r3, r7, r5
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <eMBRegHoldingCB+0x188>)
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
            while (usNRegs > 0)
 80027ce:	e03d      	b.n	800284c <eMBRegHoldingCB+0xd4>
            {
                uint8_t numUs = fetchHoldingRegsData(iRegIndex);
 80027d0:	2513      	movs	r5, #19
 80027d2:	197c      	adds	r4, r7, r5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff fed2 	bl	8002580 <fetchHoldingRegsData>
 80027dc:	0003      	movs	r3, r0
 80027de:	7023      	strb	r3, [r4, #0]
                if (numUs < 1)
 80027e0:	197b      	adds	r3, r7, r5
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <eMBRegHoldingCB+0x74>
                {
                    return MB_ENORES;
 80027e8:	2304      	movs	r3, #4
 80027ea:	e084      	b.n	80028f6 <eMBRegHoldingCB+0x17e>
                }

                for (size_t i = 0; i < numUs; ++i)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e026      	b.n	8002840 <eMBRegHoldingCB+0xc8>
                {
                    if (usNRegs > 0)
 80027f2:	2008      	movs	r0, #8
 80027f4:	183b      	adds	r3, r7, r0
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <eMBRegHoldingCB+0xbe>
                    {
                        *pucRegBuffer++ = (unsigned char)(usRegHoldingBuf[iRegIndex] >> 8);
 80027fc:	4b41      	ldr	r3, [pc, #260]	; (8002904 <eMBRegHoldingCB+0x18c>)
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	0052      	lsls	r2, r2, #1
 8002802:	5ad3      	ldrh	r3, [r2, r3]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b299      	uxth	r1, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60fa      	str	r2, [r7, #12]
 800280e:	b2ca      	uxtb	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
                        *pucRegBuffer++ = (unsigned char)(usRegHoldingBuf[iRegIndex] &0xFF);
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <eMBRegHoldingCB+0x18c>)
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	0052      	lsls	r2, r2, #1
 8002818:	5ad1      	ldrh	r1, [r2, r3]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60fa      	str	r2, [r7, #12]
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
                        iRegIndex++;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3301      	adds	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
                        usNRegs--;
 800282a:	183b      	adds	r3, r7, r0
 800282c:	881a      	ldrh	r2, [r3, #0]
 800282e:	183b      	adds	r3, r7, r0
 8002830:	3a01      	subs	r2, #1
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e001      	b.n	800283a <eMBRegHoldingCB+0xc2>
                    }
                    else
                    {
                        return MB_ENORES;
 8002836:	2304      	movs	r3, #4
 8002838:	e05d      	b.n	80028f6 <eMBRegHoldingCB+0x17e>
                for (size_t i = 0; i < numUs; ++i)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	2313      	movs	r3, #19
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	429a      	cmp	r2, r3
 800284a:	d3d2      	bcc.n	80027f2 <eMBRegHoldingCB+0x7a>
            while (usNRegs > 0)
 800284c:	2308      	movs	r3, #8
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1bc      	bne.n	80027d0 <eMBRegHoldingCB+0x58>
        if ((usAddress >= REG_HOLDING_START) &&
 8002856:	e003      	b.n	8002860 <eMBRegHoldingCB+0xe8>
                }
            }
        }
        else
        {
            eStatus = MB_ENOREG;
 8002858:	231f      	movs	r3, #31
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (eMode == MB_REG_WRITE)
 8002860:	1dfb      	adds	r3, r7, #7
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d143      	bne.n	80028f0 <eMBRegHoldingCB+0x178>
    {
        if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8002868:	210a      	movs	r1, #10
 800286a:	187b      	adds	r3, r7, r1
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03a      	beq.n	80028e8 <eMBRegHoldingCB+0x170>
 8002872:	187b      	adds	r3, r7, r1
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	2008      	movs	r0, #8
 8002878:	183b      	adds	r3, r7, r0
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	2b17      	cmp	r3, #23
 8002880:	dc32      	bgt.n	80028e8 <eMBRegHoldingCB+0x170>
        {
            iRegIndex = (int)(usAddress - usRegHoldingStart);
 8002882:	187b      	adds	r3, r7, r1
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <eMBRegHoldingCB+0x188>)
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
            if (validateWriteHoldingRegs(iRegIndex, usNRegs) == 0)
 800288e:	183b      	adds	r3, r7, r0
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	0011      	movs	r1, r2
 8002896:	0018      	movs	r0, r3
 8002898:	f7ff fec6 	bl	8002628 <validateWriteHoldingRegs>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d11d      	bne.n	80028dc <eMBRegHoldingCB+0x164>
                return MB_EINVAL;	// bad request
 80028a0:	2302      	movs	r3, #2
 80028a2:	e028      	b.n	80028f6 <eMBRegHoldingCB+0x17e>

            while (usNRegs > 0)
            {
                writeHoldingRegs(iRegIndex, (USHORT)(((unsigned int) *pucRegBuffer << 8) | ((unsigned int) *(pucRegBuffer + 1))));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3301      	adds	r3, #1
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f7ff fee4 	bl	800268c <writeHoldingRegs>
                pucRegBuffer += 2;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3302      	adds	r3, #2
 80028c8:	60fb      	str	r3, [r7, #12]
                usNRegs--;
 80028ca:	2108      	movs	r1, #8
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	3a01      	subs	r2, #1
 80028d4:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3301      	adds	r3, #1
 80028da:	61bb      	str	r3, [r7, #24]
            while (usNRegs > 0)
 80028dc:	2308      	movs	r3, #8
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1de      	bne.n	80028a4 <eMBRegHoldingCB+0x12c>
        if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80028e6:	e003      	b.n	80028f0 <eMBRegHoldingCB+0x178>
            }
        }
        else eStatus = MB_ENOREG;
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 80028f0:	231f      	movs	r3, #31
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b008      	add	sp, #32
 80028fc:	bdb0      	pop	{r4, r5, r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000000 	.word	0x20000000
 8002904:	200002e4 	.word	0x200002e4

08002908 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	0008      	movs	r0, r1
 8002912:	0011      	movs	r1, r2
 8002914:	1cbb      	adds	r3, r7, #2
 8002916:	1c02      	adds	r2, r0, #0
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	003b      	movs	r3, r7
 800291c:	1c0a      	adds	r2, r1, #0
 800291e:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8002920:	2301      	movs	r3, #1
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}

0800292a <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 800292a:	b590      	push	{r4, r7, lr}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	000c      	movs	r4, r1
 8002934:	0010      	movs	r0, r2
 8002936:	0019      	movs	r1, r3
 8002938:	230a      	movs	r3, #10
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	1c22      	adds	r2, r4, #0
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	2308      	movs	r3, #8
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	1c02      	adds	r2, r0, #0
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	1c0a      	adds	r2, r1, #0
 800294c:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 800294e:	2301      	movs	r3, #1
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b005      	add	sp, #20
 8002956:	bd90      	pop	{r4, r7, pc}

08002958 <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	0008      	movs	r0, r1
 8002962:	0011      	movs	r1, r2
 8002964:	1cbb      	adds	r3, r7, #2
 8002966:	1c02      	adds	r2, r0, #0
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	003b      	movs	r3, r7
 800296c:	1c0a      	adds	r2, r1, #0
 800296e:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8002970:	2301      	movs	r3, #1
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}

0800297a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800297e:	b672      	cpsid	i
}
 8002980:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /*User can add his own implementation to report the HAL error return state */
    __disable_irq();
    HAL_NVIC_SystemReset();
 8002982:	f002 fb80 	bl	8005086 <HAL_NVIC_SystemReset>
  /* USER CODE END Error_Handler_Debug */
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_SPI1_Init+0x74>)
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <MX_SPI1_Init+0x78>)
 8002994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_SPI1_Init+0x74>)
 8002998:	2282      	movs	r2, #130	; 0x82
 800299a:	0052      	lsls	r2, r2, #1
 800299c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029a6:	22e0      	movs	r2, #224	; 0xe0
 80029a8:	00d2      	lsls	r2, r2, #3
 80029aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029c2:	2218      	movs	r2, #24
 80029c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029da:	2207      	movs	r2, #7
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029e6:	2208      	movs	r2, #8
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <MX_SPI1_Init+0x74>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f003 fd61 	bl	80064b4 <HAL_SPI_Init>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d001      	beq.n	80029fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029f6:	f7ff ffc0 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000314 	.word	0x20000314
 8002a04:	40013000 	.word	0x40013000

08002a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b08b      	sub	sp, #44	; 0x2c
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	2414      	movs	r4, #20
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0018      	movs	r0, r3
 8002a16:	2314      	movs	r3, #20
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f008 fac9 	bl	800afb2 <memset>
  if(spiHandle->Instance==SPI1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_SPI_MspInit+0x8c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d130      	bne.n	8002a8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0149      	lsls	r1, r1, #5
 8002a34:	430a      	orrs	r2, r1
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	015b      	lsls	r3, r3, #5
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_SPI_MspInit+0x90>)
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a5e:	0021      	movs	r1, r4
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	22e0      	movs	r2, #224	; 0xe0
 8002a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2202      	movs	r2, #2
 8002a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	187a      	adds	r2, r7, r1
 8002a80:	23a0      	movs	r3, #160	; 0xa0
 8002a82:	05db      	lsls	r3, r3, #23
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 fd66 	bl	8005558 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b00b      	add	sp, #44	; 0x2c
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	40013000 	.word	0x40013000
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_MspInit+0x44>)
 8002aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_MspInit+0x44>)
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_MspInit+0x44>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_MspInit+0x44>)
 8002abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_MspInit+0x44>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0549      	lsls	r1, r1, #21
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_MspInit+0x44>)
 8002aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <NMI_Handler+0x4>

08002aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <HardFault_Handler+0x4>

08002af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b08:	f000 ffae 	bl	8003a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1);
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <DMA1_Channel1_IRQHandler+0x14>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f002 fc1a 	bl	8005354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	200004ac 	.word	0x200004ac

08002b2c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <ADC1_IRQHandler+0x14>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f001 fc20 	bl	8004378 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000280 	.word	0x20000280

08002b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <TIM3_IRQHandler+0x14>)
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f004 fb1e 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	2000037c 	.word	0x2000037c

08002b5c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim14, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim14, TIM_IT_UPDATE) !=RESET) {
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <TIM14_IRQHandler+0x54>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d118      	bne.n	8002ba0 <TIM14_IRQHandler+0x44>
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <TIM14_IRQHandler+0x54>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d111      	bne.n	8002ba0 <TIM14_IRQHandler+0x44>
    __HAL_TIM_CLEAR_IT(&htim14, TIM_IT_UPDATE);
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <TIM14_IRQHandler+0x54>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4252      	negs	r2, r2
 8002b84:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <TIM14_IRQHandler+0x58>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <TIM14_IRQHandler+0x58>)
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <TIM14_IRQHandler+0x58>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <TIM14_IRQHandler+0x44>
      pxMBPortCBTimerExpired();
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <TIM14_IRQHandler+0x5c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4798      	blx	r3
  }

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <TIM14_IRQHandler+0x54>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f004 faf2 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	200003c8 	.word	0x200003c8
 8002bb4:	20000718 	.word	0x20000718
 8002bb8:	200005d8 	.word	0x200005d8

08002bbc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <TIM17_IRQHandler+0x14>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f004 fae2 	bl	800718c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	20000460 	.word	0x20000460

08002bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2220      	movs	r2, #32
 8002be2:	4013      	ands	r3, r2
 8002be4:	3b20      	subs	r3, #32
 8002be6:	425a      	negs	r2, r3
 8002be8:	4153      	adcs	r3, r2
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	607b      	str	r3, [r7, #4]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	4193      	sbcs	r3, r2
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	603b      	str	r3, [r7, #0]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <USART2_IRQHandler+0x48>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <USART2_IRQHandler+0x48>
    pxMBFrameCBByteReceived();
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <USART2_IRQHandler+0x7c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	621a      	str	r2, [r3, #32]
    return;
 8002c1a:	e014      	b.n	8002c46 <USART2_IRQHandler+0x72>
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d109      	bne.n	8002c3e <USART2_IRQHandler+0x6a>
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	4013      	ands	r3, r2
 8002c34:	d003      	beq.n	8002c3e <USART2_IRQHandler+0x6a>
    pxMBFrameCBTransmitterEmpty();    
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <USART2_IRQHandler+0x80>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4798      	blx	r3
    return;
 8002c3c:	e003      	b.n	8002c46 <USART2_IRQHandler+0x72>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c3e:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <USART2_IRQHandler+0x78>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f005 fbbf 	bl	80083c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000508 	.word	0x20000508
 8002c50:	200005d0 	.word	0x200005d0
 8002c54:	200005d4 	.word	0x200005d4

08002c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	return 1;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_kill>:

int _kill(int pid, int sig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c6e:	f008 f953 	bl	800af18 <__errno>
 8002c72:	0003      	movs	r3, r0
 8002c74:	2216      	movs	r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
	return -1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	425b      	negs	r3, r3
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_exit>:

void _exit (int status)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425a      	negs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ffe5 	bl	8002c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c9a:	e7fe      	b.n	8002c9a <_exit+0x16>

08002c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cae:	e000      	b.n	8002cb2 <_read+0x16>
 8002cb0:	bf00      	nop
 8002cb2:	0001      	movs	r1, r0
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60ba      	str	r2, [r7, #8]
 8002cba:	b2ca      	uxtb	r2, r1
 8002cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbf0      	blt.n	8002cae <_read+0x12>
	}

return len;
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b006      	add	sp, #24
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e009      	b.n	8002cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	60ba      	str	r2, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff fb4b 	bl	800238c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf1      	blt.n	8002ce8 <_write+0x12>
	}
	return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b006      	add	sp, #24
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_close>:

int _close(int file)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
	return -1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	425b      	negs	r3, r3
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0192      	lsls	r2, r2, #6
 8002d32:	605a      	str	r2, [r3, #4]
	return 0;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_isatty>:

int _isatty(int file)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f008 f8be 	bl	800af18 <__errno>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	425b      	negs	r3, r3
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	18d2      	adds	r2, r2, r3
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20002000 	.word	0x20002000
 8002dc8:	00000400 	.word	0x00000400
 8002dcc:	20000378 	.word	0x20000378
 8002dd0:	20000758 	.word	0x20000758

08002dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim16_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	2328      	movs	r3, #40	; 0x28
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	0018      	movs	r0, r3
 8002dec:	2310      	movs	r3, #16
 8002dee:	001a      	movs	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	f008 f8de 	bl	800afb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df6:	231c      	movs	r3, #28
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	001a      	movs	r2, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	f008 f8d6 	bl	800afb2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e06:	003b      	movs	r3, r7
 8002e08:	0018      	movs	r0, r3
 8002e0a:	231c      	movs	r3, #28
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f008 f8cf 	bl	800afb2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e16:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <MX_TIM3_Init+0x120>)
 8002e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e28:	2263      	movs	r2, #99	; 0x63
 8002e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2c:	4b33      	ldr	r3, [pc, #204]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f003 ff3a 	bl	8006cb4 <HAL_TIM_Base_Init>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002e44:	f7ff fd99 	bl	800297a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e48:	2128      	movs	r1, #40	; 0x28
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	0152      	lsls	r2, r2, #5
 8002e50:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e52:	187a      	adds	r2, r7, r1
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e56:	0011      	movs	r1, r2
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f004 fc29 	bl	80076b0 <HAL_TIM_ConfigClockSource>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002e62:	f7ff fd8a 	bl	800297a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f004 f857 	bl	8006f1c <HAL_TIM_PWM_Init>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002e72:	f7ff fd82 	bl	800297a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	211c      	movs	r1, #28
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e84:	187a      	adds	r2, r7, r1
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f005 f8ce 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002e94:	f7ff fd71 	bl	800297a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e98:	003b      	movs	r3, r7
 8002e9a:	2260      	movs	r2, #96	; 0x60
 8002e9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eaa:	003b      	movs	r3, r7
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eb0:	0039      	movs	r1, r7
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f004 fafa 	bl	80074b0 <HAL_TIM_PWM_ConfigChannel>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002ec0:	f7ff fd5b 	bl	800297a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec4:	0039      	movs	r1, r7
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002ec8:	2204      	movs	r2, #4
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f004 faf0 	bl	80074b0 <HAL_TIM_PWM_ConfigChannel>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002ed4:	f7ff fd51 	bl	800297a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ed8:	0039      	movs	r1, r7
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002edc:	220c      	movs	r2, #12
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f004 fae6 	bl	80074b0 <HAL_TIM_PWM_ConfigChannel>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8002ee8:	f7ff fd47 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <MX_TIM3_Init+0x11c>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f980 	bl	80031f4 <HAL_TIM_MspPostInit>

}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b00e      	add	sp, #56	; 0x38
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	2000037c 	.word	0x2000037c
 8002f00:	40000400 	.word	0x40000400

08002f04 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <MX_TIM14_Init+0x44>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <MX_TIM14_Init+0x48>)
 8002f1e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <MX_TIM14_Init+0x40>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f003 fec0 	bl	8006cb4 <HAL_TIM_Base_Init>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002f38:	f7ff fd1f 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	200003c8 	.word	0x200003c8
 8002f48:	40002000 	.word	0x40002000
 8002f4c:	0000ffff 	.word	0x0000ffff

08002f50 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b094      	sub	sp, #80	; 0x50
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f56:	2334      	movs	r3, #52	; 0x34
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	231c      	movs	r3, #28
 8002f5e:	001a      	movs	r2, r3
 8002f60:	2100      	movs	r1, #0
 8002f62:	f008 f826 	bl	800afb2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f66:	003b      	movs	r3, r7
 8002f68:	0018      	movs	r0, r3
 8002f6a:	2334      	movs	r3, #52	; 0x34
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f008 f81f 	bl	800afb2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f74:	4b35      	ldr	r3, [pc, #212]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <MX_TIM16_Init+0x100>)
 8002f78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f88:	2264      	movs	r2, #100	; 0x64
 8002f8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <MX_TIM16_Init+0xfc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <MX_TIM16_Init+0xfc>)
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f003 fe87 	bl	8006cb4 <HAL_TIM_Base_Init>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002faa:	f7ff fce6 	bl	800297a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8002fae:	4b27      	ldr	r3, [pc, #156]	; (800304c <MX_TIM16_Init+0xfc>)
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f003 ff53 	bl	8006e5c <HAL_TIM_OC_Init>
 8002fb6:	1e03      	subs	r3, r0, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002fba:	f7ff fcde 	bl	800297a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002fbe:	2134      	movs	r1, #52	; 0x34
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fea:	1879      	adds	r1, r7, r1
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <MX_TIM16_Init+0xfc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f004 f9fd 	bl	80073f0 <HAL_TIM_OC_ConfigChannel>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8002ffa:	f7ff fcbe 	bl	800297a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ffe:	003b      	movs	r3, r7
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003004:	003b      	movs	r3, r7
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800300a:	003b      	movs	r3, r7
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003010:	003b      	movs	r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003016:	003b      	movs	r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800301c:	003b      	movs	r3, r7
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0192      	lsls	r2, r2, #6
 8003022:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003024:	003b      	movs	r3, r7
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800302a:	003b      	movs	r3, r7
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003030:	003a      	movs	r2, r7
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <MX_TIM16_Init+0xfc>)
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f005 f85a 	bl	80080f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003040:	f7ff fc9b 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b014      	add	sp, #80	; 0x50
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000414 	.word	0x20000414
 8003050:	40014400 	.word	0x40014400

08003054 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <MX_TIM17_Init+0x44>)
 800305a:	4a10      	ldr	r2, [pc, #64]	; (800309c <MX_TIM17_Init+0x48>)
 800305c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000-1;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_TIM17_Init+0x44>)
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <MX_TIM17_Init+0x4c>)
 8003062:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_TIM17_Init+0x44>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 6400-1;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_TIM17_Init+0x44>)
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <MX_TIM17_Init+0x50>)
 800306e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_TIM17_Init+0x44>)
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_TIM17_Init+0x44>)
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_TIM17_Init+0x44>)
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <MX_TIM17_Init+0x44>)
 8003084:	0018      	movs	r0, r3
 8003086:	f003 fe15 	bl	8006cb4 <HAL_TIM_Base_Init>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800308e:	f7ff fc74 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000460 	.word	0x20000460
 800309c:	40014800 	.word	0x40014800
 80030a0:	000003e7 	.word	0x000003e7
 80030a4:	000018ff 	.word	0x000018ff

080030a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <HAL_TIM_Base_MspInit+0x130>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d114      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	4b48      	ldr	r3, [pc, #288]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030c0:	2102      	movs	r1, #2
 80030c2:	430a      	orrs	r2, r1
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80030c6:	4b45      	ldr	r3, [pc, #276]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	2010      	movs	r0, #16
 80030d8:	f001 ffb0 	bl	800503c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030dc:	2010      	movs	r0, #16
 80030de:	f001 ffc2 	bl	8005066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80030e2:	e075      	b.n	80031d0 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM14)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <HAL_TIM_Base_MspInit+0x138>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d116      	bne.n	800311c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	0209      	lsls	r1, r1, #8
 80030f8:	430a      	orrs	r2, r1
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
 80030fc:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80030fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2013      	movs	r0, #19
 8003110:	f001 ff94 	bl	800503c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003114:	2013      	movs	r0, #19
 8003116:	f001 ffa6 	bl	8005066 <HAL_NVIC_EnableIRQ>
}
 800311a:	e059      	b.n	80031d0 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM16)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a30      	ldr	r2, [pc, #192]	; (80031e4 <HAL_TIM_Base_MspInit+0x13c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d139      	bne.n	800319a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 8003128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0289      	lsls	r1, r1, #10
 8003130:	430a      	orrs	r2, r1
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 8003136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	029b      	lsls	r3, r3, #10
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    hdma_tim16_ch1.Instance = DMA1_Channel1;
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_TIM_Base_MspInit+0x144>)
 8003146:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1.Init.Request = DMA_REQUEST_TIM16_CH1;
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 800314a:	222c      	movs	r2, #44	; 0x2c
 800314c:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003150:	2210      	movs	r2, #16
 8003152:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1.Init.Mode = DMA_CIRCULAR;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003172:	2220      	movs	r2, #32
 8003174:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1) != HAL_OK)
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 800317e:	0018      	movs	r0, r3
 8003180:	f001 ff92 	bl	80050a8 <HAL_DMA_Init>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d001      	beq.n	800318c <HAL_TIM_Base_MspInit+0xe4>
      Error_Handler();
 8003188:	f7ff fbf7 	bl	800297a <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_TIM_Base_MspInit+0x140>)
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003198:	e01a      	b.n	80031d0 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM17)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_TIM_Base_MspInit+0x148>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d115      	bne.n	80031d0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031a4:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80031a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	02c9      	lsls	r1, r1, #11
 80031ae:	430a      	orrs	r2, r1
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_TIM_Base_MspInit+0x134>)
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	02db      	lsls	r3, r3, #11
 80031ba:	4013      	ands	r3, r2
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	2016      	movs	r0, #22
 80031c6:	f001 ff39 	bl	800503c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80031ca:	2016      	movs	r0, #22
 80031cc:	f001 ff4b 	bl	8005066 <HAL_NVIC_EnableIRQ>
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b006      	add	sp, #24
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40002000 	.word	0x40002000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	200004ac 	.word	0x200004ac
 80031ec:	40020008 	.word	0x40020008
 80031f0:	40014800 	.word	0x40014800

080031f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	240c      	movs	r4, #12
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	0018      	movs	r0, r3
 8003202:	2314      	movs	r3, #20
 8003204:	001a      	movs	r2, r3
 8003206:	2100      	movs	r1, #0
 8003208:	f007 fed3 	bl	800afb2 <memset>
  if(timHandle->Instance==TIM3)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_TIM_MspPostInit+0x70>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d121      	bne.n	800325a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_TIM_MspPostInit+0x74>)
 8003218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_TIM_MspPostInit+0x74>)
 800321c:	2102      	movs	r1, #2
 800321e:	430a      	orrs	r2, r1
 8003220:	635a      	str	r2, [r3, #52]	; 0x34
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_TIM_MspPostInit+0x74>)
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	2202      	movs	r2, #2
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_SD_Pin|PWM_RVS_Pin|PWM_FWD_Pin;
 800322e:	0021      	movs	r1, r4
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2232      	movs	r2, #50	; 0x32
 8003234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2202      	movs	r2, #2
 800323a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2201      	movs	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324e:	187b      	adds	r3, r7, r1
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_TIM_MspPostInit+0x78>)
 8003252:	0019      	movs	r1, r3
 8003254:	0010      	movs	r0, r2
 8003256:	f002 f97f 	bl	8005558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b009      	add	sp, #36	; 0x24
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	40000400 	.word	0x40000400
 8003268:	40021000 	.word	0x40021000
 800326c:	50000400 	.word	0x50000400

08003270 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <MX_USART2_UART_Init+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 800327c:	2296      	movs	r2, #150	; 0x96
 800327e:	0192      	lsls	r2, r2, #6
 8003280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 8003296:	220c      	movs	r2, #12
 8003298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <MX_USART2_UART_Init+0x64>)
 80032ba:	2300      	movs	r3, #0
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	f005 ff90 	bl	80091e4 <HAL_RS485Ex_Init>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80032c8:	f7ff fb57 	bl	800297a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	20000508 	.word	0x20000508
 80032d8:	40004400 	.word	0x40004400

080032dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08b      	sub	sp, #44	; 0x2c
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	2414      	movs	r4, #20
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	0018      	movs	r0, r3
 80032ea:	2314      	movs	r3, #20
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	f007 fe5f 	bl	800afb2 <memset>
  if(uartHandle->Instance==USART2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_UART_MspInit+0x9c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d138      	bne.n	8003370 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032fe:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_UART_MspInit+0xa0>)
 8003300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_UART_MspInit+0xa0>)
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	0289      	lsls	r1, r1, #10
 8003308:	430a      	orrs	r2, r1
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_UART_MspInit+0xa0>)
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <HAL_UART_MspInit+0xa0>)
 800331c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_UART_MspInit+0xa0>)
 8003320:	2101      	movs	r1, #1
 8003322:	430a      	orrs	r2, r1
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_UART_MspInit+0xa0>)
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003332:	0021      	movs	r1, r4
 8003334:	187b      	adds	r3, r7, r1
 8003336:	220e      	movs	r2, #14
 8003338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2202      	movs	r2, #2
 800333e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2201      	movs	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	187a      	adds	r2, r7, r1
 8003354:	23a0      	movs	r3, #160	; 0xa0
 8003356:	05db      	lsls	r3, r3, #23
 8003358:	0011      	movs	r1, r2
 800335a:	0018      	movs	r0, r3
 800335c:	f002 f8fc 	bl	8005558 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	201c      	movs	r0, #28
 8003366:	f001 fe69 	bl	800503c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800336a:	201c      	movs	r0, #28
 800336c:	f001 fe7b 	bl	8005066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b00b      	add	sp, #44	; 0x2c
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	40004400 	.word	0x40004400
 800337c:	40021000 	.word	0x40021000

08003380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003382:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003384:	f7ff fd26 	bl	8002dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <LoopForever+0x6>)
  ldr r1, =_edata
 800338a:	490d      	ldr	r1, [pc, #52]	; (80033c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <LoopForever+0xe>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003390:	e002      	b.n	8003398 <LoopCopyDataInit>

08003392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003396:	3304      	adds	r3, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800339c:	d3f9      	bcc.n	8003392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033a0:	4c0a      	ldr	r4, [pc, #40]	; (80033cc <LoopForever+0x16>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a4:	e001      	b.n	80033aa <LoopFillZerobss>

080033a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a8:	3204      	adds	r2, #4

080033aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ac:	d3fb      	bcc.n	80033a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033ae:	f007 fdc9 	bl	800af44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80033b2:	f7ff f841 	bl	8002438 <main>

080033b6 <LoopForever>:

LoopForever:
  b LoopForever
 80033b6:	e7fe      	b.n	80033b6 <LoopForever>
  ldr   r0, =_estack
 80033b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c0:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80033c4:	0800e448 	.word	0x0800e448
  ldr r2, =_sbss
 80033c8:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80033cc:	20000754 	.word	0x20000754

080033d0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

080033d2 <map>:
#include "DC_Motor.h"
DC_Motor_t motor;

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	1a8a      	subs	r2, r1, r2
 80033ec:	3201      	adds	r2, #1
 80033ee:	435a      	muls	r2, r3
 80033f0:	0010      	movs	r0, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	0019      	movs	r1, r3
 80033fc:	f7fc ff26 	bl	800024c <__divsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	001a      	movs	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	18d3      	adds	r3, r2, r3
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}

08003410 <Timer_GetMaxPeriod>:

uint32_t Timer_GetMaxPeriod()
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
    return motor_tim.Init.Period;
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <Timer_GetMaxPeriod+0x10>)
 8003416:	68db      	ldr	r3, [r3, #12]
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	2000037c 	.word	0x2000037c

08003424 <DCMotor_Init>:
/**
 * @brief Initialize DC Motor
 * 
 */
void DCMotor_Init()
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	af00      	add	r7, sp, #0
    motor.motor_speed = 0;
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <DCMotor_Init+0x60>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    motor.acceleration = 500;
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <DCMotor_Init+0x60>)
 8003430:	22fa      	movs	r2, #250	; 0xfa
 8003432:	0052      	lsls	r2, r2, #1
 8003434:	609a      	str	r2, [r3, #8]
    motor.current_filter = New_MedianFilter(30, 0);
 8003436:	2100      	movs	r1, #0
 8003438:	201e      	movs	r0, #30
 800343a:	f005 ff5d 	bl	80092f8 <New_MedianFilter>
 800343e:	0002      	movs	r2, r0
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <DCMotor_Init+0x60>)
 8003442:	611a      	str	r2, [r3, #16]
    
    HAL_TIM_PWM_Start(&motor_tim, clockwise);
 8003444:	4b10      	ldr	r3, [pc, #64]	; (8003488 <DCMotor_Init+0x64>)
 8003446:	2104      	movs	r1, #4
 8003448:	0018      	movs	r0, r3
 800344a:	f003 fdc7 	bl	8006fdc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&motor_tim, counterclockwise);
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <DCMotor_Init+0x64>)
 8003450:	2100      	movs	r1, #0
 8003452:	0018      	movs	r0, r3
 8003454:	f003 fdc2 	bl	8006fdc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&motor_tim, sd_pin);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <DCMotor_Init+0x64>)
 800345a:	210c      	movs	r1, #12
 800345c:	0018      	movs	r0, r3
 800345e:	f003 fdbd 	bl	8006fdc <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&motor_tim, clockwise, 0);
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <DCMotor_Init+0x64>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&motor_tim, counterclockwise, 0);
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <DCMotor_Init+0x64>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&motor_tim, sd_pin, Timer_GetMaxPeriod());
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <DCMotor_Init+0x64>)
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f7ff ffcb 	bl	8003410 <Timer_GetMaxPeriod>
 800347a:	0003      	movs	r3, r0
 800347c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	bdb0      	pop	{r4, r5, r7, pc}
 8003484:	20000598 	.word	0x20000598
 8003488:	2000037c 	.word	0x2000037c

0800348c <DCMotor_SetAcceleration>:
 * @brief Set Acceleration time
 * 
 * @param millisecond
 */
void DCMotor_SetAcceleration(uint32_t millisecond)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    motor.acceleration = millisecond;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <DCMotor_SetAcceleration+0x18>)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000598 	.word	0x20000598

080034a8 <DCMotor_SetSpeed>:

void DCMotor_SetSpeed(int speed)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
    speed = map(speed, 0, 100, 0, Timer_GetMaxPeriod());
 80034b0:	f7ff ffae 	bl	8003410 <Timer_GetMaxPeriod>
 80034b4:	0003      	movs	r3, r0
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	2264      	movs	r2, #100	; 0x64
 80034be:	2100      	movs	r1, #0
 80034c0:	f7ff ff87 	bl	80033d2 <map>
 80034c4:	0003      	movs	r3, r0
 80034c6:	607b      	str	r3, [r7, #4]
    motor.motor_old_speed = motor.motor_speed;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <DCMotor_SetSpeed+0x38>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <DCMotor_SetSpeed+0x38>)
 80034ce:	605a      	str	r2, [r3, #4]
    motor.motor_speed = speed;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <DCMotor_SetSpeed+0x38>)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	20000598 	.word	0x20000598

080034e4 <DCMotor_SetDirection>:

void DCMotor_SetDirection(uint8_t dir)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	0002      	movs	r2, r0
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	701a      	strb	r2, [r3, #0]
    if (dir == 1) motor.direction = clockwise;
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d103      	bne.n	8003500 <DCMotor_SetDirection+0x1c>
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <DCMotor_SetDirection+0x2c>)
 80034fa:	2204      	movs	r2, #4
 80034fc:	60da      	str	r2, [r3, #12]
    else motor.direction = counterclockwise;
}
 80034fe:	e002      	b.n	8003506 <DCMotor_SetDirection+0x22>
    else motor.direction = counterclockwise;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <DCMotor_SetDirection+0x2c>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	20000598 	.word	0x20000598

08003514 <_run_faster>:

void _run_faster(int _delay)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    for(int s = motor.motor_old_speed; s <= motor.motor_speed; ++s)
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <_run_faster+0x94>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e037      	b.n	8003594 <_run_faster+0x80>
    {
        __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, s);
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <_run_faster+0x94>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <_run_faster+0x22>
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <_run_faster+0x98>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
 8003534:	e027      	b.n	8003586 <_run_faster+0x72>
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <_run_faster+0x94>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d104      	bne.n	8003548 <_run_faster+0x34>
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <_run_faster+0x98>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6393      	str	r3, [r2, #56]	; 0x38
 8003546:	e01e      	b.n	8003586 <_run_faster+0x72>
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <_run_faster+0x94>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <_run_faster+0x46>
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <_run_faster+0x98>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003558:	e015      	b.n	8003586 <_run_faster+0x72>
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <_run_faster+0x94>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d104      	bne.n	800356c <_run_faster+0x58>
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <_run_faster+0x98>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	e00c      	b.n	8003586 <_run_faster+0x72>
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <_run_faster+0x94>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d104      	bne.n	800357e <_run_faster+0x6a>
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <_run_faster+0x98>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	e003      	b.n	8003586 <_run_faster+0x72>
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <_run_faster+0x98>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	65d3      	str	r3, [r2, #92]	; 0x5c
        HAL_Delay(_delay);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fa89 	bl	8003aa0 <HAL_Delay>
    for(int s = motor.motor_old_speed; s <= motor.motor_speed; ++s)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3301      	adds	r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <_run_faster+0x94>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	429a      	cmp	r2, r3
 800359c:	ddc2      	ble.n	8003524 <_run_faster+0x10>
    }
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000598 	.word	0x20000598
 80035ac:	2000037c 	.word	0x2000037c

080035b0 <_run_slower>:
void _run_slower(int _delay)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    for(int s = motor.motor_old_speed; s >= motor.motor_speed; --s)
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <_run_slower+0x94>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e037      	b.n	8003630 <_run_slower+0x80>
    {
        __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, s);
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <_run_slower+0x94>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <_run_slower+0x22>
 80035c8:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <_run_slower+0x98>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
 80035d0:	e027      	b.n	8003622 <_run_slower+0x72>
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <_run_slower+0x94>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d104      	bne.n	80035e4 <_run_slower+0x34>
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <_run_slower+0x98>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6393      	str	r3, [r2, #56]	; 0x38
 80035e2:	e01e      	b.n	8003622 <_run_slower+0x72>
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <_run_slower+0x94>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d104      	bne.n	80035f6 <_run_slower+0x46>
 80035ec:	4b16      	ldr	r3, [pc, #88]	; (8003648 <_run_slower+0x98>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80035f4:	e015      	b.n	8003622 <_run_slower+0x72>
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <_run_slower+0x94>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d104      	bne.n	8003608 <_run_slower+0x58>
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <_run_slower+0x98>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	e00c      	b.n	8003622 <_run_slower+0x72>
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <_run_slower+0x94>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d104      	bne.n	800361a <_run_slower+0x6a>
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <_run_slower+0x98>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6593      	str	r3, [r2, #88]	; 0x58
 8003618:	e003      	b.n	8003622 <_run_slower+0x72>
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <_run_slower+0x98>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	65d3      	str	r3, [r2, #92]	; 0x5c
        HAL_Delay(_delay);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 fa3b 	bl	8003aa0 <HAL_Delay>
    for(int s = motor.motor_old_speed; s >= motor.motor_speed; --s)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b01      	subs	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <_run_slower+0x94>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	429a      	cmp	r2, r3
 8003638:	dac2      	bge.n	80035c0 <_run_slower+0x10>
    }
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000598 	.word	0x20000598
 8003648:	2000037c 	.word	0x2000037c

0800364c <DCMotor_Run>:

void DCMotor_Run()
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
    int _delay = motor.acceleration / motor.motor_speed;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <DCMotor_Run+0x40>)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <DCMotor_Run+0x40>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0019      	movs	r1, r3
 800365c:	0010      	movs	r0, r2
 800365e:	f7fc fd6b 	bl	8000138 <__udivsi3>
 8003662:	0003      	movs	r3, r0
 8003664:	607b      	str	r3, [r7, #4]
    if(motor.motor_old_speed < motor.motor_speed) _run_faster(_delay);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <DCMotor_Run+0x40>)
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <DCMotor_Run+0x40>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	da04      	bge.n	800367c <DCMotor_Run+0x30>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f7ff ff4d 	bl	8003514 <_run_faster>
    else _run_slower(_delay);
}
 800367a:	e003      	b.n	8003684 <DCMotor_Run+0x38>
    else _run_slower(_delay);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff ff96 	bl	80035b0 <_run_slower>
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b002      	add	sp, #8
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000598 	.word	0x20000598

08003690 <DCMotor_Stop>:

void DCMotor_Stop()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
    int _delay = motor.acceleration / motor.motor_speed;
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <DCMotor_Stop+0x104>)
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <DCMotor_Stop+0x104>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	0019      	movs	r1, r3
 80036a0:	0010      	movs	r0, r2
 80036a2:	f7fc fd49 	bl	8000138 <__udivsi3>
 80036a6:	0003      	movs	r3, r0
 80036a8:	603b      	str	r3, [r7, #0]
    for(int s = motor.motor_speed; s >= 0; s--)
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <DCMotor_Stop+0x104>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	e037      	b.n	8003722 <DCMotor_Stop+0x92>
    {
        __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, s);
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <DCMotor_Stop+0x104>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <DCMotor_Stop+0x34>
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <DCMotor_Stop+0x108>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34
 80036c2:	e027      	b.n	8003714 <DCMotor_Stop+0x84>
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <DCMotor_Stop+0x104>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d104      	bne.n	80036d6 <DCMotor_Stop+0x46>
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <DCMotor_Stop+0x108>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6393      	str	r3, [r2, #56]	; 0x38
 80036d4:	e01e      	b.n	8003714 <DCMotor_Stop+0x84>
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <DCMotor_Stop+0x104>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d104      	bne.n	80036e8 <DCMotor_Stop+0x58>
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <DCMotor_Stop+0x108>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80036e6:	e015      	b.n	8003714 <DCMotor_Stop+0x84>
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <DCMotor_Stop+0x104>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d104      	bne.n	80036fa <DCMotor_Stop+0x6a>
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <DCMotor_Stop+0x108>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
 80036f8:	e00c      	b.n	8003714 <DCMotor_Stop+0x84>
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <DCMotor_Stop+0x104>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d104      	bne.n	800370c <DCMotor_Stop+0x7c>
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <DCMotor_Stop+0x108>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	e003      	b.n	8003714 <DCMotor_Stop+0x84>
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <DCMotor_Stop+0x108>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65d3      	str	r3, [r2, #92]	; 0x5c
        HAL_Delay(_delay);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f9c2 	bl	8003aa0 <HAL_Delay>
    for(int s = motor.motor_speed; s >= 0; s--)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	dac4      	bge.n	80036b2 <DCMotor_Stop+0x22>
    }
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <DCMotor_Stop+0x104>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <DCMotor_Stop+0xaa>
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <DCMotor_Stop+0x108>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003738:	e027      	b.n	800378a <DCMotor_Stop+0xfa>
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <DCMotor_Stop+0x104>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d104      	bne.n	800374c <DCMotor_Stop+0xbc>
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <DCMotor_Stop+0x108>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	6393      	str	r3, [r2, #56]	; 0x38
}
 800374a:	e01e      	b.n	800378a <DCMotor_Stop+0xfa>
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <DCMotor_Stop+0x104>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <DCMotor_Stop+0xce>
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <DCMotor_Stop+0x108>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800375c:	e015      	b.n	800378a <DCMotor_Stop+0xfa>
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <DCMotor_Stop+0x104>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d104      	bne.n	8003770 <DCMotor_Stop+0xe0>
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <DCMotor_Stop+0x108>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800376e:	e00c      	b.n	800378a <DCMotor_Stop+0xfa>
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <DCMotor_Stop+0x104>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d104      	bne.n	8003782 <DCMotor_Stop+0xf2>
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <DCMotor_Stop+0x108>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003780:	e003      	b.n	800378a <DCMotor_Stop+0xfa>
     __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <DCMotor_Stop+0x108>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000598 	.word	0x20000598
 8003798:	2000037c 	.word	0x2000037c

0800379c <DCMotor_Reset>:
    HAL_Delay(time_in_millis);
    __HAL_TIM_SET_COMPARE(&motor_tim, motor.direction, 0);
}

void DCMotor_Reset()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
    motor.motor_speed = 0;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <DCMotor_Reset+0x28>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    motor.motor_old_speed = 0;
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <DCMotor_Reset+0x28>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
    __HAL_TIM_SET_COMPARE(&motor_tim, clockwise, 0);
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <DCMotor_Reset+0x2c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&motor_tim, counterclockwise, 0);
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <DCMotor_Reset+0x2c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20000598 	.word	0x20000598
 80037c8:	2000037c 	.word	0x2000037c

080037cc <DCMotor_GetSensor>:
    __HAL_TIM_SET_COMPARE(&motor_tim, sd_pin, Timer_GetMaxPeriod());
    DCMotor_Reset();
}

void DCMotor_GetSensor(uint8_t channel, int time_in_millis)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	701a      	strb	r2, [r3, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 80037da:	240c      	movs	r4, #12
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	0018      	movs	r0, r3
 80037e0:	230c      	movs	r3, #12
 80037e2:	001a      	movs	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	f007 fbe4 	bl	800afb2 <memset>
    if (channel == 0)
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <DCMotor_GetSensor+0x2c>
        sConfig.Channel = current_sensor_pin;
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
    if (channel == 1)
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d103      	bne.n	8003808 <DCMotor_GetSensor+0x3c>
        sConfig.Channel = voltage_sensor_pin;
 8003800:	230c      	movs	r3, #12
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	4a10      	ldr	r2, [pc, #64]	; (8003848 <DCMotor_GetSensor+0x7c>)
 8003806:	601a      	str	r2, [r3, #0]

    sConfig.Rank = adc_rank;
 8003808:	210c      	movs	r1, #12
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = adc_sampling;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&sensor_adc, &sConfig) != HAL_OK)
 8003816:	187a      	adds	r2, r7, r1
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <DCMotor_GetSensor+0x80>)
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fedb 	bl	80045d8 <HAL_ADC_ConfigChannel>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <DCMotor_GetSensor+0x5e>
        Error_Handler();
 8003826:	f7ff f8a8 	bl	800297a <Error_Handler>

    HAL_ADC_Start(&sensor_adc);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <DCMotor_GetSensor+0x80>)
 800382c:	0018      	movs	r0, r3
 800382e:	f000 fc79 	bl	8004124 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&sensor_adc, time_in_millis);
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <DCMotor_GetSensor+0x80>)
 8003836:	0011      	movs	r1, r2
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fcfd 	bl	8004238 <HAL_ADC_PollForConversion>
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b007      	add	sp, #28
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	28000400 	.word	0x28000400
 800384c:	20000280 	.word	0x20000280

08003850 <DCMotor_GetCurrentValue>:
{
    return MedianFilter_GetMax(motor.current_filter);
}

int DCMotor_GetCurrentValue()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
    DCMotor_GetSensor(0, 1);
 8003854:	2101      	movs	r1, #1
 8003856:	2000      	movs	r0, #0
 8003858:	f7ff ffb8 	bl	80037cc <DCMotor_GetSensor>
    HAL_ADC_Stop(&sensor_adc);
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <DCMotor_GetCurrentValue+0x70>)
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fcae 	bl	80041c0 <HAL_ADC_Stop>
    return (((HAL_ADC_GetValue(&sensor_adc) / 4096.0) * 10.5) * 5.0) * 100;
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <DCMotor_GetCurrentValue+0x70>)
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fd7a 	bl	8004360 <HAL_ADC_GetValue>
 800386c:	0003      	movs	r3, r0
 800386e:	0018      	movs	r0, r3
 8003870:	f7fe fbd6 	bl	8002020 <__aeabi_ui2d>
 8003874:	2200      	movs	r2, #0
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <DCMotor_GetCurrentValue+0x74>)
 8003878:	f7fd f94e 	bl	8000b18 <__aeabi_ddiv>
 800387c:	0002      	movs	r2, r0
 800387e:	000b      	movs	r3, r1
 8003880:	0010      	movs	r0, r2
 8003882:	0019      	movs	r1, r3
 8003884:	2200      	movs	r2, #0
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <DCMotor_GetCurrentValue+0x78>)
 8003888:	f7fd fd48 	bl	800131c <__aeabi_dmul>
 800388c:	0002      	movs	r2, r0
 800388e:	000b      	movs	r3, r1
 8003890:	0010      	movs	r0, r2
 8003892:	0019      	movs	r1, r3
 8003894:	2200      	movs	r2, #0
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <DCMotor_GetCurrentValue+0x7c>)
 8003898:	f7fd fd40 	bl	800131c <__aeabi_dmul>
 800389c:	0002      	movs	r2, r0
 800389e:	000b      	movs	r3, r1
 80038a0:	0010      	movs	r0, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <DCMotor_GetCurrentValue+0x80>)
 80038a8:	f7fd fd38 	bl	800131c <__aeabi_dmul>
 80038ac:	0002      	movs	r2, r0
 80038ae:	000b      	movs	r3, r1
 80038b0:	0010      	movs	r0, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	f7fe fb4e 	bl	8001f54 <__aeabi_d2iz>
 80038b8:	0003      	movs	r3, r0
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000280 	.word	0x20000280
 80038c4:	40b00000 	.word	0x40b00000
 80038c8:	40250000 	.word	0x40250000
 80038cc:	40140000 	.word	0x40140000
 80038d0:	40590000 	.word	0x40590000

080038d4 <DCMotor_GetVoltageValue>:

int DCMotor_GetVoltageValue()
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
    DCMotor_GetSensor(1, 1);
 80038d8:	2101      	movs	r1, #1
 80038da:	2001      	movs	r0, #1
 80038dc:	f7ff ff76 	bl	80037cc <DCMotor_GetSensor>
    HAL_ADC_Stop(&sensor_adc);
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <DCMotor_GetVoltageValue+0x60>)
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fc6c 	bl	80041c0 <HAL_ADC_Stop>
    return ((HAL_ADC_GetValue(&sensor_adc) / 4096.0) * 43.0) * 100;
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <DCMotor_GetVoltageValue+0x60>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fd38 	bl	8004360 <HAL_ADC_GetValue>
 80038f0:	0003      	movs	r3, r0
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fe fb94 	bl	8002020 <__aeabi_ui2d>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <DCMotor_GetVoltageValue+0x64>)
 80038fc:	f7fd f90c 	bl	8000b18 <__aeabi_ddiv>
 8003900:	0002      	movs	r2, r0
 8003902:	000b      	movs	r3, r1
 8003904:	0010      	movs	r0, r2
 8003906:	0019      	movs	r1, r3
 8003908:	2200      	movs	r2, #0
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <DCMotor_GetVoltageValue+0x68>)
 800390c:	f7fd fd06 	bl	800131c <__aeabi_dmul>
 8003910:	0002      	movs	r2, r0
 8003912:	000b      	movs	r3, r1
 8003914:	0010      	movs	r0, r2
 8003916:	0019      	movs	r1, r3
 8003918:	2200      	movs	r2, #0
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <DCMotor_GetVoltageValue+0x6c>)
 800391c:	f7fd fcfe 	bl	800131c <__aeabi_dmul>
 8003920:	0002      	movs	r2, r0
 8003922:	000b      	movs	r3, r1
 8003924:	0010      	movs	r0, r2
 8003926:	0019      	movs	r1, r3
 8003928:	f7fe fb14 	bl	8001f54 <__aeabi_d2iz>
 800392c:	0003      	movs	r3, r0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000280 	.word	0x20000280
 8003938:	40b00000 	.word	0x40b00000
 800393c:	40458000 	.word	0x40458000
 8003940:	40590000 	.word	0x40590000

08003944 <DCMotor_GetResistanceValue>:

int DCMotor_GetResistanceValue()
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
    int i = DCMotor_GetCurrentValue();
 800394a:	f7ff ff81 	bl	8003850 <DCMotor_GetCurrentValue>
 800394e:	0003      	movs	r3, r0
 8003950:	607b      	str	r3, [r7, #4]
    int v = DCMotor_GetVoltageValue();
 8003952:	f7ff ffbf 	bl	80038d4 <DCMotor_GetVoltageValue>
 8003956:	0003      	movs	r3, r0
 8003958:	603b      	str	r3, [r7, #0]
    return v / i;
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	6838      	ldr	r0, [r7, #0]
 800395e:	f7fc fc75 	bl	800024c <__divsi3>
 8003962:	0003      	movs	r3, r0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <DCMotor_GetSpeed>:
{
    return motor.current_limit;
}

int DCMotor_GetSpeed()
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    return motor.motor_speed;
 8003970:	4b02      	ldr	r3, [pc, #8]	; (800397c <DCMotor_GetSpeed+0x10>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000598 	.word	0x20000598

08003980 <DCMotor_GetAcceleration>:

int DCMotor_GetAcceleration()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
    return motor.acceleration;
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <DCMotor_GetAcceleration+0x10>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000598 	.word	0x20000598

08003994 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_Init+0x3c>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_Init+0x3c>)
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	0049      	lsls	r1, r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ae:	2003      	movs	r0, #3
 80039b0:	f000 f810 	bl	80039d4 <HAL_InitTick>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e001      	b.n	80039c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7ff f86c 	bl	8002a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	781b      	ldrb	r3, [r3, #0]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039dc:	230f      	movs	r3, #15
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_InitTick+0x88>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02b      	beq.n	8003a44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_InitTick+0x8c>)
 80039ee:	681c      	ldr	r4, [r3, #0]
 80039f0:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_InitTick+0x88>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	0019      	movs	r1, r3
 80039f6:	23fa      	movs	r3, #250	; 0xfa
 80039f8:	0098      	lsls	r0, r3, #2
 80039fa:	f7fc fb9d 	bl	8000138 <__udivsi3>
 80039fe:	0003      	movs	r3, r0
 8003a00:	0019      	movs	r1, r3
 8003a02:	0020      	movs	r0, r4
 8003a04:	f7fc fb98 	bl	8000138 <__udivsi3>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f001 fb3f 	bl	800508e <HAL_SYSTICK_Config>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d112      	bne.n	8003a3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d80a      	bhi.n	8003a30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	425b      	negs	r3, r3
 8003a20:	2200      	movs	r2, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f001 fb0a 	bl	800503c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_InitTick+0x90>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e00d      	b.n	8003a4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003a30:	230f      	movs	r3, #15
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e008      	b.n	8003a4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a3a:	230f      	movs	r3, #15
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e003      	b.n	8003a4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a44:	230f      	movs	r3, #15
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	781b      	ldrb	r3, [r3, #0]
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b005      	add	sp, #20
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20000010 	.word	0x20000010
 8003a60:	20000008 	.word	0x20000008
 8003a64:	2000000c 	.word	0x2000000c

08003a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_IncTick+0x1c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	001a      	movs	r2, r3
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_IncTick+0x20>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	18d2      	adds	r2, r2, r3
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_IncTick+0x20>)
 8003a7a:	601a      	str	r2, [r3, #0]
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	20000010 	.word	0x20000010
 8003a88:	200005b4 	.word	0x200005b4

08003a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <HAL_GetTick+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	200005b4 	.word	0x200005b4

08003aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff fff0 	bl	8003a8c <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	d005      	beq.n	8003ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_Delay+0x44>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	001a      	movs	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	f7ff ffe0 	bl	8003a8c <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d8f7      	bhi.n	8003ac8 <HAL_Delay+0x28>
  {
  }
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	20000010 	.word	0x20000010

08003ae8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003af8:	401a      	ands	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	fe3fffff 	.word	0xfe3fffff

08003b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	23e0      	movs	r3, #224	; 0xe0
 8003b1e:	045b      	lsls	r3, r3, #17
 8003b20:	4013      	ands	r3, r2
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	400a      	ands	r2, r1
 8003b40:	2107      	movs	r1, #7
 8003b42:	4091      	lsls	r1, r2
 8003b44:	000a      	movs	r2, r1
 8003b46:	43d2      	mvns	r2, r2
 8003b48:	401a      	ands	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4099      	lsls	r1, r3
 8003b54:	000b      	movs	r3, r1
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	2104      	movs	r1, #4
 8003b76:	400a      	ands	r2, r1
 8003b78:	2107      	movs	r1, #7
 8003b7a:	4091      	lsls	r1, r2
 8003b7c:	000a      	movs	r2, r1
 8003b7e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2104      	movs	r1, #4
 8003b84:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b86:	40da      	lsrs	r2, r3
 8003b88:	0013      	movs	r3, r2
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d101      	bne.n	8003baa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	211f      	movs	r1, #31
 8003bc8:	400a      	ands	r2, r1
 8003bca:	210f      	movs	r1, #15
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	43d2      	mvns	r2, r2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	210f      	movs	r1, #15
 8003bda:	4019      	ands	r1, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	201f      	movs	r0, #31
 8003be0:	4003      	ands	r3, r0
 8003be2:	4099      	lsls	r1, r3
 8003be4:	000b      	movs	r3, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	035b      	lsls	r3, r3, #13
 8003c06:	0b5b      	lsrs	r3, r3, #13
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	0352      	lsls	r2, r2, #13
 8003c28:	0b52      	lsrs	r2, r2, #13
 8003c2a:	43d2      	mvns	r2, r2
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2203      	movs	r2, #3
 8003c48:	4013      	ands	r3, r2
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b002      	add	sp, #8
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	0212      	lsls	r2, r2, #8
 8003c68:	43d2      	mvns	r2, r2
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	400b      	ands	r3, r1
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003c76:	400b      	ands	r3, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	07ffff00 	.word	0x07ffff00

08003c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	0552      	lsls	r2, r2, #21
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	6fffffe8 	.word	0x6fffffe8

08003cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	055b      	lsls	r3, r3, #21
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	055b      	lsls	r3, r3, #21
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d101      	bne.n	8003cd2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <LL_ADC_Enable+0x20>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	2201      	movs	r2, #1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	7fffffe8 	.word	0x7fffffe8

08003d00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <LL_ADC_Disable+0x20>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2202      	movs	r2, #2
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	7fffffe8 	.word	0x7fffffe8

08003d24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <LL_ADC_IsEnabled+0x18>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <LL_ADC_IsEnabled+0x1a>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_IsDisableOngoing+0x18>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_IsDisableOngoing+0x1a>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <LL_ADC_REG_StartConversion+0x20>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	2204      	movs	r2, #4
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	7fffffe8 	.word	0x7fffffe8

08003d8c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <LL_ADC_REG_StopConversion+0x20>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	7fffffe8 	.word	0x7fffffe8

08003db0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d101      	bne.n	8003dc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ddc:	231f      	movs	r3, #31
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e17f      	b.n	80040fa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fe f9a1 	bl	800214c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2254      	movs	r2, #84	; 0x54
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff ff49 	bl	8003cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d115      	bne.n	8003e52 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff ff2e 	bl	8003c8c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e30:	4bb4      	ldr	r3, [pc, #720]	; (8004104 <HAL_ADC_Init+0x330>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	49b4      	ldr	r1, [pc, #720]	; (8004108 <HAL_ADC_Init+0x334>)
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7fc f97e 	bl	8000138 <__udivsi3>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e44:	e002      	b.n	8003e4c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f9      	bne.n	8003e46 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff ff2c 	bl	8003cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d10f      	bne.n	8003e80 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	2210      	movs	r2, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2201      	movs	r2, #1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e78:	231f      	movs	r3, #31
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff ff93 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	2210      	movs	r2, #16
 8003e94:	4013      	ands	r3, r2
 8003e96:	d000      	beq.n	8003e9a <HAL_ADC_Init+0xc6>
 8003e98:	e122      	b.n	80040e0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d000      	beq.n	8003ea2 <HAL_ADC_Init+0xce>
 8003ea0:	e11e      	b.n	80040e0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	4a99      	ldr	r2, [pc, #612]	; (800410c <HAL_ADC_Init+0x338>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2202      	movs	r2, #2
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff ff34 	bl	8003d24 <LL_ADC_IsEnabled>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d000      	beq.n	8003ec2 <HAL_ADC_Init+0xee>
 8003ec0:	e0ad      	b.n	800401e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7e1b      	ldrb	r3, [r3, #24]
 8003eca:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ecc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7e5b      	ldrb	r3, [r3, #25]
 8003ed2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ed4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7e9b      	ldrb	r3, [r3, #26]
 8003eda:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003edc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_ADC_Init+0x118>
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	015b      	lsls	r3, r3, #5
 8003eea:	e000      	b.n	8003eee <HAL_ADC_Init+0x11a>
 8003eec:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003eee:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ef4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da04      	bge.n	8003f08 <HAL_ADC_Init+0x134>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	e001      	b.n	8003f0c <HAL_ADC_Init+0x138>
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003f0c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	5c5b      	ldrb	r3, [r3, r1]
 8003f14:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f16:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d115      	bne.n	8003f54 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7e9b      	ldrb	r3, [r3, #26]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	0252      	lsls	r2, r2, #9
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e00b      	b.n	8003f54 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	2220      	movs	r2, #32
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f60:	23e0      	movs	r3, #224	; 0xe0
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a65      	ldr	r2, [pc, #404]	; (8004110 <HAL_ADC_Init+0x33c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0f9b      	lsrs	r3, r3, #30
 8003f8e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f94:	4313      	orrs	r3, r2
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223c      	movs	r2, #60	; 0x3c
 8003fa0:	5c9b      	ldrb	r3, [r3, r2]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d111      	bne.n	8003fca <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0f9b      	lsrs	r3, r3, #30
 8003fac:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fb2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003fb8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003fbe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4a50      	ldr	r2, [pc, #320]	; (8004114 <HAL_ADC_Init+0x340>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	23c0      	movs	r3, #192	; 0xc0
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d018      	beq.n	800401e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	05db      	lsls	r3, r3, #23
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d012      	beq.n	800401e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	429a      	cmp	r2, r3
 8004002:	d00c      	beq.n	800401e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004004:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_ADC_Init+0x344>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a44      	ldr	r2, [pc, #272]	; (800411c <HAL_ADC_Init+0x348>)
 800400a:	4013      	ands	r3, r2
 800400c:	0019      	movs	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	23f0      	movs	r3, #240	; 0xf0
 8004014:	039b      	lsls	r3, r3, #14
 8004016:	401a      	ands	r2, r3
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_ADC_Init+0x344>)
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	001a      	movs	r2, r3
 8004028:	2100      	movs	r1, #0
 800402a:	f7ff fd7e 	bl	8003b2a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	493a      	ldr	r1, [pc, #232]	; (8004120 <HAL_ADC_Init+0x34c>)
 8004038:	001a      	movs	r2, r3
 800403a:	f7ff fd76 	bl	8003b2a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2110      	movs	r1, #16
 8004052:	4249      	negs	r1, r1
 8004054:	430a      	orrs	r2, r1
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
 8004058:	e018      	b.n	800408c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	039b      	lsls	r3, r3, #14
 8004062:	429a      	cmp	r2, r3
 8004064:	d112      	bne.n	800408c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	3b01      	subs	r3, #1
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	221c      	movs	r2, #28
 8004076:	4013      	ands	r3, r2
 8004078:	2210      	movs	r2, #16
 800407a:	4252      	negs	r2, r2
 800407c:	409a      	lsls	r2, r3
 800407e:	0011      	movs	r1, r2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2100      	movs	r1, #0
 8004092:	0018      	movs	r0, r3
 8004094:	f7ff fd66 	bl	8003b64 <LL_ADC_GetSamplingTimeCommonChannels>
 8004098:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10b      	bne.n	80040ba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	2203      	movs	r2, #3
 80040ae:	4393      	bics	r3, r2
 80040b0:	2201      	movs	r2, #1
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040b8:	e01c      	b.n	80040f4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	2212      	movs	r2, #18
 80040c0:	4393      	bics	r3, r2
 80040c2:	2210      	movs	r2, #16
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	2201      	movs	r2, #1
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80040d6:	231f      	movs	r3, #31
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040de:	e009      	b.n	80040f4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	2210      	movs	r2, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040ec:	231f      	movs	r3, #31
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80040f4:	231f      	movs	r3, #31
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	781b      	ldrb	r3, [r3, #0]
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b008      	add	sp, #32
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	20000008 	.word	0x20000008
 8004108:	00030d40 	.word	0x00030d40
 800410c:	fffffefd 	.word	0xfffffefd
 8004110:	fffe0201 	.word	0xfffe0201
 8004114:	1ffffc02 	.word	0x1ffffc02
 8004118:	40012708 	.word	0x40012708
 800411c:	ffc3ffff 	.word	0xffc3ffff
 8004120:	07ffff04 	.word	0x07ffff04

08004124 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004124:	b5b0      	push	{r4, r5, r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fe3d 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 8004136:	1e03      	subs	r3, r0, #0
 8004138:	d135      	bne.n	80041a6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2254      	movs	r2, #84	; 0x54
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_ADC_Start+0x24>
 8004144:	2302      	movs	r3, #2
 8004146:	e035      	b.n	80041b4 <HAL_ADC_Start+0x90>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2254      	movs	r2, #84	; 0x54
 800414c:	2101      	movs	r1, #1
 800414e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004150:	250f      	movs	r5, #15
 8004152:	197c      	adds	r4, r7, r5
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fc58 	bl	8004a0c <ADC_Enable>
 800415c:	0003      	movs	r3, r0
 800415e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004160:	197b      	adds	r3, r7, r5
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d119      	bne.n	800419c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <HAL_ADC_Start+0x98>)
 800416e:	4013      	ands	r3, r2
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	0052      	lsls	r2, r2, #1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	221c      	movs	r2, #28
 8004186:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2254      	movs	r2, #84	; 0x54
 800418c:	2100      	movs	r1, #0
 800418e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff fde7 	bl	8003d68 <LL_ADC_REG_StartConversion>
 800419a:	e008      	b.n	80041ae <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2254      	movs	r2, #84	; 0x54
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]
 80041a4:	e003      	b.n	80041ae <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041a6:	230f      	movs	r3, #15
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80041ae:	230f      	movs	r3, #15
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	fffff0fe 	.word	0xfffff0fe

080041c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2254      	movs	r2, #84	; 0x54
 80041cc:	5c9b      	ldrb	r3, [r3, r2]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_Stop+0x16>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e029      	b.n	800422a <HAL_ADC_Stop+0x6a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2254      	movs	r2, #84	; 0x54
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80041de:	250f      	movs	r5, #15
 80041e0:	197c      	adds	r4, r7, r5
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 fbcf 	bl	8004988 <ADC_ConversionStop>
 80041ea:	0003      	movs	r3, r0
 80041ec:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80041ee:	197b      	adds	r3, r7, r5
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d112      	bne.n	800421c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80041f6:	197c      	adds	r4, r7, r5
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f000 fc8c 	bl	8004b18 <ADC_Disable>
 8004200:	0003      	movs	r3, r0
 8004202:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004204:	197b      	adds	r3, r7, r5
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	4a08      	ldr	r2, [pc, #32]	; (8004234 <HAL_ADC_Stop+0x74>)
 8004212:	4013      	ands	r3, r2
 8004214:	2201      	movs	r2, #1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2254      	movs	r2, #84	; 0x54
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004224:	230f      	movs	r3, #15
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	781b      	ldrb	r3, [r3, #0]
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	fffffefe 	.word	0xfffffefe

08004238 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b08      	cmp	r3, #8
 8004248:	d102      	bne.n	8004250 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800424a:	2308      	movs	r3, #8
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e00f      	b.n	8004270 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d007      	beq.n	800426c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	2220      	movs	r2, #32
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e072      	b.n	8004352 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800426c:	2304      	movs	r3, #4
 800426e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004270:	f7ff fc0c 	bl	8003a8c <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004278:	e01f      	b.n	80042ba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	d01c      	beq.n	80042ba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004280:	f7ff fc04 	bl	8003a8c <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <HAL_ADC_PollForConversion+0x5e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d111      	bne.n	80042ba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	d10b      	bne.n	80042ba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	2204      	movs	r2, #4
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2254      	movs	r2, #84	; 0x54
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04b      	b.n	8004352 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0d9      	beq.n	800427a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	0092      	lsls	r2, r2, #2
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff fc5a 	bl	8003b92 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042de:	1e03      	subs	r3, r0, #0
 80042e0:	d02e      	beq.n	8004340 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7e9b      	ldrb	r3, [r3, #26]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12a      	bne.n	8004340 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2208      	movs	r2, #8
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d123      	bne.n	8004340 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff fd57 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d110      	bne.n	8004328 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	210c      	movs	r1, #12
 8004312:	438a      	bics	r2, r1
 8004314:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <HAL_ADC_PollForConversion+0x124>)
 800431c:	4013      	ands	r3, r2
 800431e:	2201      	movs	r2, #1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	; 0x58
 8004326:	e00b      	b.n	8004340 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	2220      	movs	r2, #32
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2201      	movs	r2, #1
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e1b      	ldrb	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	220c      	movs	r2, #12
 800434e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b004      	add	sp, #16
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	fffffefe 	.word	0xfffffefe

08004360 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2202      	movs	r2, #2
 8004398:	4013      	ands	r3, r2
 800439a:	d017      	beq.n	80043cc <HAL_ADC_IRQHandler+0x54>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	2210      	movs	r2, #16
 80043aa:	4013      	ands	r3, r2
 80043ac:	d106      	bne.n	80043bc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fd6e 	bl	8004ea0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2202      	movs	r2, #2
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2204      	movs	r2, #4
 80043d0:	4013      	ands	r3, r2
 80043d2:	d003      	beq.n	80043dc <HAL_ADC_IRQHandler+0x64>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2204      	movs	r2, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	d107      	bne.n	80043ec <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2208      	movs	r2, #8
 80043e0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043e2:	d04d      	beq.n	8004480 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2208      	movs	r2, #8
 80043e8:	4013      	ands	r3, r2
 80043ea:	d049      	beq.n	8004480 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	2210      	movs	r2, #16
 80043f2:	4013      	ands	r3, r2
 80043f4:	d106      	bne.n	8004404 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff fbc2 	bl	8003b92 <LL_ADC_REG_IsTriggerSourceSWStart>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d02e      	beq.n	8004470 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7e9b      	ldrb	r3, [r3, #26]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d12a      	bne.n	8004470 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2208      	movs	r2, #8
 8004422:	4013      	ands	r3, r2
 8004424:	2b08      	cmp	r3, #8
 8004426:	d123      	bne.n	8004470 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff fcbf 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d110      	bne.n	8004458 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	210c      	movs	r1, #12
 8004442:	438a      	bics	r2, r1
 8004444:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	4a56      	ldr	r2, [pc, #344]	; (80045a4 <HAL_ADC_IRQHandler+0x22c>)
 800444c:	4013      	ands	r3, r2
 800444e:	2201      	movs	r2, #1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	; 0x58
 8004456:	e00b      	b.n	8004470 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	2220      	movs	r2, #32
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	2201      	movs	r2, #1
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f898 	bl	80045a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	220c      	movs	r2, #12
 800447e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2280      	movs	r2, #128	; 0x80
 8004484:	4013      	ands	r3, r2
 8004486:	d012      	beq.n	80044ae <HAL_ADC_IRQHandler+0x136>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2280      	movs	r2, #128	; 0x80
 800448c:	4013      	ands	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	0252      	lsls	r2, r2, #9
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 f889 	bl	80045b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	d014      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x16a>
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4013      	ands	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	2280      	movs	r2, #128	; 0x80
 80044c8:	0292      	lsls	r2, r2, #10
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 fcd4 	bl	8004e80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	0052      	lsls	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	d014      	beq.n	8004516 <HAL_ADC_IRQHandler+0x19e>
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d00f      	beq.n	8004516 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	02d2      	lsls	r2, r2, #11
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fcc2 	bl	8004e90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2210      	movs	r2, #16
 800451a:	4013      	ands	r3, r2
 800451c:	d02b      	beq.n	8004576 <HAL_ADC_IRQHandler+0x1fe>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2210      	movs	r2, #16
 8004522:	4013      	ands	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e008      	b.n	8004546 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fb7e 	bl	8003c3a <LL_ADC_REG_GetDMATransfer>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d001      	beq.n	8004546 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d110      	bne.n	800456e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	00d2      	lsls	r2, r2, #3
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2202      	movs	r2, #2
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 f82d 	bl	80045c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2210      	movs	r2, #16
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	019b      	lsls	r3, r3, #6
 800457c:	4013      	ands	r3, r2
 800457e:	d00d      	beq.n	800459c <HAL_ADC_IRQHandler+0x224>
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	4013      	ands	r3, r2
 8004588:	d008      	beq.n	800459c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 fc8f 	bl	8004eb0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	0192      	lsls	r2, r2, #6
 800459a:	601a      	str	r2, [r3, #0]
  }
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b006      	add	sp, #24
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	fffffefe 	.word	0xfffffefe

080045a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e2:	2317      	movs	r3, #23
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2254      	movs	r2, #84	; 0x54
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x24>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e1c0      	b.n	800497e <HAL_ADC_ConfigChannel+0x3a6>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2254      	movs	r2, #84	; 0x54
 8004600:	2101      	movs	r1, #1
 8004602:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fbd1 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d000      	beq.n	8004614 <HAL_ADC_ConfigChannel+0x3c>
 8004612:	e1a3      	b.n	800495c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d100      	bne.n	800461e <HAL_ADC_ConfigChannel+0x46>
 800461c:	e143      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	429a      	cmp	r2, r3
 8004628:	d004      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800462e:	4ac1      	ldr	r2, [pc, #772]	; (8004934 <HAL_ADC_ConfigChannel+0x35c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0019      	movs	r1, r3
 800463e:	0010      	movs	r0, r2
 8004640:	f7ff fad8 	bl	8003bf4 <LL_ADC_REG_SetSequencerChAdd>
 8004644:	e0c9      	b.n	80047da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	211f      	movs	r1, #31
 8004650:	400b      	ands	r3, r1
 8004652:	210f      	movs	r1, #15
 8004654:	4099      	lsls	r1, r3
 8004656:	000b      	movs	r3, r1
 8004658:	43db      	mvns	r3, r3
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	035b      	lsls	r3, r3, #13
 8004664:	0b5b      	lsrs	r3, r3, #13
 8004666:	d105      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x9c>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	221f      	movs	r2, #31
 8004670:	4013      	ands	r3, r2
 8004672:	e098      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2201      	movs	r2, #1
 800467a:	4013      	ands	r3, r2
 800467c:	d000      	beq.n	8004680 <HAL_ADC_ConfigChannel+0xa8>
 800467e:	e091      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x1cc>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2202      	movs	r2, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d000      	beq.n	800468c <HAL_ADC_ConfigChannel+0xb4>
 800468a:	e089      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x1c8>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2204      	movs	r2, #4
 8004692:	4013      	ands	r3, r2
 8004694:	d000      	beq.n	8004698 <HAL_ADC_ConfigChannel+0xc0>
 8004696:	e081      	b.n	800479c <HAL_ADC_ConfigChannel+0x1c4>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	4013      	ands	r3, r2
 80046a0:	d000      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0xcc>
 80046a2:	e079      	b.n	8004798 <HAL_ADC_ConfigChannel+0x1c0>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	d000      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0xd8>
 80046ae:	e071      	b.n	8004794 <HAL_ADC_ConfigChannel+0x1bc>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2220      	movs	r2, #32
 80046b6:	4013      	ands	r3, r2
 80046b8:	d000      	beq.n	80046bc <HAL_ADC_ConfigChannel+0xe4>
 80046ba:	e069      	b.n	8004790 <HAL_ADC_ConfigChannel+0x1b8>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2240      	movs	r2, #64	; 0x40
 80046c2:	4013      	ands	r3, r2
 80046c4:	d000      	beq.n	80046c8 <HAL_ADC_ConfigChannel+0xf0>
 80046c6:	e061      	b.n	800478c <HAL_ADC_ConfigChannel+0x1b4>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	4013      	ands	r3, r2
 80046d0:	d000      	beq.n	80046d4 <HAL_ADC_ConfigChannel+0xfc>
 80046d2:	e059      	b.n	8004788 <HAL_ADC_ConfigChannel+0x1b0>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d151      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x1ac>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4013      	ands	r3, r2
 80046ea:	d149      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x1a8>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4013      	ands	r3, r2
 80046f6:	d141      	bne.n	800477c <HAL_ADC_ConfigChannel+0x1a4>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	4013      	ands	r3, r2
 8004702:	d139      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x1a0>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	015b      	lsls	r3, r3, #5
 800470c:	4013      	ands	r3, r2
 800470e:	d131      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x19c>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	4013      	ands	r3, r2
 800471a:	d129      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x198>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	4013      	ands	r3, r2
 8004726:	d121      	bne.n	800476c <HAL_ADC_ConfigChannel+0x194>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	4013      	ands	r3, r2
 8004732:	d119      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x190>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	025b      	lsls	r3, r3, #9
 800473c:	4013      	ands	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x18c>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	4013      	ands	r3, r2
 800474a:	d109      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x188>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	02db      	lsls	r3, r3, #11
 8004754:	4013      	ands	r3, r2
 8004756:	d001      	beq.n	800475c <HAL_ADC_ConfigChannel+0x184>
 8004758:	2312      	movs	r3, #18
 800475a:	e024      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 800475c:	2300      	movs	r3, #0
 800475e:	e022      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004760:	2311      	movs	r3, #17
 8004762:	e020      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004764:	2310      	movs	r3, #16
 8004766:	e01e      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004768:	230f      	movs	r3, #15
 800476a:	e01c      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 800476c:	230e      	movs	r3, #14
 800476e:	e01a      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004770:	230d      	movs	r3, #13
 8004772:	e018      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004774:	230c      	movs	r3, #12
 8004776:	e016      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004778:	230b      	movs	r3, #11
 800477a:	e014      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 800477c:	230a      	movs	r3, #10
 800477e:	e012      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004780:	2309      	movs	r3, #9
 8004782:	e010      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004784:	2308      	movs	r3, #8
 8004786:	e00e      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004788:	2307      	movs	r3, #7
 800478a:	e00c      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 800478c:	2306      	movs	r3, #6
 800478e:	e00a      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004790:	2305      	movs	r3, #5
 8004792:	e008      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004794:	2304      	movs	r3, #4
 8004796:	e006      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004798:	2303      	movs	r3, #3
 800479a:	e004      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 800479c:	2302      	movs	r3, #2
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1ce>
 80047a4:	2300      	movs	r3, #0
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	6852      	ldr	r2, [r2, #4]
 80047aa:	201f      	movs	r0, #31
 80047ac:	4002      	ands	r2, r0
 80047ae:	4093      	lsls	r3, r2
 80047b0:	000a      	movs	r2, r1
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d808      	bhi.n	80047da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	001a      	movs	r2, r3
 80047d6:	f7ff f9ed 	bl	8003bb4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	001a      	movs	r2, r3
 80047e8:	f7ff fa34 	bl	8003c54 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db00      	blt.n	80047f6 <HAL_ADC_ConfigChannel+0x21e>
 80047f4:	e0bc      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f6:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff f989 	bl	8003b10 <LL_ADC_GetCommonPathInternalCh>
 80047fe:	0003      	movs	r3, r0
 8004800:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a4d      	ldr	r2, [pc, #308]	; (800493c <HAL_ADC_ConfigChannel+0x364>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d122      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004814:	d11d      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	0412      	lsls	r2, r2, #16
 800481c:	4313      	orrs	r3, r2
 800481e:	4a46      	ldr	r2, [pc, #280]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 8004820:	0019      	movs	r1, r3
 8004822:	0010      	movs	r0, r2
 8004824:	f7ff f960 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004828:	4b45      	ldr	r3, [pc, #276]	; (8004940 <HAL_ADC_ConfigChannel+0x368>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4945      	ldr	r1, [pc, #276]	; (8004944 <HAL_ADC_ConfigChannel+0x36c>)
 800482e:	0018      	movs	r0, r3
 8004830:	f7fb fc82 	bl	8000138 <__udivsi3>
 8004834:	0003      	movs	r3, r0
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	0013      	movs	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	189b      	adds	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004842:	e002      	b.n	800484a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b01      	subs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f9      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004850:	e08e      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3c      	ldr	r2, [pc, #240]	; (8004948 <HAL_ADC_ConfigChannel+0x370>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10e      	bne.n	800487a <HAL_ADC_ConfigChannel+0x2a2>
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	045b      	lsls	r3, r3, #17
 8004862:	4013      	ands	r3, r2
 8004864:	d109      	bne.n	800487a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	0452      	lsls	r2, r2, #17
 800486c:	4313      	orrs	r3, r2
 800486e:	4a32      	ldr	r2, [pc, #200]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 8004870:	0019      	movs	r1, r3
 8004872:	0010      	movs	r0, r2
 8004874:	f7ff f938 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
 8004878:	e07a      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a33      	ldr	r2, [pc, #204]	; (800494c <HAL_ADC_ConfigChannel+0x374>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d000      	beq.n	8004886 <HAL_ADC_ConfigChannel+0x2ae>
 8004884:	e074      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	03db      	lsls	r3, r3, #15
 800488c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800488e:	d000      	beq.n	8004892 <HAL_ADC_ConfigChannel+0x2ba>
 8004890:	e06e      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2280      	movs	r2, #128	; 0x80
 8004896:	03d2      	lsls	r2, r2, #15
 8004898:	4313      	orrs	r3, r2
 800489a:	4a27      	ldr	r2, [pc, #156]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 800489c:	0019      	movs	r1, r3
 800489e:	0010      	movs	r0, r2
 80048a0:	f7ff f922 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
 80048a4:	e064      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d004      	beq.n	80048bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_ADC_ConfigChannel+0x35c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0019      	movs	r1, r3
 80048c6:	0010      	movs	r0, r2
 80048c8:	f7ff f9a5 	bl	8003c16 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da4d      	bge.n	8004970 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff f91a 	bl	8003b10 <LL_ADC_GetCommonPathInternalCh>
 80048dc:	0003      	movs	r3, r0
 80048de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a15      	ldr	r2, [pc, #84]	; (800493c <HAL_ADC_ConfigChannel+0x364>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_ADC_ConfigChannel+0x378>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	4a11      	ldr	r2, [pc, #68]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 80048f2:	0019      	movs	r1, r3
 80048f4:	0010      	movs	r0, r2
 80048f6:	f7ff f8f7 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
 80048fa:	e039      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <HAL_ADC_ConfigChannel+0x370>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <HAL_ADC_ConfigChannel+0x37c>)
 800490a:	4013      	ands	r3, r2
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 800490e:	0019      	movs	r1, r3
 8004910:	0010      	movs	r0, r2
 8004912:	f7ff f8e9 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
 8004916:	e02b      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0b      	ldr	r2, [pc, #44]	; (800494c <HAL_ADC_ConfigChannel+0x374>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d126      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <HAL_ADC_ConfigChannel+0x380>)
 8004926:	4013      	ands	r3, r2
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <HAL_ADC_ConfigChannel+0x360>)
 800492a:	0019      	movs	r1, r3
 800492c:	0010      	movs	r0, r2
 800492e:	f7ff f8db 	bl	8003ae8 <LL_ADC_SetCommonPathInternalCh>
 8004932:	e01d      	b.n	8004970 <HAL_ADC_ConfigChannel+0x398>
 8004934:	80000004 	.word	0x80000004
 8004938:	40012708 	.word	0x40012708
 800493c:	b0001000 	.word	0xb0001000
 8004940:	20000008 	.word	0x20000008
 8004944:	00030d40 	.word	0x00030d40
 8004948:	b8004000 	.word	0xb8004000
 800494c:	b4002000 	.word	0xb4002000
 8004950:	ff7fffff 	.word	0xff7fffff
 8004954:	feffffff 	.word	0xfeffffff
 8004958:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	2220      	movs	r2, #32
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004968:	2317      	movs	r3, #23
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2254      	movs	r2, #84	; 0x54
 8004974:	2100      	movs	r1, #0
 8004976:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004978:	2317      	movs	r3, #23
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	781b      	ldrb	r3, [r3, #0]
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b006      	add	sp, #24
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)

08004988 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fa0b 	bl	8003db0 <LL_ADC_REG_IsConversionOngoing>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d031      	beq.n	8004a02 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7ff f9cf 	bl	8003d46 <LL_ADC_IsDisableOngoing>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d104      	bne.n	80049b6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7ff f9eb 	bl	8003d8c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049b6:	f7ff f869 	bl	8003a8c <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80049be:	e01a      	b.n	80049f6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049c0:	f7ff f864 	bl	8003a8c <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d913      	bls.n	80049f6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2204      	movs	r2, #4
 80049d6:	4013      	ands	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	2210      	movs	r2, #16
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	2201      	movs	r2, #1
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e006      	b.n	8004a04 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2204      	movs	r2, #4
 80049fe:	4013      	ands	r3, r2
 8004a00:	d1de      	bne.n	80049c0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff f981 	bl	8003d24 <LL_ADC_IsEnabled>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	d000      	beq.n	8004a28 <ADC_Enable+0x1c>
 8004a26:	e069      	b.n	8004afc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4a36      	ldr	r2, [pc, #216]	; (8004b08 <ADC_Enable+0xfc>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	d00d      	beq.n	8004a50 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	2210      	movs	r2, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	2201      	movs	r2, #1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e056      	b.n	8004afe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7ff f941 	bl	8003cdc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <ADC_Enable+0x100>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7ff f857 	bl	8003b10 <LL_ADC_GetCommonPathInternalCh>
 8004a62:	0002      	movs	r2, r0
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <ADC_Enable+0x104>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4928      	ldr	r1, [pc, #160]	; (8004b14 <ADC_Enable+0x108>)
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7fb fb60 	bl	8000138 <__udivsi3>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a7e:	e002      	b.n	8004a86 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f9      	bne.n	8004a80 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7e5b      	ldrb	r3, [r3, #25]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d033      	beq.n	8004afc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a94:	f7fe fffa 	bl	8003a8c <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9c:	e027      	b.n	8004aee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7ff f93e 	bl	8003d24 <LL_ADC_IsEnabled>
 8004aa8:	1e03      	subs	r3, r0, #0
 8004aaa:	d104      	bne.n	8004ab6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7ff f913 	bl	8003cdc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ab6:	f7fe ffe9 	bl	8003a8c <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d914      	bls.n	8004aee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d00d      	beq.n	8004aee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e007      	b.n	8004afe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d1d0      	bne.n	8004a9e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b004      	add	sp, #16
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	80000017 	.word	0x80000017
 8004b0c:	40012708 	.word	0x40012708
 8004b10:	20000008 	.word	0x20000008
 8004b14:	00030d40 	.word	0x00030d40

08004b18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff f90e 	bl	8003d46 <LL_ADC_IsDisableOngoing>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7ff f8f6 	bl	8003d24 <LL_ADC_IsEnabled>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d046      	beq.n	8004bca <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d143      	bne.n	8004bca <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2205      	movs	r2, #5
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10d      	bne.n	8004b6c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff f8d3 	bl	8003d00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b62:	f7fe ff93 	bl	8003a8c <HAL_GetTick>
 8004b66:	0003      	movs	r3, r0
 8004b68:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b6a:	e028      	b.n	8004bbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	2210      	movs	r2, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e021      	b.n	8004bcc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b88:	f7fe ff80 	bl	8003a8c <HAL_GetTick>
 8004b8c:	0002      	movs	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d913      	bls.n	8004bbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d00d      	beq.n	8004bbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e006      	b.n	8004bcc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d1de      	bne.n	8004b88 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b004      	add	sp, #16
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <LL_ADC_SetCalibrationFactor>:
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	22b4      	movs	r2, #180	; 0xb4
 8004be2:	589b      	ldr	r3, [r3, r2]
 8004be4:	227f      	movs	r2, #127	; 0x7f
 8004be6:	4393      	bics	r3, r2
 8004be8:	001a      	movs	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	21b4      	movs	r1, #180	; 0xb4
 8004bf2:	505a      	str	r2, [r3, r1]
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <LL_ADC_GetCalibrationFactor>:
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	22b4      	movs	r2, #180	; 0xb4
 8004c08:	589b      	ldr	r3, [r3, r2]
 8004c0a:	227f      	movs	r2, #127	; 0x7f
 8004c0c:	4013      	ands	r3, r2
}
 8004c0e:	0018      	movs	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <LL_ADC_Enable>:
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <LL_ADC_Enable+0x20>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	2201      	movs	r2, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	7fffffe8 	.word	0x7fffffe8

08004c3c <LL_ADC_Disable>:
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <LL_ADC_Disable+0x20>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	7fffffe8 	.word	0x7fffffe8

08004c60 <LL_ADC_IsEnabled>:
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <LL_ADC_IsEnabled+0x18>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <LL_ADC_IsEnabled+0x1a>
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <LL_ADC_StartCalibration>:
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <LL_ADC_StartCalibration+0x24>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	0612      	lsls	r2, r2, #24
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b002      	add	sp, #8
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	7fffffe8 	.word	0x7fffffe8

08004cac <LL_ADC_IsCalibrationOnGoing>:
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	0fdb      	lsrs	r3, r3, #31
 8004cba:	07da      	lsls	r2, r3, #31
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d101      	bne.n	8004cc8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2254      	movs	r2, #84	; 0x54
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_ADCEx_Calibration_Start+0x1e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0ba      	b.n	8004e68 <HAL_ADCEx_Calibration_Start+0x194>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2254      	movs	r2, #84	; 0x54
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004cfa:	2317      	movs	r3, #23
 8004cfc:	18fc      	adds	r4, r7, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7ff ff09 	bl	8004b18 <ADC_Disable>
 8004d06:	0003      	movs	r3, r0
 8004d08:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff ffa6 	bl	8004c60 <LL_ADC_IsEnabled>
 8004d14:	1e03      	subs	r3, r0, #0
 8004d16:	d000      	beq.n	8004d1a <HAL_ADCEx_Calibration_Start+0x46>
 8004d18:	e099      	b.n	8004e4e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	4a54      	ldr	r2, [pc, #336]	; (8004e70 <HAL_ADCEx_Calibration_Start+0x19c>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	2202      	movs	r2, #2
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a50      	ldr	r2, [pc, #320]	; (8004e74 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	494d      	ldr	r1, [pc, #308]	; (8004e78 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e02d      	b.n	8004da8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff ff97 	bl	8004c84 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d56:	e014      	b.n	8004d82 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a46      	ldr	r2, [pc, #280]	; (8004e7c <HAL_ADCEx_Calibration_Start+0x1a8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d90d      	bls.n	8004d82 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	2212      	movs	r2, #18
 8004d6c:	4393      	bics	r3, r2
 8004d6e:	2210      	movs	r2, #16
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2254      	movs	r2, #84	; 0x54
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e072      	b.n	8004e68 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	0018      	movs	r0, r3
 8004d88:	f7ff ff90 	bl	8004cac <LL_ADC_IsCalibrationOnGoing>
 8004d8c:	1e03      	subs	r3, r0, #0
 8004d8e:	d1e3      	bne.n	8004d58 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7ff ff31 	bl	8004bfc <LL_ADC_GetCalibrationFactor>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d9ce      	bls.n	8004d4c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004dae:	69f9      	ldr	r1, [r7, #28]
 8004db0:	69b8      	ldr	r0, [r7, #24]
 8004db2:	f7fb f9c1 	bl	8000138 <__udivsi3>
 8004db6:	0003      	movs	r3, r0
 8004db8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7ff ff2a 	bl	8004c18 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	0011      	movs	r1, r2
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff ff01 	bl	8004bd4 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7ff ff30 	bl	8004c3c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ddc:	f7fe fe56 	bl	8003a8c <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004de4:	e01b      	b.n	8004e1e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004de6:	f7fe fe51 	bl	8003a8c <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d914      	bls.n	8004e1e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff ff31 	bl	8004c60 <LL_ADC_IsEnabled>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d00d      	beq.n	8004e1e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	2210      	movs	r2, #16
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e12:	2201      	movs	r2, #1
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e024      	b.n	8004e68 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7ff ff1c 	bl	8004c60 <LL_ADC_IsEnabled>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d1dc      	bne.n	8004de6 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68d9      	ldr	r1, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	2203      	movs	r2, #3
 8004e42:	4393      	bics	r3, r2
 8004e44:	2201      	movs	r2, #1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e4c:	e005      	b.n	8004e5a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	2210      	movs	r2, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2254      	movs	r2, #84	; 0x54
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004e62:	2317      	movs	r3, #23
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b009      	add	sp, #36	; 0x24
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	fffffefd 	.word	0xfffffefd
 8004e74:	00008003 	.word	0x00008003
 8004e78:	ffff7ffc 	.word	0xffff7ffc
 8004e7c:	0002f1ff 	.word	0x0002f1ff

08004e80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	1dfb      	adds	r3, r7, #7
 8004eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ecc:	1dfb      	adds	r3, r7, #7
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed2:	d809      	bhi.n	8004ee8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	001a      	movs	r2, r3
 8004eda:	231f      	movs	r3, #31
 8004edc:	401a      	ands	r2, r3
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <__NVIC_EnableIRQ+0x30>)
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	4091      	lsls	r1, r2
 8004ee4:	000a      	movs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	0002      	movs	r2, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f02:	1dfb      	adds	r3, r7, #7
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b7f      	cmp	r3, #127	; 0x7f
 8004f08:	d828      	bhi.n	8004f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f0a:	4a2f      	ldr	r2, [pc, #188]	; (8004fc8 <__NVIC_SetPriority+0xd4>)
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	33c0      	adds	r3, #192	; 0xc0
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	589b      	ldr	r3, [r3, r2]
 8004f1a:	1dfa      	adds	r2, r7, #7
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	0011      	movs	r1, r2
 8004f20:	2203      	movs	r2, #3
 8004f22:	400a      	ands	r2, r1
 8004f24:	00d2      	lsls	r2, r2, #3
 8004f26:	21ff      	movs	r1, #255	; 0xff
 8004f28:	4091      	lsls	r1, r2
 8004f2a:	000a      	movs	r2, r1
 8004f2c:	43d2      	mvns	r2, r2
 8004f2e:	401a      	ands	r2, r3
 8004f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	22ff      	movs	r2, #255	; 0xff
 8004f38:	401a      	ands	r2, r3
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	2303      	movs	r3, #3
 8004f42:	4003      	ands	r3, r0
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f48:	481f      	ldr	r0, [pc, #124]	; (8004fc8 <__NVIC_SetPriority+0xd4>)
 8004f4a:	1dfb      	adds	r3, r7, #7
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	430a      	orrs	r2, r1
 8004f54:	33c0      	adds	r3, #192	; 0xc0
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f5a:	e031      	b.n	8004fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <__NVIC_SetPriority+0xd8>)
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	0019      	movs	r1, r3
 8004f64:	230f      	movs	r3, #15
 8004f66:	400b      	ands	r3, r1
 8004f68:	3b08      	subs	r3, #8
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	3306      	adds	r3, #6
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	18d3      	adds	r3, r2, r3
 8004f72:	3304      	adds	r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	1dfa      	adds	r2, r7, #7
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	400a      	ands	r2, r1
 8004f80:	00d2      	lsls	r2, r2, #3
 8004f82:	21ff      	movs	r1, #255	; 0xff
 8004f84:	4091      	lsls	r1, r2
 8004f86:	000a      	movs	r2, r1
 8004f88:	43d2      	mvns	r2, r2
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	401a      	ands	r2, r3
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	4003      	ands	r3, r0
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fa4:	4809      	ldr	r0, [pc, #36]	; (8004fcc <__NVIC_SetPriority+0xd8>)
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	001c      	movs	r4, r3
 8004fac:	230f      	movs	r3, #15
 8004fae:	4023      	ands	r3, r4
 8004fb0:	3b08      	subs	r3, #8
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	3306      	adds	r3, #6
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	18c3      	adds	r3, r0, r3
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b003      	add	sp, #12
 8004fc6:	bd90      	pop	{r4, r7, pc}
 8004fc8:	e000e100 	.word	0xe000e100
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd4:	f3bf 8f4f 	dsb	sy
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fda:	4b04      	ldr	r3, [pc, #16]	; (8004fec <__NVIC_SystemReset+0x1c>)
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <__NVIC_SystemReset+0x20>)
 8004fde:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe0:	f3bf 8f4f 	dsb	sy
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	e7fd      	b.n	8004fe6 <__NVIC_SystemReset+0x16>
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	e000ed00 	.word	0xe000ed00
 8004ff0:	05fa0004 	.word	0x05fa0004

08004ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1e5a      	subs	r2, r3, #1
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	045b      	lsls	r3, r3, #17
 8005004:	429a      	cmp	r2, r3
 8005006:	d301      	bcc.n	800500c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005008:	2301      	movs	r3, #1
 800500a:	e010      	b.n	800502e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <SysTick_Config+0x44>)
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	3a01      	subs	r2, #1
 8005012:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005014:	2301      	movs	r3, #1
 8005016:	425b      	negs	r3, r3
 8005018:	2103      	movs	r1, #3
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff ff6a 	bl	8004ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <SysTick_Config+0x44>)
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <SysTick_Config+0x44>)
 8005028:	2207      	movs	r2, #7
 800502a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800502c:	2300      	movs	r3, #0
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b002      	add	sp, #8
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	e000e010 	.word	0xe000e010

0800503c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	210f      	movs	r1, #15
 8005048:	187b      	adds	r3, r7, r1
 800504a:	1c02      	adds	r2, r0, #0
 800504c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	187b      	adds	r3, r7, r1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b25b      	sxtb	r3, r3
 8005056:	0011      	movs	r1, r2
 8005058:	0018      	movs	r0, r3
 800505a:	f7ff ff4b 	bl	8004ef4 <__NVIC_SetPriority>
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	0002      	movs	r2, r0
 800506e:	1dfb      	adds	r3, r7, #7
 8005070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005072:	1dfb      	adds	r3, r7, #7
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b25b      	sxtb	r3, r3
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff ff21 	bl	8004ec0 <__NVIC_EnableIRQ>
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b002      	add	sp, #8
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800508a:	f7ff ffa1 	bl	8004fd0 <__NVIC_SystemReset>

0800508e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff ffab 	bl	8004ff4 <SysTick_Config>
 800509e:	0003      	movs	r3, r0
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b002      	add	sp, #8
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e077      	b.n	80051aa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <HAL_DMA_Init+0x10c>)
 80050c0:	4694      	mov	ip, r2
 80050c2:	4463      	add	r3, ip
 80050c4:	2114      	movs	r1, #20
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fb f836 	bl	8000138 <__udivsi3>
 80050cc:	0003      	movs	r3, r0
 80050ce:	009a      	lsls	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2225      	movs	r2, #37	; 0x25
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_DMA_Init+0x110>)
 80050e8:	400a      	ands	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f000 f9c7 	bl	80054b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	01db      	lsls	r3, r3, #7
 8005132:	429a      	cmp	r2, r3
 8005134:	d102      	bne.n	800513c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	213f      	movs	r1, #63	; 0x3f
 8005146:	400a      	ands	r2, r1
 8005148:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005152:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d011      	beq.n	8005180 <HAL_DMA_Init+0xd8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d80d      	bhi.n	8005180 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f9d2 	bl	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	e008      	b.n	8005192 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2225      	movs	r2, #37	; 0x25
 800519c:	2101      	movs	r1, #1
 800519e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	2100      	movs	r1, #0
 80051a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	bffdfff8 	.word	0xbffdfff8
 80051b8:	ffff800f 	.word	0xffff800f

080051bc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e050      	b.n	8005270 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2225      	movs	r2, #37	; 0x25
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d008      	beq.n	80051ec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	2100      	movs	r1, #0
 80051e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e041      	b.n	8005270 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	210e      	movs	r1, #14
 80051f8:	438a      	bics	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	491c      	ldr	r1, [pc, #112]	; (8005278 <HAL_DMA_Abort+0xbc>)
 8005208:	400a      	ands	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_DMA_Abort+0xc0>)
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	221c      	movs	r2, #28
 8005226:	4013      	ands	r3, r2
 8005228:	2201      	movs	r2, #1
 800522a:	409a      	lsls	r2, r3
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_DMA_Abort+0xc0>)
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800523a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524e:	490a      	ldr	r1, [pc, #40]	; (8005278 <HAL_DMA_Abort+0xbc>)
 8005250:	400a      	ands	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800525c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2225      	movs	r2, #37	; 0x25
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2224      	movs	r2, #36	; 0x24
 800526a:	2100      	movs	r1, #0
 800526c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}
 8005278:	fffffeff 	.word	0xfffffeff
 800527c:	40020000 	.word	0x40020000

08005280 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	210f      	movs	r1, #15
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2225      	movs	r2, #37	; 0x25
 8005294:	5c9b      	ldrb	r3, [r3, r2]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d006      	beq.n	80052aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e049      	b.n	800533e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	210e      	movs	r1, #14
 80052b6:	438a      	bics	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	438a      	bics	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	491d      	ldr	r1, [pc, #116]	; (800534c <HAL_DMA_Abort_IT+0xcc>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <HAL_DMA_Abort_IT+0xd0>)
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	221c      	movs	r2, #28
 80052e4:	4013      	ands	r3, r2
 80052e6:	2201      	movs	r2, #1
 80052e8:	409a      	lsls	r2, r3
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_DMA_Abort_IT+0xd0>)
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80052f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	490f      	ldr	r1, [pc, #60]	; (800534c <HAL_DMA_Abort_IT+0xcc>)
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800531a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2225      	movs	r2, #37	; 0x25
 8005320:	2101      	movs	r1, #1
 8005322:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	; 0x24
 8005328:	2100      	movs	r1, #0
 800532a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	0010      	movs	r0, r2
 800533c:	4798      	blx	r3
    }
  }
  return status;
 800533e:	230f      	movs	r3, #15
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	fffffeff 	.word	0xfffffeff
 8005350:	40020000 	.word	0x40020000

08005354 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800535c:	4b55      	ldr	r3, [pc, #340]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	221c      	movs	r2, #28
 8005370:	4013      	ands	r3, r2
 8005372:	2204      	movs	r2, #4
 8005374:	409a      	lsls	r2, r3
 8005376:	0013      	movs	r3, r2
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	d027      	beq.n	80053ce <HAL_DMA_IRQHandler+0x7a>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2204      	movs	r2, #4
 8005382:	4013      	ands	r3, r2
 8005384:	d023      	beq.n	80053ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	4013      	ands	r3, r2
 8005390:	d107      	bne.n	80053a2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2104      	movs	r1, #4
 800539e:	438a      	bics	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80053a2:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 80053a4:	6859      	ldr	r1, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	221c      	movs	r2, #28
 80053ac:	4013      	ands	r3, r2
 80053ae:	2204      	movs	r2, #4
 80053b0:	409a      	lsls	r2, r3
 80053b2:	4b40      	ldr	r3, [pc, #256]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d100      	bne.n	80053c2 <HAL_DMA_IRQHandler+0x6e>
 80053c0:	e073      	b.n	80054aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	0010      	movs	r0, r2
 80053ca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053cc:	e06d      	b.n	80054aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	221c      	movs	r2, #28
 80053d4:	4013      	ands	r3, r2
 80053d6:	2202      	movs	r2, #2
 80053d8:	409a      	lsls	r2, r3
 80053da:	0013      	movs	r3, r2
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4013      	ands	r3, r2
 80053e0:	d02e      	beq.n	8005440 <HAL_DMA_IRQHandler+0xec>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2202      	movs	r2, #2
 80053e6:	4013      	ands	r3, r2
 80053e8:	d02a      	beq.n	8005440 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2220      	movs	r2, #32
 80053f2:	4013      	ands	r3, r2
 80053f4:	d10b      	bne.n	800540e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	210a      	movs	r1, #10
 8005402:	438a      	bics	r2, r1
 8005404:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2225      	movs	r2, #37	; 0x25
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	221c      	movs	r2, #28
 8005418:	4013      	ands	r3, r2
 800541a:	2202      	movs	r2, #2
 800541c:	409a      	lsls	r2, r3
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	2100      	movs	r1, #0
 800542a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d03a      	beq.n	80054aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	0010      	movs	r0, r2
 800543c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800543e:	e034      	b.n	80054aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	221c      	movs	r2, #28
 8005446:	4013      	ands	r3, r2
 8005448:	2208      	movs	r2, #8
 800544a:	409a      	lsls	r2, r3
 800544c:	0013      	movs	r3, r2
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4013      	ands	r3, r2
 8005452:	d02b      	beq.n	80054ac <HAL_DMA_IRQHandler+0x158>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2208      	movs	r2, #8
 8005458:	4013      	ands	r3, r2
 800545a:	d027      	beq.n	80054ac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	210e      	movs	r1, #14
 8005468:	438a      	bics	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	221c      	movs	r2, #28
 8005476:	4013      	ands	r3, r2
 8005478:	2201      	movs	r2, #1
 800547a:	409a      	lsls	r2, r3
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <HAL_DMA_IRQHandler+0x160>)
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2225      	movs	r2, #37	; 0x25
 800548c:	2101      	movs	r1, #1
 800548e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	2100      	movs	r1, #0
 8005496:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	0010      	movs	r0, r2
 80054a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46c0      	nop			; (mov r8, r8)
}
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b004      	add	sp, #16
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40020000 	.word	0x40020000

080054b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80054c8:	4694      	mov	ip, r2
 80054ca:	4463      	add	r3, ip
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	001a      	movs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	001a      	movs	r2, r3
 80054da:	23ff      	movs	r3, #255	; 0xff
 80054dc:	4013      	ands	r3, r2
 80054de:	3b08      	subs	r3, #8
 80054e0:	2114      	movs	r1, #20
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fa fe28 	bl	8000138 <__udivsi3>
 80054e8:	0003      	movs	r3, r0
 80054ea:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a07      	ldr	r2, [pc, #28]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80054f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	221f      	movs	r2, #31
 80054f6:	4013      	ands	r3, r2
 80054f8:	2201      	movs	r2, #1
 80054fa:	409a      	lsls	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	10008200 	.word	0x10008200
 800550c:	40020880 	.word	0x40020880

08005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	223f      	movs	r2, #63	; 0x3f
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005526:	4694      	mov	ip, r2
 8005528:	4463      	add	r3, ip
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	001a      	movs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005536:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	4013      	ands	r3, r2
 8005540:	2201      	movs	r2, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b004      	add	sp, #16
 800554e:	bd80      	pop	{r7, pc}
 8005550:	1000823f 	.word	0x1000823f
 8005554:	40020940 	.word	0x40020940

08005558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005566:	e147      	b.n	80057f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2101      	movs	r1, #1
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4091      	lsls	r1, r2
 8005572:	000a      	movs	r2, r1
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d100      	bne.n	8005580 <HAL_GPIO_Init+0x28>
 800557e:	e138      	b.n	80057f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2203      	movs	r2, #3
 8005586:	4013      	ands	r3, r2
 8005588:	2b01      	cmp	r3, #1
 800558a:	d005      	beq.n	8005598 <HAL_GPIO_Init+0x40>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2203      	movs	r2, #3
 8005592:	4013      	ands	r3, r2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d130      	bne.n	80055fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	409a      	lsls	r2, r3
 80055a6:	0013      	movs	r3, r2
 80055a8:	43da      	mvns	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4013      	ands	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	409a      	lsls	r2, r3
 80055ba:	0013      	movs	r3, r2
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ce:	2201      	movs	r2, #1
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	409a      	lsls	r2, r3
 80055d4:	0013      	movs	r3, r2
 80055d6:	43da      	mvns	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	2201      	movs	r2, #1
 80055e6:	401a      	ands	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	409a      	lsls	r2, r3
 80055ec:	0013      	movs	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2203      	movs	r2, #3
 8005600:	4013      	ands	r3, r2
 8005602:	2b03      	cmp	r3, #3
 8005604:	d017      	beq.n	8005636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	409a      	lsls	r2, r3
 8005614:	0013      	movs	r3, r2
 8005616:	43da      	mvns	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	0013      	movs	r3, r2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2203      	movs	r2, #3
 800563c:	4013      	ands	r3, r2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d123      	bne.n	800568a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	08da      	lsrs	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3208      	adds	r2, #8
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	58d3      	ldr	r3, [r2, r3]
 800564e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2207      	movs	r2, #7
 8005654:	4013      	ands	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	409a      	lsls	r2, r3
 800565c:	0013      	movs	r3, r2
 800565e:	43da      	mvns	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2107      	movs	r1, #7
 800566e:	400b      	ands	r3, r1
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	409a      	lsls	r2, r3
 8005674:	0013      	movs	r3, r2
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	08da      	lsrs	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3208      	adds	r2, #8
 8005684:	0092      	lsls	r2, r2, #2
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	2203      	movs	r2, #3
 8005696:	409a      	lsls	r2, r3
 8005698:	0013      	movs	r3, r2
 800569a:	43da      	mvns	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2203      	movs	r2, #3
 80056a8:	401a      	ands	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	409a      	lsls	r2, r3
 80056b0:	0013      	movs	r3, r2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	23c0      	movs	r3, #192	; 0xc0
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	4013      	ands	r3, r2
 80056c8:	d100      	bne.n	80056cc <HAL_GPIO_Init+0x174>
 80056ca:	e092      	b.n	80057f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80056cc:	4a50      	ldr	r2, [pc, #320]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	3318      	adds	r3, #24
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	589b      	ldr	r3, [r3, r2]
 80056d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2203      	movs	r2, #3
 80056de:	4013      	ands	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	220f      	movs	r2, #15
 80056e4:	409a      	lsls	r2, r3
 80056e6:	0013      	movs	r3, r2
 80056e8:	43da      	mvns	r2, r3
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	23a0      	movs	r3, #160	; 0xa0
 80056f4:	05db      	lsls	r3, r3, #23
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d013      	beq.n	8005722 <HAL_GPIO_Init+0x1ca>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a45      	ldr	r2, [pc, #276]	; (8005814 <HAL_GPIO_Init+0x2bc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00d      	beq.n	800571e <HAL_GPIO_Init+0x1c6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a44      	ldr	r2, [pc, #272]	; (8005818 <HAL_GPIO_Init+0x2c0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <HAL_GPIO_Init+0x1c2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a43      	ldr	r2, [pc, #268]	; (800581c <HAL_GPIO_Init+0x2c4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_GPIO_Init+0x1be>
 8005712:	2303      	movs	r3, #3
 8005714:	e006      	b.n	8005724 <HAL_GPIO_Init+0x1cc>
 8005716:	2305      	movs	r3, #5
 8005718:	e004      	b.n	8005724 <HAL_GPIO_Init+0x1cc>
 800571a:	2302      	movs	r3, #2
 800571c:	e002      	b.n	8005724 <HAL_GPIO_Init+0x1cc>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_GPIO_Init+0x1cc>
 8005722:	2300      	movs	r3, #0
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	2103      	movs	r1, #3
 8005728:	400a      	ands	r2, r1
 800572a:	00d2      	lsls	r2, r2, #3
 800572c:	4093      	lsls	r3, r2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005734:	4936      	ldr	r1, [pc, #216]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3318      	adds	r3, #24
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005742:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43da      	mvns	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	035b      	lsls	r3, r3, #13
 800575a:	4013      	ands	r3, r2
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005766:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43da      	mvns	r2, r3
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	039b      	lsls	r3, r3, #14
 8005784:	4013      	ands	r3, r2
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005790:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005796:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 8005798:	2384      	movs	r3, #132	; 0x84
 800579a:	58d3      	ldr	r3, [r2, r3]
 800579c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43da      	mvns	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4013      	ands	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	4013      	ands	r3, r2
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057bc:	4914      	ldr	r1, [pc, #80]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 80057be:	2284      	movs	r2, #132	; 0x84
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80057c4:	4a12      	ldr	r2, [pc, #72]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	58d3      	ldr	r3, [r2, r3]
 80057ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	43da      	mvns	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	025b      	lsls	r3, r3, #9
 80057de:	4013      	ands	r3, r2
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057ea:	4909      	ldr	r1, [pc, #36]	; (8005810 <HAL_GPIO_Init+0x2b8>)
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	3301      	adds	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	40da      	lsrs	r2, r3
 8005800:	1e13      	subs	r3, r2, #0
 8005802:	d000      	beq.n	8005806 <HAL_GPIO_Init+0x2ae>
 8005804:	e6b0      	b.n	8005568 <HAL_GPIO_Init+0x10>
  }
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b006      	add	sp, #24
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40021800 	.word	0x40021800
 8005814:	50000400 	.word	0x50000400
 8005818:	50000800 	.word	0x50000800
 800581c:	50000c00 	.word	0x50000c00

08005820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	0008      	movs	r0, r1
 800582a:	0011      	movs	r1, r2
 800582c:	1cbb      	adds	r3, r7, #2
 800582e:	1c02      	adds	r2, r0, #0
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	1c7b      	adds	r3, r7, #1
 8005834:	1c0a      	adds	r2, r1, #0
 8005836:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005838:	1c7b      	adds	r3, r7, #1
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005840:	1cbb      	adds	r3, r7, #2
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005848:	e003      	b.n	8005852 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800584a:	1cbb      	adds	r3, r7, #2
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800586a:	4013      	ands	r3, r2
 800586c:	0019      	movs	r1, r3
 800586e:	4b17      	ldr	r3, [pc, #92]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d11f      	bne.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	0013      	movs	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	189b      	adds	r3, r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4912      	ldr	r1, [pc, #72]	; (80058d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800588e:	0018      	movs	r0, r3
 8005890:	f7fa fc52 	bl	8000138 <__udivsi3>
 8005894:	0003      	movs	r3, r0
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800589a:	e008      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e001      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e009      	b.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	401a      	ands	r2, r3
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	429a      	cmp	r2, r3
 80058be:	d0ed      	beq.n	800589c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b004      	add	sp, #16
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	40007000 	.word	0x40007000
 80058d0:	fffff9ff 	.word	0xfffff9ff
 80058d4:	20000008 	.word	0x20000008
 80058d8:	000f4240 	.word	0x000f4240

080058dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	23e0      	movs	r3, #224	; 0xe0
 80058e6:	01db      	lsls	r3, r3, #7
 80058e8:	4013      	ands	r3, r2
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e2f3      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d100      	bne.n	8005912 <HAL_RCC_OscConfig+0x1e>
 8005910:	e07c      	b.n	8005a0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	4bc3      	ldr	r3, [pc, #780]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2238      	movs	r2, #56	; 0x38
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591c:	4bc0      	ldr	r3, [pc, #768]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2203      	movs	r2, #3
 8005922:	4013      	ands	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d102      	bne.n	8005932 <HAL_RCC_OscConfig+0x3e>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d002      	beq.n	8005938 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10b      	bne.n	8005950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	4bb9      	ldr	r3, [pc, #740]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	4013      	ands	r3, r2
 8005942:	d062      	beq.n	8005a0a <HAL_RCC_OscConfig+0x116>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d15e      	bne.n	8005a0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e2ce      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	025b      	lsls	r3, r3, #9
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0x78>
 800595c:	4bb0      	ldr	r3, [pc, #704]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4baf      	ldr	r3, [pc, #700]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	0249      	lsls	r1, r1, #9
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e020      	b.n	80059ae <HAL_RCC_OscConfig+0xba>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	23a0      	movs	r3, #160	; 0xa0
 8005972:	02db      	lsls	r3, r3, #11
 8005974:	429a      	cmp	r2, r3
 8005976:	d10e      	bne.n	8005996 <HAL_RCC_OscConfig+0xa2>
 8005978:	4ba9      	ldr	r3, [pc, #676]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4ba8      	ldr	r3, [pc, #672]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	02c9      	lsls	r1, r1, #11
 8005982:	430a      	orrs	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	4ba6      	ldr	r3, [pc, #664]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4ba5      	ldr	r3, [pc, #660]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	0249      	lsls	r1, r1, #9
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e00b      	b.n	80059ae <HAL_RCC_OscConfig+0xba>
 8005996:	4ba2      	ldr	r3, [pc, #648]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4ba1      	ldr	r3, [pc, #644]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 800599c:	49a1      	ldr	r1, [pc, #644]	; (8005c24 <HAL_RCC_OscConfig+0x330>)
 800599e:	400a      	ands	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	4b9f      	ldr	r3, [pc, #636]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b9e      	ldr	r3, [pc, #632]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 80059a8:	499f      	ldr	r1, [pc, #636]	; (8005c28 <HAL_RCC_OscConfig+0x334>)
 80059aa:	400a      	ands	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d014      	beq.n	80059e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b6:	f7fe f869 	bl	8003a8c <HAL_GetTick>
 80059ba:	0003      	movs	r3, r0
 80059bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fe f864 	bl	8003a8c <HAL_GetTick>
 80059c4:	0002      	movs	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e28d      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059d2:	4b93      	ldr	r3, [pc, #588]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	4013      	ands	r3, r2
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0xcc>
 80059de:	e015      	b.n	8005a0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fe f854 	bl	8003a8c <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ea:	f7fe f84f 	bl	8003a8c <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b64      	cmp	r3, #100	; 0x64
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e278      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059fc:	4b88      	ldr	r3, [pc, #544]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	4013      	ands	r3, r2
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0xf6>
 8005a08:	e000      	b.n	8005a0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2202      	movs	r2, #2
 8005a12:	4013      	ands	r3, r2
 8005a14:	d100      	bne.n	8005a18 <HAL_RCC_OscConfig+0x124>
 8005a16:	e099      	b.n	8005b4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a18:	4b81      	ldr	r3, [pc, #516]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2238      	movs	r2, #56	; 0x38
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a22:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2203      	movs	r2, #3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d102      	bne.n	8005a38 <HAL_RCC_OscConfig+0x144>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d002      	beq.n	8005a3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d135      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3e:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4013      	ands	r3, r2
 8005a48:	d005      	beq.n	8005a56 <HAL_RCC_OscConfig+0x162>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e24b      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a56:	4b72      	ldr	r3, [pc, #456]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4a74      	ldr	r2, [pc, #464]	; (8005c2c <HAL_RCC_OscConfig+0x338>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	021a      	lsls	r2, r3, #8
 8005a66:	4b6e      	ldr	r3, [pc, #440]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d112      	bne.n	8005a98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a72:	4b6b      	ldr	r3, [pc, #428]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6e      	ldr	r2, [pc, #440]	; (8005c30 <HAL_RCC_OscConfig+0x33c>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	4b67      	ldr	r3, [pc, #412]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005a86:	4b66      	ldr	r3, [pc, #408]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	0adb      	lsrs	r3, r3, #11
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	4013      	ands	r3, r2
 8005a90:	4a68      	ldr	r2, [pc, #416]	; (8005c34 <HAL_RCC_OscConfig+0x340>)
 8005a92:	40da      	lsrs	r2, r3
 8005a94:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <HAL_RCC_OscConfig+0x344>)
 8005a96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a98:	4b68      	ldr	r3, [pc, #416]	; (8005c3c <HAL_RCC_OscConfig+0x348>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fd ff99 	bl	80039d4 <HAL_InitTick>
 8005aa2:	1e03      	subs	r3, r0, #0
 8005aa4:	d051      	beq.n	8005b4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e221      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d030      	beq.n	8005b14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ab2:	4b5b      	ldr	r3, [pc, #364]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5e      	ldr	r2, [pc, #376]	; (8005c30 <HAL_RCC_OscConfig+0x33c>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	0019      	movs	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	4b57      	ldr	r3, [pc, #348]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005ac6:	4b56      	ldr	r3, [pc, #344]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b55      	ldr	r3, [pc, #340]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	0049      	lsls	r1, r1, #1
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7fd ffda 	bl	8003a8c <HAL_GetTick>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ade:	f7fd ffd5 	bl	8003a8c <HAL_GetTick>
 8005ae2:	0002      	movs	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e1fe      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005af0:	4b4b      	ldr	r3, [pc, #300]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4013      	ands	r3, r2
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <HAL_RCC_OscConfig+0x338>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	021a      	lsls	r2, r3, #8
 8005b0c:	4b44      	ldr	r3, [pc, #272]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	e01b      	b.n	8005b4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005b14:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b1a:	4949      	ldr	r1, [pc, #292]	; (8005c40 <HAL_RCC_OscConfig+0x34c>)
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fd ffb4 	bl	8003a8c <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b2a:	f7fd ffaf 	bl	8003a8c <HAL_GetTick>
 8005b2e:	0002      	movs	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e1d8      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b3c:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4013      	ands	r3, r2
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x236>
 8005b48:	e000      	b.n	8005b4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2208      	movs	r2, #8
 8005b52:	4013      	ands	r3, r2
 8005b54:	d047      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b56:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2238      	movs	r2, #56	; 0x38
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b18      	cmp	r3, #24
 8005b60:	d10a      	bne.n	8005b78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005b62:	4b2f      	ldr	r3, [pc, #188]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d03c      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2f2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d138      	bne.n	8005be6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e1ba      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b84:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005b86:	2101      	movs	r1, #1
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fd ff7e 	bl	8003a8c <HAL_GetTick>
 8005b90:	0003      	movs	r3, r0
 8005b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b96:	f7fd ff79 	bl	8003a8c <HAL_GetTick>
 8005b9a:	0002      	movs	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e1a2      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bac:	2202      	movs	r2, #2
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d0f1      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2a2>
 8005bb2:	e018      	b.n	8005be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005bba:	2101      	movs	r1, #1
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fd ff64 	bl	8003a8c <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fd ff5f 	bl	8003a8c <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e188      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bdc:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be0:	2202      	movs	r2, #2
 8005be2:	4013      	ands	r3, r2
 8005be4:	d1f1      	bne.n	8005bca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2204      	movs	r2, #4
 8005bec:	4013      	ands	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x2fe>
 8005bf0:	e0c6      	b.n	8005d80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	231f      	movs	r3, #31
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2238      	movs	r2, #56	; 0x38
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d11e      	bne.n	8005c44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005c06:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_RCC_OscConfig+0x32c>)
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <HAL_RCC_OscConfig+0x31e>
 8005c10:	e0b6      	b.n	8005d80 <HAL_RCC_OscConfig+0x48c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d000      	beq.n	8005c1c <HAL_RCC_OscConfig+0x328>
 8005c1a:	e0b1      	b.n	8005d80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e166      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
 8005c20:	40021000 	.word	0x40021000
 8005c24:	fffeffff 	.word	0xfffeffff
 8005c28:	fffbffff 	.word	0xfffbffff
 8005c2c:	ffff80ff 	.word	0xffff80ff
 8005c30:	ffffc7ff 	.word	0xffffc7ff
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	20000008 	.word	0x20000008
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c44:	4bac      	ldr	r3, [pc, #688]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	055b      	lsls	r3, r3, #21
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_OscConfig+0x360>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_OscConfig+0x362>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d011      	beq.n	8005c7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5e:	4ba6      	ldr	r3, [pc, #664]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	0549      	lsls	r1, r1, #21
 8005c64:	430a      	orrs	r2, r1
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c68:	4ba3      	ldr	r3, [pc, #652]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	055b      	lsls	r3, r3, #21
 8005c70:	4013      	ands	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c76:	231f      	movs	r3, #31
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7e:	4b9f      	ldr	r3, [pc, #636]	; (8005efc <HAL_RCC_OscConfig+0x608>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4013      	ands	r3, r2
 8005c88:	d11a      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8a:	4b9c      	ldr	r3, [pc, #624]	; (8005efc <HAL_RCC_OscConfig+0x608>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b9b      	ldr	r3, [pc, #620]	; (8005efc <HAL_RCC_OscConfig+0x608>)
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	0049      	lsls	r1, r1, #1
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005c98:	f7fd fef8 	bl	8003a8c <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca2:	f7fd fef3 	bl	8003a8c <HAL_GetTick>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e11c      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb4:	4b91      	ldr	r3, [pc, #580]	; (8005efc <HAL_RCC_OscConfig+0x608>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3e2>
 8005cc8:	4b8b      	ldr	r3, [pc, #556]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ccc:	4b8a      	ldr	r3, [pc, #552]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cce:	2101      	movs	r1, #1
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cd4:	e01c      	b.n	8005d10 <HAL_RCC_OscConfig+0x41c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x404>
 8005cde:	4b86      	ldr	r3, [pc, #536]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005ce0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ce2:	4b85      	ldr	r3, [pc, #532]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cea:	4b83      	ldr	r3, [pc, #524]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cee:	4b82      	ldr	r3, [pc, #520]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCC_OscConfig+0x41c>
 8005cf8:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cfc:	4b7e      	ldr	r3, [pc, #504]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005cfe:	2101      	movs	r1, #1
 8005d00:	438a      	bics	r2, r1
 8005d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d04:	4b7c      	ldr	r3, [pc, #496]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d08:	4b7b      	ldr	r3, [pc, #492]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fd feb8 	bl	8003a8c <HAL_GetTick>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d20:	e009      	b.n	8005d36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fd feb3 	bl	8003a8c <HAL_GetTick>
 8005d26:	0002      	movs	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	4a74      	ldr	r2, [pc, #464]	; (8005f00 <HAL_RCC_OscConfig+0x60c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0db      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d36:	4b70      	ldr	r3, [pc, #448]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCC_OscConfig+0x42e>
 8005d40:	e013      	b.n	8005d6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fd fea3 	bl	8003a8c <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d4a:	e009      	b.n	8005d60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fd fe9e 	bl	8003a8c <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	4a6a      	ldr	r2, [pc, #424]	; (8005f00 <HAL_RCC_OscConfig+0x60c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e0c6      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d60:	4b65      	ldr	r3, [pc, #404]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	2202      	movs	r2, #2
 8005d66:	4013      	ands	r3, r2
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d6a:	231f      	movs	r3, #31
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d105      	bne.n	8005d80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d74:	4b60      	ldr	r3, [pc, #384]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d78:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d7a:	4962      	ldr	r1, [pc, #392]	; (8005f04 <HAL_RCC_OscConfig+0x610>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d100      	bne.n	8005d8a <HAL_RCC_OscConfig+0x496>
 8005d88:	e0b0      	b.n	8005eec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2238      	movs	r2, #56	; 0x38
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d100      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4a4>
 8005d96:	e078      	b.n	8005e8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d153      	bne.n	8005e48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005da6:	4958      	ldr	r1, [pc, #352]	; (8005f08 <HAL_RCC_OscConfig+0x614>)
 8005da8:	400a      	ands	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fd fe6e 	bl	8003a8c <HAL_GetTick>
 8005db0:	0003      	movs	r3, r0
 8005db2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fd fe69 	bl	8003a8c <HAL_GetTick>
 8005dba:	0002      	movs	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e092      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc8:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	049b      	lsls	r3, r3, #18
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d1f0      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd4:	4b48      	ldr	r3, [pc, #288]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4a4c      	ldr	r2, [pc, #304]	; (8005f0c <HAL_RCC_OscConfig+0x618>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	0019      	movs	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1a      	ldr	r2, [r3, #32]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e02:	4b3d      	ldr	r3, [pc, #244]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e08:	2180      	movs	r1, #128	; 0x80
 8005e0a:	0449      	lsls	r1, r1, #17
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005e10:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	0549      	lsls	r1, r1, #21
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1e:	f7fd fe35 	bl	8003a8c <HAL_GetTick>
 8005e22:	0003      	movs	r3, r0
 8005e24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fd fe30 	bl	8003a8c <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e059      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	049b      	lsls	r3, r3, #18
 8005e42:	4013      	ands	r3, r2
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x534>
 8005e46:	e051      	b.n	8005eec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e4e:	492e      	ldr	r1, [pc, #184]	; (8005f08 <HAL_RCC_OscConfig+0x614>)
 8005e50:	400a      	ands	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fd fe1a 	bl	8003a8c <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fd fe15 	bl	8003a8c <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e03e      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e70:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	049b      	lsls	r3, r3, #18
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d1f0      	bne.n	8005e5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e82:	4923      	ldr	r1, [pc, #140]	; (8005f10 <HAL_RCC_OscConfig+0x61c>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e030      	b.n	8005eec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e02b      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_RCC_OscConfig+0x604>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	401a      	ands	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d11e      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2270      	movs	r2, #112	; 0x70
 8005eae:	401a      	ands	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d117      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	23fe      	movs	r3, #254	; 0xfe
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	23f8      	movs	r3, #248	; 0xf8
 8005ece:	039b      	lsls	r3, r3, #14
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d106      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	0f5b      	lsrs	r3, r3, #29
 8005ede:	075a      	lsls	r2, r3, #29
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b008      	add	sp, #32
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	00001388 	.word	0x00001388
 8005f04:	efffffff 	.word	0xefffffff
 8005f08:	feffffff 	.word	0xfeffffff
 8005f0c:	1fc1808c 	.word	0x1fc1808c
 8005f10:	effefffc 	.word	0xeffefffc

08005f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0e9      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f28:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2207      	movs	r2, #7
 8005f2e:	4013      	ands	r3, r2
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d91e      	bls.n	8005f74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b73      	ldr	r3, [pc, #460]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2207      	movs	r2, #7
 8005f3c:	4393      	bics	r3, r2
 8005f3e:	0019      	movs	r1, r3
 8005f40:	4b70      	ldr	r3, [pc, #448]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f48:	f7fd fda0 	bl	8003a8c <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f50:	e009      	b.n	8005f66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f52:	f7fd fd9b 	bl	8003a8c <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	4a6a      	ldr	r2, [pc, #424]	; (8006108 <HAL_RCC_ClockConfig+0x1f4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e0ca      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f66:	4b67      	ldr	r3, [pc, #412]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2207      	movs	r2, #7
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d1ee      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d015      	beq.n	8005faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2204      	movs	r2, #4
 8005f84:	4013      	ands	r3, r2
 8005f86:	d006      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f88:	4b60      	ldr	r3, [pc, #384]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	4b5f      	ldr	r3, [pc, #380]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005f8e:	21e0      	movs	r1, #224	; 0xe0
 8005f90:	01c9      	lsls	r1, r1, #7
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f96:	4b5d      	ldr	r3, [pc, #372]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4a5d      	ldr	r2, [pc, #372]	; (8006110 <HAL_RCC_ClockConfig+0x1fc>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	4b59      	ldr	r3, [pc, #356]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d057      	beq.n	8006064 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fbc:	4b53      	ldr	r3, [pc, #332]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d12b      	bne.n	8006020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e097      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d107      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fd4:	4b4d      	ldr	r3, [pc, #308]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	049b      	lsls	r3, r3, #18
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d11f      	bne.n	8006020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e08b      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d107      	bne.n	8005ffc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fec:	4b47      	ldr	r3, [pc, #284]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d113      	bne.n	8006020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e07f      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d106      	bne.n	8006012 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006004:	4b41      	ldr	r3, [pc, #260]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	2202      	movs	r2, #2
 800600a:	4013      	ands	r3, r2
 800600c:	d108      	bne.n	8006020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e074      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006012:	4b3e      	ldr	r3, [pc, #248]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	2202      	movs	r2, #2
 8006018:	4013      	ands	r3, r2
 800601a:	d101      	bne.n	8006020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e06d      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006020:	4b3a      	ldr	r3, [pc, #232]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2207      	movs	r2, #7
 8006026:	4393      	bics	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	4b37      	ldr	r3, [pc, #220]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fd fd2a 	bl	8003a8c <HAL_GetTick>
 8006038:	0003      	movs	r3, r0
 800603a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603c:	e009      	b.n	8006052 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603e:	f7fd fd25 	bl	8003a8c <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <HAL_RCC_ClockConfig+0x1f4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e054      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	4b2e      	ldr	r3, [pc, #184]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2238      	movs	r2, #56	; 0x38
 8006058:	401a      	ands	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	429a      	cmp	r2, r3
 8006062:	d1ec      	bne.n	800603e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006064:	4b27      	ldr	r3, [pc, #156]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2207      	movs	r2, #7
 800606a:	4013      	ands	r3, r2
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d21e      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2207      	movs	r2, #7
 8006078:	4393      	bics	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	4b21      	ldr	r3, [pc, #132]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006084:	f7fd fd02 	bl	8003a8c <HAL_GetTick>
 8006088:	0003      	movs	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800608c:	e009      	b.n	80060a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608e:	f7fd fcfd 	bl	8003a8c <HAL_GetTick>
 8006092:	0002      	movs	r2, r0
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_RCC_ClockConfig+0x1f4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e02c      	b.n	80060fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060a2:	4b18      	ldr	r3, [pc, #96]	; (8006104 <HAL_RCC_ClockConfig+0x1f0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2207      	movs	r2, #7
 80060a8:	4013      	ands	r3, r2
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1ee      	bne.n	800608e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2204      	movs	r2, #4
 80060b6:	4013      	ands	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	4a15      	ldr	r2, [pc, #84]	; (8006114 <HAL_RCC_ClockConfig+0x200>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	0019      	movs	r1, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80060ce:	f000 f829 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 80060d2:	0001      	movs	r1, r0
 80060d4:	4b0d      	ldr	r3, [pc, #52]	; (800610c <HAL_RCC_ClockConfig+0x1f8>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	220f      	movs	r2, #15
 80060dc:	401a      	ands	r2, r3
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCC_ClockConfig+0x204>)
 80060e0:	0092      	lsls	r2, r2, #2
 80060e2:	58d3      	ldr	r3, [r2, r3]
 80060e4:	221f      	movs	r2, #31
 80060e6:	4013      	ands	r3, r2
 80060e8:	000a      	movs	r2, r1
 80060ea:	40da      	lsrs	r2, r3
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_RCC_ClockConfig+0x208>)
 80060ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_RCC_ClockConfig+0x20c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fd fc6d 	bl	80039d4 <HAL_InitTick>
 80060fa:	0003      	movs	r3, r0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b004      	add	sp, #16
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40022000 	.word	0x40022000
 8006108:	00001388 	.word	0x00001388
 800610c:	40021000 	.word	0x40021000
 8006110:	fffff0ff 	.word	0xfffff0ff
 8006114:	ffff8fff 	.word	0xffff8fff
 8006118:	0800dcb0 	.word	0x0800dcb0
 800611c:	20000008 	.word	0x20000008
 8006120:	2000000c 	.word	0x2000000c

08006124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800612a:	4b3c      	ldr	r3, [pc, #240]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2238      	movs	r2, #56	; 0x38
 8006130:	4013      	ands	r3, r2
 8006132:	d10f      	bne.n	8006154 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0adb      	lsrs	r3, r3, #11
 800613a:	2207      	movs	r2, #7
 800613c:	4013      	ands	r3, r2
 800613e:	2201      	movs	r2, #1
 8006140:	409a      	lsls	r2, r3
 8006142:	0013      	movs	r3, r2
 8006144:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	4835      	ldr	r0, [pc, #212]	; (8006220 <HAL_RCC_GetSysClockFreq+0xfc>)
 800614a:	f7f9 fff5 	bl	8000138 <__udivsi3>
 800614e:	0003      	movs	r3, r0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	e05d      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006154:	4b31      	ldr	r3, [pc, #196]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2238      	movs	r2, #56	; 0x38
 800615a:	4013      	ands	r3, r2
 800615c:	2b08      	cmp	r3, #8
 800615e:	d102      	bne.n	8006166 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_RCC_GetSysClockFreq+0x100>)
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	e054      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006166:	4b2d      	ldr	r3, [pc, #180]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2238      	movs	r2, #56	; 0x38
 800616c:	4013      	ands	r3, r2
 800616e:	2b10      	cmp	r3, #16
 8006170:	d138      	bne.n	80061e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006172:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2203      	movs	r2, #3
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	2207      	movs	r2, #7
 8006184:	4013      	ands	r3, r2
 8006186:	3301      	adds	r3, #1
 8006188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b03      	cmp	r3, #3
 800618e:	d10d      	bne.n	80061ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4824      	ldr	r0, [pc, #144]	; (8006224 <HAL_RCC_GetSysClockFreq+0x100>)
 8006194:	f7f9 ffd0 	bl	8000138 <__udivsi3>
 8006198:	0003      	movs	r3, r0
 800619a:	0019      	movs	r1, r3
 800619c:	4b1f      	ldr	r3, [pc, #124]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	227f      	movs	r2, #127	; 0x7f
 80061a4:	4013      	ands	r3, r2
 80061a6:	434b      	muls	r3, r1
 80061a8:	617b      	str	r3, [r7, #20]
        break;
 80061aa:	e00d      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	481c      	ldr	r0, [pc, #112]	; (8006220 <HAL_RCC_GetSysClockFreq+0xfc>)
 80061b0:	f7f9 ffc2 	bl	8000138 <__udivsi3>
 80061b4:	0003      	movs	r3, r0
 80061b6:	0019      	movs	r1, r3
 80061b8:	4b18      	ldr	r3, [pc, #96]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	0a1b      	lsrs	r3, r3, #8
 80061be:	227f      	movs	r2, #127	; 0x7f
 80061c0:	4013      	ands	r3, r2
 80061c2:	434b      	muls	r3, r1
 80061c4:	617b      	str	r3, [r7, #20]
        break;
 80061c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0f5b      	lsrs	r3, r3, #29
 80061ce:	2207      	movs	r2, #7
 80061d0:	4013      	ands	r3, r2
 80061d2:	3301      	adds	r3, #1
 80061d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	6978      	ldr	r0, [r7, #20]
 80061da:	f7f9 ffad 	bl	8000138 <__udivsi3>
 80061de:	0003      	movs	r3, r0
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e015      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2238      	movs	r2, #56	; 0x38
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d103      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e00b      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2238      	movs	r2, #56	; 0x38
 80061fe:	4013      	ands	r3, r2
 8006200:	2b18      	cmp	r3, #24
 8006202:	d103      	bne.n	800620c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006204:	23fa      	movs	r3, #250	; 0xfa
 8006206:	01db      	lsls	r3, r3, #7
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	e001      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006210:	693b      	ldr	r3, [r7, #16]
}
 8006212:	0018      	movs	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	b006      	add	sp, #24
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	40021000 	.word	0x40021000
 8006220:	00f42400 	.word	0x00f42400
 8006224:	007a1200 	.word	0x007a1200

08006228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <HAL_RCC_GetHCLKFreq+0x10>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	0018      	movs	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	20000008 	.word	0x20000008

0800623c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800623c:	b5b0      	push	{r4, r5, r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006240:	f7ff fff2 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006244:	0004      	movs	r4, r0
 8006246:	f7ff fb49 	bl	80058dc <LL_RCC_GetAPB1Prescaler>
 800624a:	0003      	movs	r3, r0
 800624c:	0b1a      	lsrs	r2, r3, #12
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	58d3      	ldr	r3, [r2, r3]
 8006254:	221f      	movs	r2, #31
 8006256:	4013      	ands	r3, r2
 8006258:	40dc      	lsrs	r4, r3
 800625a:	0023      	movs	r3, r4
}
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	bdb0      	pop	{r4, r5, r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	0800dcf0 	.word	0x0800dcf0

08006268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006270:	2313      	movs	r3, #19
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006278:	2312      	movs	r3, #18
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	4013      	ands	r3, r2
 800628a:	d100      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800628c:	e0a3      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800628e:	2011      	movs	r0, #17
 8006290:	183b      	adds	r3, r7, r0
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006296:	4b7f      	ldr	r3, [pc, #508]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	055b      	lsls	r3, r3, #21
 800629e:	4013      	ands	r3, r2
 80062a0:	d110      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a2:	4b7c      	ldr	r3, [pc, #496]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80062a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a6:	4b7b      	ldr	r3, [pc, #492]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	0549      	lsls	r1, r1, #21
 80062ac:	430a      	orrs	r2, r1
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80062b0:	4b78      	ldr	r3, [pc, #480]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80062b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	055b      	lsls	r3, r3, #21
 80062b8:	4013      	ands	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062c4:	4b74      	ldr	r3, [pc, #464]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4b73      	ldr	r3, [pc, #460]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062ca:	2180      	movs	r1, #128	; 0x80
 80062cc:	0049      	lsls	r1, r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062d2:	f7fd fbdb 	bl	8003a8c <HAL_GetTick>
 80062d6:	0003      	movs	r3, r0
 80062d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062da:	e00b      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062dc:	f7fd fbd6 	bl	8003a8c <HAL_GetTick>
 80062e0:	0002      	movs	r2, r0
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d904      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80062ea:	2313      	movs	r3, #19
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	2203      	movs	r2, #3
 80062f0:	701a      	strb	r2, [r3, #0]
        break;
 80062f2:	e005      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062f4:	4b68      	ldr	r3, [pc, #416]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	4013      	ands	r3, r2
 80062fe:	d0ed      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006300:	2313      	movs	r3, #19
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d154      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800630a:	4b62      	ldr	r3, [pc, #392]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800630c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800630e:	23c0      	movs	r3, #192	; 0xc0
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4013      	ands	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d019      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	429a      	cmp	r2, r3
 8006324:	d014      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006326:	4b5b      	ldr	r3, [pc, #364]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	4a5c      	ldr	r2, [pc, #368]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800632c:	4013      	ands	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006330:	4b58      	ldr	r3, [pc, #352]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006334:	4b57      	ldr	r3, [pc, #348]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	0249      	lsls	r1, r1, #9
 800633a:	430a      	orrs	r2, r1
 800633c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800633e:	4b55      	ldr	r3, [pc, #340]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006342:	4b54      	ldr	r3, [pc, #336]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006344:	4956      	ldr	r1, [pc, #344]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006346:	400a      	ands	r2, r1
 8006348:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800634a:	4b52      	ldr	r3, [pc, #328]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2201      	movs	r2, #1
 8006354:	4013      	ands	r3, r2
 8006356:	d016      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fd fb98 	bl	8003a8c <HAL_GetTick>
 800635c:	0003      	movs	r3, r0
 800635e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006360:	e00c      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f7fd fb93 	bl	8003a8c <HAL_GetTick>
 8006366:	0002      	movs	r2, r0
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	4a4d      	ldr	r2, [pc, #308]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d904      	bls.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006372:	2313      	movs	r3, #19
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	2203      	movs	r2, #3
 8006378:	701a      	strb	r2, [r3, #0]
            break;
 800637a:	e004      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800637c:	4b45      	ldr	r3, [pc, #276]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800637e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006380:	2202      	movs	r2, #2
 8006382:	4013      	ands	r3, r2
 8006384:	d0ed      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006386:	2313      	movs	r3, #19
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006390:	4b40      	ldr	r3, [pc, #256]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	4a41      	ldr	r2, [pc, #260]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006396:	4013      	ands	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	4b3d      	ldr	r3, [pc, #244]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80063a0:	430a      	orrs	r2, r1
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80063a4:	e00c      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a6:	2312      	movs	r3, #18
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2213      	movs	r2, #19
 80063ac:	18ba      	adds	r2, r7, r2
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e005      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	2312      	movs	r3, #18
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2213      	movs	r2, #19
 80063ba:	18ba      	adds	r2, r7, r2
 80063bc:	7812      	ldrb	r2, [r2, #0]
 80063be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c0:	2311      	movs	r3, #17
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ca:	4b32      	ldr	r3, [pc, #200]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80063cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80063d0:	4935      	ldr	r1, [pc, #212]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063d2:	400a      	ands	r2, r1
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	4013      	ands	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063e0:	4b2c      	ldr	r3, [pc, #176]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	2203      	movs	r2, #3
 80063e6:	4393      	bics	r3, r2
 80063e8:	0019      	movs	r1, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80063f0:	430a      	orrs	r2, r1
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2220      	movs	r2, #32
 80063fa:	4013      	ands	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063fe:	4b25      	ldr	r3, [pc, #148]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006404:	4013      	ands	r3, r2
 8006406:	0019      	movs	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	4b21      	ldr	r3, [pc, #132]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800640e:	430a      	orrs	r2, r1
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	01db      	lsls	r3, r3, #7
 800641a:	4013      	ands	r3, r2
 800641c:	d015      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800641e:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	0899      	lsrs	r1, r3, #2
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800642c:	430a      	orrs	r2, r1
 800642e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	05db      	lsls	r3, r3, #23
 8006438:	429a      	cmp	r2, r3
 800643a:	d106      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	4b14      	ldr	r3, [pc, #80]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006442:	2180      	movs	r1, #128	; 0x80
 8006444:	0249      	lsls	r1, r1, #9
 8006446:	430a      	orrs	r2, r1
 8006448:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	2380      	movs	r3, #128	; 0x80
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	4013      	ands	r3, r2
 8006454:	d016      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800645c:	4013      	ands	r3, r2
 800645e:	0019      	movs	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006466:	430a      	orrs	r2, r1
 8006468:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	2380      	movs	r3, #128	; 0x80
 8006470:	01db      	lsls	r3, r3, #7
 8006472:	429a      	cmp	r2, r3
 8006474:	d106      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800647c:	2180      	movs	r1, #128	; 0x80
 800647e:	0249      	lsls	r1, r1, #9
 8006480:	430a      	orrs	r2, r1
 8006482:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006484:	2312      	movs	r3, #18
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	781b      	ldrb	r3, [r3, #0]
}
 800648a:	0018      	movs	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	b006      	add	sp, #24
 8006490:	bd80      	pop	{r7, pc}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	40021000 	.word	0x40021000
 8006498:	40007000 	.word	0x40007000
 800649c:	fffffcff 	.word	0xfffffcff
 80064a0:	fffeffff 	.word	0xfffeffff
 80064a4:	00001388 	.word	0x00001388
 80064a8:	efffffff 	.word	0xefffffff
 80064ac:	ffffcfff 	.word	0xffffcfff
 80064b0:	ffff3fff 	.word	0xffff3fff

080064b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e0a8      	b.n	8006618 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	2382      	movs	r3, #130	; 0x82
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d009      	beq.n	80064ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	61da      	str	r2, [r3, #28]
 80064e0:	e005      	b.n	80064ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	225d      	movs	r2, #93	; 0x5d
 80064f8:	5c9b      	ldrb	r3, [r3, r2]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	225c      	movs	r2, #92	; 0x5c
 8006504:	2100      	movs	r1, #0
 8006506:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0018      	movs	r0, r3
 800650c:	f7fc fa7c 	bl	8002a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	225d      	movs	r2, #93	; 0x5d
 8006514:	2102      	movs	r1, #2
 8006516:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2140      	movs	r1, #64	; 0x40
 8006524:	438a      	bics	r2, r1
 8006526:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	23e0      	movs	r3, #224	; 0xe0
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	429a      	cmp	r2, r3
 8006532:	d902      	bls.n	800653a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e002      	b.n	8006540 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	015b      	lsls	r3, r3, #5
 800653e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	23f0      	movs	r3, #240	; 0xf0
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	429a      	cmp	r2, r3
 800654a:	d008      	beq.n	800655e <HAL_SPI_Init+0xaa>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	23e0      	movs	r3, #224	; 0xe0
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	429a      	cmp	r2, r3
 8006556:	d002      	beq.n	800655e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	2382      	movs	r3, #130	; 0x82
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	401a      	ands	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6899      	ldr	r1, [r3, #8]
 800656c:	2384      	movs	r3, #132	; 0x84
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	400b      	ands	r3, r1
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2102      	movs	r1, #2
 800657a:	400b      	ands	r3, r1
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	2101      	movs	r1, #1
 8006584:	400b      	ands	r3, r1
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6999      	ldr	r1, [r3, #24]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	400b      	ands	r3, r1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2138      	movs	r1, #56	; 0x38
 800659a:	400b      	ands	r3, r1
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	400b      	ands	r3, r1
 80065a6:	431a      	orrs	r2, r3
 80065a8:	0011      	movs	r1, r2
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	019b      	lsls	r3, r3, #6
 80065b2:	401a      	ands	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	2204      	movs	r2, #4
 80065c4:	401a      	ands	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2110      	movs	r1, #16
 80065cc:	400b      	ands	r3, r1
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	2108      	movs	r1, #8
 80065d6:	400b      	ands	r3, r1
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68d9      	ldr	r1, [r3, #12]
 80065de:	23f0      	movs	r3, #240	; 0xf0
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	400b      	ands	r3, r1
 80065e4:	431a      	orrs	r2, r3
 80065e6:	0011      	movs	r1, r2
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	015b      	lsls	r3, r3, #5
 80065ee:	401a      	ands	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4907      	ldr	r1, [pc, #28]	; (8006620 <HAL_SPI_Init+0x16c>)
 8006604:	400a      	ands	r2, r1
 8006606:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	225d      	movs	r2, #93	; 0x5d
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b004      	add	sp, #16
 800661e:	bd80      	pop	{r7, pc}
 8006620:	fffff7ff 	.word	0xfffff7ff

08006624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	001a      	movs	r2, r3
 8006632:	1cbb      	adds	r3, r7, #2
 8006634:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006636:	2301      	movs	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800663a:	2323      	movs	r3, #35	; 0x23
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	2200      	movs	r2, #0
 8006640:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	225c      	movs	r2, #92	; 0x5c
 8006646:	5c9b      	ldrb	r3, [r3, r2]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_SPI_TransmitReceive+0x2c>
 800664c:	2302      	movs	r3, #2
 800664e:	e1b5      	b.n	80069bc <HAL_SPI_TransmitReceive+0x398>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	225c      	movs	r2, #92	; 0x5c
 8006654:	2101      	movs	r1, #1
 8006656:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006658:	f7fd fa18 	bl	8003a8c <HAL_GetTick>
 800665c:	0003      	movs	r3, r0
 800665e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006660:	201b      	movs	r0, #27
 8006662:	183b      	adds	r3, r7, r0
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	215d      	movs	r1, #93	; 0x5d
 8006668:	5c52      	ldrb	r2, [r2, r1]
 800666a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006672:	2312      	movs	r3, #18
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	1cba      	adds	r2, r7, #2
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800667c:	183b      	adds	r3, r7, r0
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d011      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x84>
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	2382      	movs	r3, #130	; 0x82
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	429a      	cmp	r2, r3
 800668c:	d107      	bne.n	800669e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_SPI_TransmitReceive+0x7a>
 8006696:	183b      	adds	r3, r7, r0
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d004      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800669e:	2323      	movs	r3, #35	; 0x23
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	2202      	movs	r2, #2
 80066a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80066a6:	e17e      	b.n	80069a6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <HAL_SPI_TransmitReceive+0x98>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_SPI_TransmitReceive+0x98>
 80066b4:	1cbb      	adds	r3, r7, #2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80066bc:	2323      	movs	r3, #35	; 0x23
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	2201      	movs	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80066c4:	e16f      	b.n	80069a6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	225d      	movs	r2, #93	; 0x5d
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d003      	beq.n	80066da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	225d      	movs	r2, #93	; 0x5d
 80066d6:	2105      	movs	r1, #5
 80066d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1cba      	adds	r2, r7, #2
 80066ea:	2146      	movs	r1, #70	; 0x46
 80066ec:	8812      	ldrh	r2, [r2, #0]
 80066ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1cba      	adds	r2, r7, #2
 80066f4:	2144      	movs	r1, #68	; 0x44
 80066f6:	8812      	ldrh	r2, [r2, #0]
 80066f8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1cba      	adds	r2, r7, #2
 8006704:	8812      	ldrh	r2, [r2, #0]
 8006706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1cba      	adds	r2, r7, #2
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	23e0      	movs	r3, #224	; 0xe0
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	429a      	cmp	r2, r3
 8006726:	d908      	bls.n	800673a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	49a4      	ldr	r1, [pc, #656]	; (80069c4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006734:	400a      	ands	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
 8006738:	e008      	b.n	800674c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	0149      	lsls	r1, r1, #5
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	4013      	ands	r3, r2
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d007      	beq.n	800676a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2140      	movs	r1, #64	; 0x40
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	23e0      	movs	r3, #224	; 0xe0
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	429a      	cmp	r2, r3
 8006774:	d800      	bhi.n	8006778 <HAL_SPI_TransmitReceive+0x154>
 8006776:	e07f      	b.n	8006878 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_SPI_TransmitReceive+0x168>
 8006780:	2312      	movs	r3, #18
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d000      	beq.n	800678c <HAL_SPI_TransmitReceive+0x168>
 800678a:	e069      	b.n	8006860 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b0:	e056      	b.n	8006860 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2202      	movs	r2, #2
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d11b      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x1d4>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x1d4>
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d113      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2201      	movs	r2, #1
 8006800:	4013      	ands	r3, r2
 8006802:	2b01      	cmp	r3, #1
 8006804:	d11c      	bne.n	8006840 <HAL_SPI_TransmitReceive+0x21c>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2246      	movs	r2, #70	; 0x46
 800680a:	5a9b      	ldrh	r3, [r3, r2]
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	b292      	uxth	r2, r2
 800681e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2246      	movs	r2, #70	; 0x46
 800682e:	5a9b      	ldrh	r3, [r3, r2]
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b299      	uxth	r1, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2246      	movs	r2, #70	; 0x46
 800683a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800683c:	2301      	movs	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006840:	f7fd f924 	bl	8003a8c <HAL_GetTick>
 8006844:	0002      	movs	r2, r0
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684c:	429a      	cmp	r2, r3
 800684e:	d807      	bhi.n	8006860 <HAL_SPI_TransmitReceive+0x23c>
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	3301      	adds	r3, #1
 8006854:	d004      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006856:	2323      	movs	r3, #35	; 0x23
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2203      	movs	r2, #3
 800685c:	701a      	strb	r2, [r3, #0]
        goto error;
 800685e:	e0a2      	b.n	80069a6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1a3      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x18e>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2246      	movs	r2, #70	; 0x46
 800686e:	5a9b      	ldrh	r3, [r3, r2]
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d19d      	bne.n	80067b2 <HAL_SPI_TransmitReceive+0x18e>
 8006876:	e085      	b.n	8006984 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_SPI_TransmitReceive+0x268>
 8006880:	2312      	movs	r3, #18
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d000      	beq.n	800688c <HAL_SPI_TransmitReceive+0x268>
 800688a:	e070      	b.n	800696e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	7812      	ldrb	r2, [r2, #0]
 8006898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b2:	e05c      	b.n	800696e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2202      	movs	r2, #2
 80068bc:	4013      	ands	r3, r2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d11c      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x2d8>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d017      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x2d8>
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d114      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2201      	movs	r2, #1
 8006904:	4013      	ands	r3, r2
 8006906:	2b01      	cmp	r3, #1
 8006908:	d11e      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x324>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2246      	movs	r2, #70	; 0x46
 800690e:	5a9b      	ldrh	r3, [r3, r2]
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	330c      	adds	r3, #12
 800691c:	001a      	movs	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2246      	movs	r2, #70	; 0x46
 8006936:	5a9b      	ldrh	r3, [r3, r2]
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b299      	uxth	r1, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2246      	movs	r2, #70	; 0x46
 8006942:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006944:	2301      	movs	r3, #1
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006948:	f7fd f8a0 	bl	8003a8c <HAL_GetTick>
 800694c:	0002      	movs	r2, r0
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	429a      	cmp	r2, r3
 8006956:	d802      	bhi.n	800695e <HAL_SPI_TransmitReceive+0x33a>
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	3301      	adds	r3, #1
 800695c:	d102      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x340>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006964:	2323      	movs	r3, #35	; 0x23
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2203      	movs	r2, #3
 800696a:	701a      	strb	r2, [r3, #0]
        goto error;
 800696c:	e01b      	b.n	80069a6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d19d      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x290>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2246      	movs	r2, #70	; 0x46
 800697c:	5a9b      	ldrh	r3, [r3, r2]
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d197      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	0018      	movs	r0, r3
 800698c:	f000 f94c 	bl	8006c28 <SPI_EndRxTxTransaction>
 8006990:	1e03      	subs	r3, r0, #0
 8006992:	d007      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006994:	2323      	movs	r3, #35	; 0x23
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	661a      	str	r2, [r3, #96]	; 0x60
 80069a2:	e000      	b.n	80069a6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80069a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	225d      	movs	r2, #93	; 0x5d
 80069aa:	2101      	movs	r1, #1
 80069ac:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	225c      	movs	r2, #92	; 0x5c
 80069b2:	2100      	movs	r1, #0
 80069b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069b6:	2323      	movs	r3, #35	; 0x23
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	781b      	ldrb	r3, [r3, #0]
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b00a      	add	sp, #40	; 0x28
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	ffffefff 	.word	0xffffefff

080069c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069d8:	f7fd f858 	bl	8003a8c <HAL_GetTick>
 80069dc:	0002      	movs	r2, r0
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	18d3      	adds	r3, r2, r3
 80069e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069e8:	f7fd f850 	bl	8003a8c <HAL_GetTick>
 80069ec:	0003      	movs	r3, r0
 80069ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f0:	4b3a      	ldr	r3, [pc, #232]	; (8006adc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	4353      	muls	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069fe:	e058      	b.n	8006ab2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	d055      	beq.n	8006ab2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a06:	f7fd f841 	bl	8003a8c <HAL_GetTick>
 8006a0a:	0002      	movs	r2, r0
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d902      	bls.n	8006a1c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d142      	bne.n	8006aa2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	21e0      	movs	r1, #224	; 0xe0
 8006a28:	438a      	bics	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	2382      	movs	r3, #130	; 0x82
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d113      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d005      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2140      	movs	r1, #64	; 0x40
 8006a5c:	438a      	bics	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	019b      	lsls	r3, r3, #6
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d110      	bne.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	491a      	ldr	r1, [pc, #104]	; (8006ae0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	0189      	lsls	r1, r1, #6
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	225d      	movs	r2, #93	; 0x5d
 8006a92:	2101      	movs	r1, #1
 8006a94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	225c      	movs	r2, #92	; 0x5c
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e017      	b.n	8006ad2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4013      	ands	r3, r2
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	425a      	negs	r2, r3
 8006ac2:	4153      	adcs	r3, r2
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	001a      	movs	r2, r3
 8006ac8:	1dfb      	adds	r3, r7, #7
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d197      	bne.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b008      	add	sp, #32
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	20000008 	.word	0x20000008
 8006ae0:	ffffdfff 	.word	0xffffdfff

08006ae4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08a      	sub	sp, #40	; 0x28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006af2:	2317      	movs	r3, #23
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006afa:	f7fc ffc7 	bl	8003a8c <HAL_GetTick>
 8006afe:	0002      	movs	r2, r0
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	18d3      	adds	r3, r2, r3
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006b0a:	f7fc ffbf 	bl	8003a8c <HAL_GetTick>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b1a:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	0013      	movs	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	00da      	lsls	r2, r3, #3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	0d1b      	lsrs	r3, r3, #20
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	4353      	muls	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b30:	e068      	b.n	8006c04 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	23c0      	movs	r3, #192	; 0xc0
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d10a      	bne.n	8006b52 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d107      	bne.n	8006b52 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	2117      	movs	r1, #23
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b4e:	187b      	adds	r3, r7, r1
 8006b50:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	d055      	beq.n	8006c04 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b58:	f7fc ff98 	bl	8003a8c <HAL_GetTick>
 8006b5c:	0002      	movs	r2, r0
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d902      	bls.n	8006b6e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d142      	bne.n	8006bf4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	21e0      	movs	r1, #224	; 0xe0
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	2382      	movs	r3, #130	; 0x82
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d113      	bne.n	8006bb2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d005      	beq.n	8006ba2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d107      	bne.n	8006bb2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2140      	movs	r1, #64	; 0x40
 8006bae:	438a      	bics	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	019b      	lsls	r3, r3, #6
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d110      	bne.n	8006be0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4916      	ldr	r1, [pc, #88]	; (8006c24 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006bca:	400a      	ands	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	0189      	lsls	r1, r1, #6
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	225d      	movs	r2, #93	; 0x5d
 8006be4:	2101      	movs	r1, #1
 8006be6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	225c      	movs	r2, #92	; 0x5c
 8006bec:	2100      	movs	r1, #0
 8006bee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e010      	b.n	8006c16 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d18e      	bne.n	8006b32 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	0018      	movs	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b00a      	add	sp, #40	; 0x28
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	20000008 	.word	0x20000008
 8006c24:	ffffdfff 	.word	0xffffdfff

08006c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	23c0      	movs	r3, #192	; 0xc0
 8006c38:	0159      	lsls	r1, r3, #5
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	0013      	movs	r3, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	f7ff ff4e 	bl	8006ae4 <SPI_WaitFifoStateUntilTimeout>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d007      	beq.n	8006c5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c50:	2220      	movs	r2, #32
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e027      	b.n	8006cac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	0013      	movs	r3, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	f7ff fead 	bl	80069c8 <SPI_WaitFlagStateUntilTimeout>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d007      	beq.n	8006c82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c76:	2220      	movs	r2, #32
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e014      	b.n	8006cac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	23c0      	movs	r3, #192	; 0xc0
 8006c86:	00d9      	lsls	r1, r3, #3
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	0013      	movs	r3, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7ff ff27 	bl	8006ae4 <SPI_WaitFifoStateUntilTimeout>
 8006c96:	1e03      	subs	r3, r0, #0
 8006c98:	d007      	beq.n	8006caa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e000      	b.n	8006cac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e04a      	b.n	8006d5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	223d      	movs	r2, #61	; 0x3d
 8006cca:	5c9b      	ldrb	r3, [r3, r2]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	223c      	movs	r2, #60	; 0x3c
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7fc f9e3 	bl	80030a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	223d      	movs	r2, #61	; 0x3d
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	f000 fdd1 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2248      	movs	r2, #72	; 0x48
 8006cfe:	2101      	movs	r1, #1
 8006d00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	223e      	movs	r2, #62	; 0x3e
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	223f      	movs	r2, #63	; 0x3f
 8006d0e:	2101      	movs	r1, #1
 8006d10:	5499      	strb	r1, [r3, r2]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2240      	movs	r2, #64	; 0x40
 8006d16:	2101      	movs	r1, #1
 8006d18:	5499      	strb	r1, [r3, r2]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2241      	movs	r2, #65	; 0x41
 8006d1e:	2101      	movs	r1, #1
 8006d20:	5499      	strb	r1, [r3, r2]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2242      	movs	r2, #66	; 0x42
 8006d26:	2101      	movs	r1, #1
 8006d28:	5499      	strb	r1, [r3, r2]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2243      	movs	r2, #67	; 0x43
 8006d2e:	2101      	movs	r1, #1
 8006d30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2244      	movs	r2, #68	; 0x44
 8006d36:	2101      	movs	r1, #1
 8006d38:	5499      	strb	r1, [r3, r2]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2245      	movs	r2, #69	; 0x45
 8006d3e:	2101      	movs	r1, #1
 8006d40:	5499      	strb	r1, [r3, r2]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2246      	movs	r2, #70	; 0x46
 8006d46:	2101      	movs	r1, #1
 8006d48:	5499      	strb	r1, [r3, r2]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2247      	movs	r2, #71	; 0x47
 8006d4e:	2101      	movs	r1, #1
 8006d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	223d      	movs	r2, #61	; 0x3d
 8006d56:	2101      	movs	r1, #1
 8006d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	223d      	movs	r2, #61	; 0x3d
 8006d70:	5c9b      	ldrb	r3, [r3, r2]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e037      	b.n	8006dec <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	223d      	movs	r2, #61	; 0x3d
 8006d80:	2102      	movs	r1, #2
 8006d82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2101      	movs	r1, #1
 8006d90:	430a      	orrs	r2, r1
 8006d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <HAL_TIM_Base_Start_IT+0x90>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_TIM_Base_Start_IT+0x44>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <HAL_TIM_Base_Start_IT+0x94>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d116      	bne.n	8006dd6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4a13      	ldr	r2, [pc, #76]	; (8006dfc <HAL_TIM_Base_Start_IT+0x98>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d016      	beq.n	8006de8 <HAL_TIM_Base_Start_IT+0x84>
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d011      	beq.n	8006de8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2101      	movs	r1, #1
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd4:	e008      	b.n	8006de8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2101      	movs	r1, #1
 8006de2:	430a      	orrs	r2, r1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e000      	b.n	8006dea <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b004      	add	sp, #16
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	00010007 	.word	0x00010007

08006e00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2101      	movs	r1, #1
 8006e14:	438a      	bics	r2, r1
 8006e16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4a0d      	ldr	r2, [pc, #52]	; (8006e54 <HAL_TIM_Base_Stop_IT+0x54>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	d10d      	bne.n	8006e40 <HAL_TIM_Base_Stop_IT+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	4a0b      	ldr	r2, [pc, #44]	; (8006e58 <HAL_TIM_Base_Stop_IT+0x58>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d107      	bne.n	8006e40 <HAL_TIM_Base_Stop_IT+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	223d      	movs	r2, #61	; 0x3d
 8006e44:	2101      	movs	r1, #1
 8006e46:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b002      	add	sp, #8
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	00001111 	.word	0x00001111
 8006e58:	00000444 	.word	0x00000444

08006e5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e04a      	b.n	8006f04 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	223d      	movs	r2, #61	; 0x3d
 8006e72:	5c9b      	ldrb	r3, [r3, r2]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d107      	bne.n	8006e8a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	223c      	movs	r2, #60	; 0x3c
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f841 	bl	8006f0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	223d      	movs	r2, #61	; 0x3d
 8006e8e:	2102      	movs	r1, #2
 8006e90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	0019      	movs	r1, r3
 8006e9c:	0010      	movs	r0, r2
 8006e9e:	f000 fcfd 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2248      	movs	r2, #72	; 0x48
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	223e      	movs	r2, #62	; 0x3e
 8006eae:	2101      	movs	r1, #1
 8006eb0:	5499      	strb	r1, [r3, r2]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	223f      	movs	r2, #63	; 0x3f
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	5499      	strb	r1, [r3, r2]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2240      	movs	r2, #64	; 0x40
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	5499      	strb	r1, [r3, r2]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2241      	movs	r2, #65	; 0x41
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	5499      	strb	r1, [r3, r2]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2242      	movs	r2, #66	; 0x42
 8006ece:	2101      	movs	r1, #1
 8006ed0:	5499      	strb	r1, [r3, r2]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2243      	movs	r2, #67	; 0x43
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2244      	movs	r2, #68	; 0x44
 8006ede:	2101      	movs	r1, #1
 8006ee0:	5499      	strb	r1, [r3, r2]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2245      	movs	r2, #69	; 0x45
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	5499      	strb	r1, [r3, r2]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2246      	movs	r2, #70	; 0x46
 8006eee:	2101      	movs	r1, #1
 8006ef0:	5499      	strb	r1, [r3, r2]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2247      	movs	r2, #71	; 0x47
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	223d      	movs	r2, #61	; 0x3d
 8006efe:	2101      	movs	r1, #1
 8006f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e04a      	b.n	8006fc4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	223d      	movs	r2, #61	; 0x3d
 8006f32:	5c9b      	ldrb	r3, [r3, r2]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	223c      	movs	r2, #60	; 0x3c
 8006f3e:	2100      	movs	r1, #0
 8006f40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 f841 	bl	8006fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	223d      	movs	r2, #61	; 0x3d
 8006f4e:	2102      	movs	r1, #2
 8006f50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	0010      	movs	r0, r2
 8006f5e:	f000 fc9d 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2248      	movs	r2, #72	; 0x48
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	223e      	movs	r2, #62	; 0x3e
 8006f6e:	2101      	movs	r1, #1
 8006f70:	5499      	strb	r1, [r3, r2]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	223f      	movs	r2, #63	; 0x3f
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2241      	movs	r2, #65	; 0x41
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2242      	movs	r2, #66	; 0x42
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2243      	movs	r2, #67	; 0x43
 8006f96:	2101      	movs	r1, #1
 8006f98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2244      	movs	r2, #68	; 0x44
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2245      	movs	r2, #69	; 0x45
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2246      	movs	r2, #70	; 0x46
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2247      	movs	r2, #71	; 0x47
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	223d      	movs	r2, #61	; 0x3d
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b002      	add	sp, #8
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d108      	bne.n	8006ffe <HAL_TIM_PWM_Start+0x22>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	223e      	movs	r2, #62	; 0x3e
 8006ff0:	5c9b      	ldrb	r3, [r3, r2]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	1e5a      	subs	r2, r3, #1
 8006ff8:	4193      	sbcs	r3, r2
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e037      	b.n	800706e <HAL_TIM_PWM_Start+0x92>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d108      	bne.n	8007016 <HAL_TIM_PWM_Start+0x3a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	223f      	movs	r2, #63	; 0x3f
 8007008:	5c9b      	ldrb	r3, [r3, r2]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	4193      	sbcs	r3, r2
 8007012:	b2db      	uxtb	r3, r3
 8007014:	e02b      	b.n	800706e <HAL_TIM_PWM_Start+0x92>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d108      	bne.n	800702e <HAL_TIM_PWM_Start+0x52>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2240      	movs	r2, #64	; 0x40
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	4193      	sbcs	r3, r2
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e01f      	b.n	800706e <HAL_TIM_PWM_Start+0x92>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d108      	bne.n	8007046 <HAL_TIM_PWM_Start+0x6a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2241      	movs	r2, #65	; 0x41
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	4193      	sbcs	r3, r2
 8007042:	b2db      	uxtb	r3, r3
 8007044:	e013      	b.n	800706e <HAL_TIM_PWM_Start+0x92>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b10      	cmp	r3, #16
 800704a:	d108      	bne.n	800705e <HAL_TIM_PWM_Start+0x82>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2242      	movs	r2, #66	; 0x42
 8007050:	5c9b      	ldrb	r3, [r3, r2]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	4193      	sbcs	r3, r2
 800705a:	b2db      	uxtb	r3, r3
 800705c:	e007      	b.n	800706e <HAL_TIM_PWM_Start+0x92>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2243      	movs	r2, #67	; 0x43
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	1e5a      	subs	r2, r3, #1
 800706a:	4193      	sbcs	r3, r2
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e07b      	b.n	800716e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <HAL_TIM_PWM_Start+0xaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	223e      	movs	r2, #62	; 0x3e
 8007080:	2102      	movs	r1, #2
 8007082:	5499      	strb	r1, [r3, r2]
 8007084:	e023      	b.n	80070ce <HAL_TIM_PWM_Start+0xf2>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d104      	bne.n	8007096 <HAL_TIM_PWM_Start+0xba>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	223f      	movs	r2, #63	; 0x3f
 8007090:	2102      	movs	r1, #2
 8007092:	5499      	strb	r1, [r3, r2]
 8007094:	e01b      	b.n	80070ce <HAL_TIM_PWM_Start+0xf2>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_PWM_Start+0xca>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2240      	movs	r2, #64	; 0x40
 80070a0:	2102      	movs	r1, #2
 80070a2:	5499      	strb	r1, [r3, r2]
 80070a4:	e013      	b.n	80070ce <HAL_TIM_PWM_Start+0xf2>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Start+0xda>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2241      	movs	r2, #65	; 0x41
 80070b0:	2102      	movs	r1, #2
 80070b2:	5499      	strb	r1, [r3, r2]
 80070b4:	e00b      	b.n	80070ce <HAL_TIM_PWM_Start+0xf2>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_PWM_Start+0xea>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2242      	movs	r2, #66	; 0x42
 80070c0:	2102      	movs	r1, #2
 80070c2:	5499      	strb	r1, [r3, r2]
 80070c4:	e003      	b.n	80070ce <HAL_TIM_PWM_Start+0xf2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2243      	movs	r2, #67	; 0x43
 80070ca:	2102      	movs	r1, #2
 80070cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	2201      	movs	r2, #1
 80070d6:	0018      	movs	r0, r3
 80070d8:	f000 ff84 	bl	8007fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <HAL_TIM_PWM_Start+0x19c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d009      	beq.n	80070fa <HAL_TIM_PWM_Start+0x11e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a24      	ldr	r2, [pc, #144]	; (800717c <HAL_TIM_PWM_Start+0x1a0>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_TIM_PWM_Start+0x11e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a22      	ldr	r2, [pc, #136]	; (8007180 <HAL_TIM_PWM_Start+0x1a4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_PWM_Start+0x122>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <HAL_TIM_PWM_Start+0x124>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2180      	movs	r1, #128	; 0x80
 8007110:	0209      	lsls	r1, r1, #8
 8007112:	430a      	orrs	r2, r1
 8007114:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <HAL_TIM_PWM_Start+0x19c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIM_PWM_Start+0x14e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a17      	ldr	r2, [pc, #92]	; (8007184 <HAL_TIM_PWM_Start+0x1a8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d116      	bne.n	8007158 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_TIM_PWM_Start+0x1ac>)
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b06      	cmp	r3, #6
 800713a:	d016      	beq.n	800716a <HAL_TIM_PWM_Start+0x18e>
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	429a      	cmp	r2, r3
 8007144:	d011      	beq.n	800716a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2101      	movs	r1, #1
 8007152:	430a      	orrs	r2, r1
 8007154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007156:	e008      	b.n	800716a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2101      	movs	r1, #1
 8007164:	430a      	orrs	r2, r1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e000      	b.n	800716c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	0018      	movs	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	b004      	add	sp, #16
 8007174:	bd80      	pop	{r7, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800
 8007184:	40000400 	.word	0x40000400
 8007188:	00010007 	.word	0x00010007

0800718c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2202      	movs	r2, #2
 800719c:	4013      	ands	r3, r2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d124      	bne.n	80071ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2202      	movs	r2, #2
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d11d      	bne.n	80071ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2203      	movs	r2, #3
 80071b6:	4252      	negs	r2, r2
 80071b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2203      	movs	r2, #3
 80071c8:	4013      	ands	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fb4c 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 80071d4:	e007      	b.n	80071e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 fb3f 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	0018      	movs	r0, r3
 80071e2:	f000 fb4b 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2204      	movs	r2, #4
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d125      	bne.n	8007246 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2204      	movs	r2, #4
 8007202:	4013      	ands	r3, r2
 8007204:	2b04      	cmp	r3, #4
 8007206:	d11e      	bne.n	8007246 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2205      	movs	r2, #5
 800720e:	4252      	negs	r2, r2
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	23c0      	movs	r3, #192	; 0xc0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4013      	ands	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f000 fb1f 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 800722e:	e007      	b.n	8007240 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	0018      	movs	r0, r3
 8007234:	f000 fb12 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0018      	movs	r0, r3
 800723c:	f000 fb1e 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2208      	movs	r2, #8
 800724e:	4013      	ands	r3, r2
 8007250:	2b08      	cmp	r3, #8
 8007252:	d124      	bne.n	800729e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2208      	movs	r2, #8
 800725c:	4013      	ands	r3, r2
 800725e:	2b08      	cmp	r3, #8
 8007260:	d11d      	bne.n	800729e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2209      	movs	r2, #9
 8007268:	4252      	negs	r2, r2
 800726a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2204      	movs	r2, #4
 8007270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	2203      	movs	r2, #3
 800727a:	4013      	ands	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	0018      	movs	r0, r3
 8007282:	f000 faf3 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 8007286:	e007      	b.n	8007298 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	0018      	movs	r0, r3
 800728c:	f000 fae6 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	0018      	movs	r0, r3
 8007294:	f000 faf2 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2210      	movs	r2, #16
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d125      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2210      	movs	r2, #16
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d11e      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2211      	movs	r2, #17
 80072c0:	4252      	negs	r2, r2
 80072c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2208      	movs	r2, #8
 80072c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	23c0      	movs	r3, #192	; 0xc0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4013      	ands	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	0018      	movs	r0, r3
 80072dc:	f000 fac6 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 80072e0:	e007      	b.n	80072f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 fab9 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 fac5 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2201      	movs	r2, #1
 8007300:	4013      	ands	r3, r2
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10f      	bne.n	8007326 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	4013      	ands	r3, r2
 8007310:	2b01      	cmp	r3, #1
 8007312:	d108      	bne.n	8007326 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2202      	movs	r2, #2
 800731a:	4252      	negs	r2, r2
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f7fb f845 	bl	80023b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2280      	movs	r2, #128	; 0x80
 800732e:	4013      	ands	r3, r2
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d10f      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	4013      	ands	r3, r2
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	d108      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2281      	movs	r2, #129	; 0x81
 8007348:	4252      	negs	r2, r2
 800734a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0018      	movs	r0, r3
 8007350:	f000 ff7c 	bl	800824c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	2380      	movs	r3, #128	; 0x80
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	401a      	ands	r2, r3
 8007360:	2380      	movs	r3, #128	; 0x80
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	429a      	cmp	r2, r3
 8007366:	d10e      	bne.n	8007386 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2280      	movs	r2, #128	; 0x80
 8007370:	4013      	ands	r3, r2
 8007372:	2b80      	cmp	r3, #128	; 0x80
 8007374:	d107      	bne.n	8007386 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <HAL_TIM_IRQHandler+0x260>)
 800737c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f000 ff6b 	bl	800825c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	4013      	ands	r3, r2
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d10f      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	4013      	ands	r3, r2
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d108      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2241      	movs	r2, #65	; 0x41
 80073a8:	4252      	negs	r2, r2
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	0018      	movs	r0, r3
 80073b0:	f000 fa6c 	bl	800788c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2220      	movs	r2, #32
 80073bc:	4013      	ands	r3, r2
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d10f      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d108      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2221      	movs	r2, #33	; 0x21
 80073d6:	4252      	negs	r2, r2
 80073d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	0018      	movs	r0, r3
 80073de:	f000 ff2d 	bl	800823c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b002      	add	sp, #8
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	fffffeff 	.word	0xfffffeff

080073f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073fc:	2317      	movs	r3, #23
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	223c      	movs	r2, #60	; 0x3c
 8007408:	5c9b      	ldrb	r3, [r3, r2]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_TIM_OC_ConfigChannel+0x22>
 800740e:	2302      	movs	r3, #2
 8007410:	e048      	b.n	80074a4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	223c      	movs	r2, #60	; 0x3c
 8007416:	2101      	movs	r1, #1
 8007418:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b14      	cmp	r3, #20
 800741e:	d835      	bhi.n	800748c <HAL_TIM_OC_ConfigChannel+0x9c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	4b21      	ldr	r3, [pc, #132]	; (80074ac <HAL_TIM_OC_ConfigChannel+0xbc>)
 8007426:	18d3      	adds	r3, r2, r3
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	0011      	movs	r1, r2
 8007434:	0018      	movs	r0, r3
 8007436:	f000 fa9d 	bl	8007974 <TIM_OC1_SetConfig>
      break;
 800743a:	e02c      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f000 fb15 	bl	8007a74 <TIM_OC2_SetConfig>
      break;
 800744a:	e024      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	0011      	movs	r1, r2
 8007454:	0018      	movs	r0, r3
 8007456:	f000 fb8b 	bl	8007b70 <TIM_OC3_SetConfig>
      break;
 800745a:	e01c      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	0011      	movs	r1, r2
 8007464:	0018      	movs	r0, r3
 8007466:	f000 fc05 	bl	8007c74 <TIM_OC4_SetConfig>
      break;
 800746a:	e014      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	0011      	movs	r1, r2
 8007474:	0018      	movs	r0, r3
 8007476:	f000 fc61 	bl	8007d3c <TIM_OC5_SetConfig>
      break;
 800747a:	e00c      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	0011      	movs	r1, r2
 8007484:	0018      	movs	r0, r3
 8007486:	f000 fcb3 	bl	8007df0 <TIM_OC6_SetConfig>
      break;
 800748a:	e004      	b.n	8007496 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800748c:	2317      	movs	r3, #23
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	2201      	movs	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
      break;
 8007494:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	223c      	movs	r2, #60	; 0x3c
 800749a:	2100      	movs	r1, #0
 800749c:	5499      	strb	r1, [r3, r2]

  return status;
 800749e:	2317      	movs	r3, #23
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	781b      	ldrb	r3, [r3, #0]
}
 80074a4:	0018      	movs	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b006      	add	sp, #24
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0800dd10 	.word	0x0800dd10

080074b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074bc:	2317      	movs	r3, #23
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	223c      	movs	r2, #60	; 0x3c
 80074c8:	5c9b      	ldrb	r3, [r3, r2]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0e5      	b.n	800769e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	223c      	movs	r2, #60	; 0x3c
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b14      	cmp	r3, #20
 80074de:	d900      	bls.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80074e0:	e0d1      	b.n	8007686 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	009a      	lsls	r2, r3, #2
 80074e6:	4b70      	ldr	r3, [pc, #448]	; (80076a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80074e8:	18d3      	adds	r3, r2, r3
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	0011      	movs	r1, r2
 80074f6:	0018      	movs	r0, r3
 80074f8:	f000 fa3c 	bl	8007974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2108      	movs	r1, #8
 8007508:	430a      	orrs	r2, r1
 800750a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2104      	movs	r1, #4
 8007518:	438a      	bics	r2, r1
 800751a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6999      	ldr	r1, [r3, #24]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	619a      	str	r2, [r3, #24]
      break;
 800752e:	e0af      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	0011      	movs	r1, r2
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fa9b 	bl	8007a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	0109      	lsls	r1, r1, #4
 800754c:	430a      	orrs	r2, r1
 800754e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4954      	ldr	r1, [pc, #336]	; (80076ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800755c:	400a      	ands	r2, r1
 800755e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6999      	ldr	r1, [r3, #24]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	021a      	lsls	r2, r3, #8
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	619a      	str	r2, [r3, #24]
      break;
 8007574:	e08c      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	0011      	movs	r1, r2
 800757e:	0018      	movs	r0, r3
 8007580:	f000 faf6 	bl	8007b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2108      	movs	r1, #8
 8007590:	430a      	orrs	r2, r1
 8007592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2104      	movs	r1, #4
 80075a0:	438a      	bics	r2, r1
 80075a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69d9      	ldr	r1, [r3, #28]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	61da      	str	r2, [r3, #28]
      break;
 80075b6:	e06b      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 fb57 	bl	8007c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2180      	movs	r1, #128	; 0x80
 80075d2:	0109      	lsls	r1, r1, #4
 80075d4:	430a      	orrs	r2, r1
 80075d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69da      	ldr	r2, [r3, #28]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4932      	ldr	r1, [pc, #200]	; (80076ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80075e4:	400a      	ands	r2, r1
 80075e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69d9      	ldr	r1, [r3, #28]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	021a      	lsls	r2, r3, #8
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	61da      	str	r2, [r3, #28]
      break;
 80075fc:	e048      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f000 fb98 	bl	8007d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2108      	movs	r1, #8
 8007618:	430a      	orrs	r2, r1
 800761a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2104      	movs	r1, #4
 8007628:	438a      	bics	r2, r1
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800763e:	e027      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	0011      	movs	r1, r2
 8007648:	0018      	movs	r0, r3
 800764a:	f000 fbd1 	bl	8007df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	0109      	lsls	r1, r1, #4
 800765c:	430a      	orrs	r2, r1
 800765e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4910      	ldr	r1, [pc, #64]	; (80076ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800766c:	400a      	ands	r2, r1
 800766e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007684:	e004      	b.n	8007690 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007686:	2317      	movs	r3, #23
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	223c      	movs	r2, #60	; 0x3c
 8007694:	2100      	movs	r1, #0
 8007696:	5499      	strb	r1, [r3, r2]

  return status;
 8007698:	2317      	movs	r3, #23
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	781b      	ldrb	r3, [r3, #0]
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b006      	add	sp, #24
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	0800dd64 	.word	0x0800dd64
 80076ac:	fffffbff 	.word	0xfffffbff

080076b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ba:	230f      	movs	r3, #15
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	223c      	movs	r2, #60	; 0x3c
 80076c6:	5c9b      	ldrb	r3, [r3, r2]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_TIM_ConfigClockSource+0x20>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e0bc      	b.n	800784a <HAL_TIM_ConfigClockSource+0x19a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	223c      	movs	r2, #60	; 0x3c
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	223d      	movs	r2, #61	; 0x3d
 80076dc:	2102      	movs	r1, #2
 80076de:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4a5a      	ldr	r2, [pc, #360]	; (8007854 <HAL_TIM_ConfigClockSource+0x1a4>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4a59      	ldr	r2, [pc, #356]	; (8007858 <HAL_TIM_ConfigClockSource+0x1a8>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2280      	movs	r2, #128	; 0x80
 8007706:	0192      	lsls	r2, r2, #6
 8007708:	4293      	cmp	r3, r2
 800770a:	d040      	beq.n	800778e <HAL_TIM_ConfigClockSource+0xde>
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	0192      	lsls	r2, r2, #6
 8007710:	4293      	cmp	r3, r2
 8007712:	d900      	bls.n	8007716 <HAL_TIM_ConfigClockSource+0x66>
 8007714:	e088      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 8007716:	2280      	movs	r2, #128	; 0x80
 8007718:	0152      	lsls	r2, r2, #5
 800771a:	4293      	cmp	r3, r2
 800771c:	d100      	bne.n	8007720 <HAL_TIM_ConfigClockSource+0x70>
 800771e:	e088      	b.n	8007832 <HAL_TIM_ConfigClockSource+0x182>
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	0152      	lsls	r2, r2, #5
 8007724:	4293      	cmp	r3, r2
 8007726:	d900      	bls.n	800772a <HAL_TIM_ConfigClockSource+0x7a>
 8007728:	e07e      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 800772a:	2b70      	cmp	r3, #112	; 0x70
 800772c:	d018      	beq.n	8007760 <HAL_TIM_ConfigClockSource+0xb0>
 800772e:	d900      	bls.n	8007732 <HAL_TIM_ConfigClockSource+0x82>
 8007730:	e07a      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 8007732:	2b60      	cmp	r3, #96	; 0x60
 8007734:	d04f      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x126>
 8007736:	d900      	bls.n	800773a <HAL_TIM_ConfigClockSource+0x8a>
 8007738:	e076      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 800773a:	2b50      	cmp	r3, #80	; 0x50
 800773c:	d03b      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x106>
 800773e:	d900      	bls.n	8007742 <HAL_TIM_ConfigClockSource+0x92>
 8007740:	e072      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d057      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x146>
 8007746:	d900      	bls.n	800774a <HAL_TIM_ConfigClockSource+0x9a>
 8007748:	e06e      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 800774a:	2b30      	cmp	r3, #48	; 0x30
 800774c:	d063      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x166>
 800774e:	d86b      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 8007750:	2b20      	cmp	r3, #32
 8007752:	d060      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x166>
 8007754:	d868      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d05d      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x166>
 800775a:	2b10      	cmp	r3, #16
 800775c:	d05b      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x166>
 800775e:	e063      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	6899      	ldr	r1, [r3, #8]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f000 fc18 	bl	8007fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2277      	movs	r2, #119	; 0x77
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
      break;
 800778c:	e052      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6899      	ldr	r1, [r3, #8]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f000 fc01 	bl	8007fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2180      	movs	r1, #128	; 0x80
 80077ae:	01c9      	lsls	r1, r1, #7
 80077b0:	430a      	orrs	r2, r1
 80077b2:	609a      	str	r2, [r3, #8]
      break;
 80077b4:	e03e      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	001a      	movs	r2, r3
 80077c4:	f000 fb72 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2150      	movs	r1, #80	; 0x50
 80077ce:	0018      	movs	r0, r3
 80077d0:	f000 fbcc 	bl	8007f6c <TIM_ITRx_SetConfig>
      break;
 80077d4:	e02e      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	001a      	movs	r2, r3
 80077e4:	f000 fb90 	bl	8007f08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2160      	movs	r1, #96	; 0x60
 80077ee:	0018      	movs	r0, r3
 80077f0:	f000 fbbc 	bl	8007f6c <TIM_ITRx_SetConfig>
      break;
 80077f4:	e01e      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	001a      	movs	r2, r3
 8007804:	f000 fb52 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2140      	movs	r1, #64	; 0x40
 800780e:	0018      	movs	r0, r3
 8007810:	f000 fbac 	bl	8007f6c <TIM_ITRx_SetConfig>
      break;
 8007814:	e00e      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	0019      	movs	r1, r3
 8007820:	0010      	movs	r0, r2
 8007822:	f000 fba3 	bl	8007f6c <TIM_ITRx_SetConfig>
      break;
 8007826:	e005      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007828:	230f      	movs	r3, #15
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2201      	movs	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e000      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007832:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	223d      	movs	r2, #61	; 0x3d
 8007838:	2101      	movs	r1, #1
 800783a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	223c      	movs	r2, #60	; 0x3c
 8007840:	2100      	movs	r1, #0
 8007842:	5499      	strb	r1, [r3, r2]

  return status;
 8007844:	230f      	movs	r3, #15
 8007846:	18fb      	adds	r3, r7, r3
 8007848:	781b      	ldrb	r3, [r3, #0]
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bd80      	pop	{r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	ffceff88 	.word	0xffceff88
 8007858:	ffff00ff 	.word	0xffff00ff

0800785c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b002      	add	sp, #8
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	46bd      	mov	sp, r7
 8007898:	b002      	add	sp, #8
 800789a:	bd80      	pop	{r7, pc}

0800789c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a2b      	ldr	r2, [pc, #172]	; (800795c <TIM_Base_SetConfig+0xc0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0x20>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <TIM_Base_SetConfig+0xc4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d108      	bne.n	80078ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2270      	movs	r2, #112	; 0x70
 80078c0:	4393      	bics	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <TIM_Base_SetConfig+0xc0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <TIM_Base_SetConfig+0x5a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <TIM_Base_SetConfig+0xc4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <TIM_Base_SetConfig+0x5a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a20      	ldr	r2, [pc, #128]	; (8007964 <TIM_Base_SetConfig+0xc8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_Base_SetConfig+0x5a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <TIM_Base_SetConfig+0xcc>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_Base_SetConfig+0x5a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1e      	ldr	r2, [pc, #120]	; (800796c <TIM_Base_SetConfig+0xd0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d108      	bne.n	8007908 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a1d      	ldr	r2, [pc, #116]	; (8007970 <TIM_Base_SetConfig+0xd4>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	4393      	bics	r3, r2
 800790e:	001a      	movs	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a0a      	ldr	r2, [pc, #40]	; (800795c <TIM_Base_SetConfig+0xc0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <TIM_Base_SetConfig+0xaa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a0b      	ldr	r2, [pc, #44]	; (8007968 <TIM_Base_SetConfig+0xcc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d003      	beq.n	8007946 <TIM_Base_SetConfig+0xaa>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <TIM_Base_SetConfig+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d103      	bne.n	800794e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	615a      	str	r2, [r3, #20]
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	b004      	add	sp, #16
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40000400 	.word	0x40000400
 8007964:	40002000 	.word	0x40002000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800
 8007970:	fffffcff 	.word	0xfffffcff

08007974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	2201      	movs	r2, #1
 8007984:	4393      	bics	r3, r2
 8007986:	001a      	movs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a2e      	ldr	r2, [pc, #184]	; (8007a5c <TIM_OC1_SetConfig+0xe8>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2203      	movs	r2, #3
 80079aa:	4393      	bics	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2202      	movs	r2, #2
 80079bc:	4393      	bics	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a24      	ldr	r2, [pc, #144]	; (8007a60 <TIM_OC1_SetConfig+0xec>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_OC1_SetConfig+0x6e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a23      	ldr	r2, [pc, #140]	; (8007a64 <TIM_OC1_SetConfig+0xf0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_OC1_SetConfig+0x6e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a22      	ldr	r2, [pc, #136]	; (8007a68 <TIM_OC1_SetConfig+0xf4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d10c      	bne.n	80079fc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2208      	movs	r2, #8
 80079e6:	4393      	bics	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2204      	movs	r2, #4
 80079f8:	4393      	bics	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <TIM_OC1_SetConfig+0xec>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d007      	beq.n	8007a14 <TIM_OC1_SetConfig+0xa0>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC1_SetConfig+0xf0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0xa0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC1_SetConfig+0xf4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d111      	bne.n	8007a38 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <TIM_OC1_SetConfig+0xf8>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <TIM_OC1_SetConfig+0xfc>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	46bd      	mov	sp, r7
 8007a56:	b006      	add	sp, #24
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	fffeff8f 	.word	0xfffeff8f
 8007a60:	40012c00 	.word	0x40012c00
 8007a64:	40014400 	.word	0x40014400
 8007a68:	40014800 	.word	0x40014800
 8007a6c:	fffffeff 	.word	0xfffffeff
 8007a70:	fffffdff 	.word	0xfffffdff

08007a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	2210      	movs	r2, #16
 8007a84:	4393      	bics	r3, r2
 8007a86:	001a      	movs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	; (8007b54 <TIM_OC2_SetConfig+0xe0>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4a2b      	ldr	r2, [pc, #172]	; (8007b58 <TIM_OC2_SetConfig+0xe4>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2220      	movs	r2, #32
 8007abe:	4393      	bics	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <TIM_OC2_SetConfig+0xe8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10d      	bne.n	8007af2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2280      	movs	r2, #128	; 0x80
 8007ada:	4393      	bics	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2240      	movs	r2, #64	; 0x40
 8007aee:	4393      	bics	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a19      	ldr	r2, [pc, #100]	; (8007b5c <TIM_OC2_SetConfig+0xe8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d007      	beq.n	8007b0a <TIM_OC2_SetConfig+0x96>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <TIM_OC2_SetConfig+0xec>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_OC2_SetConfig+0x96>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a17      	ldr	r2, [pc, #92]	; (8007b64 <TIM_OC2_SetConfig+0xf0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d113      	bne.n	8007b32 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <TIM_OC2_SetConfig+0xf4>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <TIM_OC2_SetConfig+0xf8>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	621a      	str	r2, [r3, #32]
}
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b006      	add	sp, #24
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	feff8fff 	.word	0xfeff8fff
 8007b58:	fffffcff 	.word	0xfffffcff
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40014400 	.word	0x40014400
 8007b64:	40014800 	.word	0x40014800
 8007b68:	fffffbff 	.word	0xfffffbff
 8007b6c:	fffff7ff 	.word	0xfffff7ff

08007b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	4a33      	ldr	r2, [pc, #204]	; (8007c4c <TIM_OC3_SetConfig+0xdc>)
 8007b80:	401a      	ands	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	; (8007c50 <TIM_OC3_SetConfig+0xe0>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	4393      	bics	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	; (8007c54 <TIM_OC3_SetConfig+0xe4>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a23      	ldr	r2, [pc, #140]	; (8007c58 <TIM_OC3_SetConfig+0xe8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d10d      	bne.n	8007bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <TIM_OC3_SetConfig+0xec>)
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4a1e      	ldr	r2, [pc, #120]	; (8007c60 <TIM_OC3_SetConfig+0xf0>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1a      	ldr	r2, [pc, #104]	; (8007c58 <TIM_OC3_SetConfig+0xe8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d007      	beq.n	8007c02 <TIM_OC3_SetConfig+0x92>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <TIM_OC3_SetConfig+0xf4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_OC3_SetConfig+0x92>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <TIM_OC3_SetConfig+0xf8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d113      	bne.n	8007c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <TIM_OC3_SetConfig+0xfc>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <TIM_OC3_SetConfig+0x100>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	621a      	str	r2, [r3, #32]
}
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b006      	add	sp, #24
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	fffffeff 	.word	0xfffffeff
 8007c50:	fffeff8f 	.word	0xfffeff8f
 8007c54:	fffffdff 	.word	0xfffffdff
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	fffff7ff 	.word	0xfffff7ff
 8007c60:	fffffbff 	.word	0xfffffbff
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800
 8007c6c:	ffffefff 	.word	0xffffefff
 8007c70:	ffffdfff 	.word	0xffffdfff

08007c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	4a26      	ldr	r2, [pc, #152]	; (8007d1c <TIM_OC4_SetConfig+0xa8>)
 8007c84:	401a      	ands	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <TIM_OC4_SetConfig+0xac>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <TIM_OC4_SetConfig+0xb0>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4a1b      	ldr	r2, [pc, #108]	; (8007d28 <TIM_OC4_SetConfig+0xb4>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	031b      	lsls	r3, r3, #12
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a17      	ldr	r2, [pc, #92]	; (8007d2c <TIM_OC4_SetConfig+0xb8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x70>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <TIM_OC4_SetConfig+0xbc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x70>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <TIM_OC4_SetConfig+0xc0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d109      	bne.n	8007cf8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	4a14      	ldr	r2, [pc, #80]	; (8007d38 <TIM_OC4_SetConfig+0xc4>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b006      	add	sp, #24
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	ffffefff 	.word	0xffffefff
 8007d20:	feff8fff 	.word	0xfeff8fff
 8007d24:	fffffcff 	.word	0xfffffcff
 8007d28:	ffffdfff 	.word	0xffffdfff
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800
 8007d38:	ffffbfff 	.word	0xffffbfff

08007d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <TIM_OC5_SetConfig+0x9c>)
 8007d4c:	401a      	ands	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <TIM_OC5_SetConfig+0xa0>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <TIM_OC5_SetConfig+0xa4>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a15      	ldr	r2, [pc, #84]	; (8007de4 <TIM_OC5_SetConfig+0xa8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d007      	beq.n	8007da2 <TIM_OC5_SetConfig+0x66>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <TIM_OC5_SetConfig+0xac>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <TIM_OC5_SetConfig+0x66>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <TIM_OC5_SetConfig+0xb0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d109      	bne.n	8007db6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <TIM_OC5_SetConfig+0x9c>)
 8007da6:	4013      	ands	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	46c0      	nop			; (mov r8, r8)
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b006      	add	sp, #24
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	fffeffff 	.word	0xfffeffff
 8007ddc:	fffeff8f 	.word	0xfffeff8f
 8007de0:	fffdffff 	.word	0xfffdffff
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4a24      	ldr	r2, [pc, #144]	; (8007e90 <TIM_OC6_SetConfig+0xa0>)
 8007e00:	401a      	ands	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a1e      	ldr	r2, [pc, #120]	; (8007e94 <TIM_OC6_SetConfig+0xa4>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	; (8007e98 <TIM_OC6_SetConfig+0xa8>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	051b      	lsls	r3, r3, #20
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <TIM_OC6_SetConfig+0xac>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_OC6_SetConfig+0x68>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <TIM_OC6_SetConfig+0xb0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_OC6_SetConfig+0x68>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a14      	ldr	r2, [pc, #80]	; (8007ea4 <TIM_OC6_SetConfig+0xb4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d109      	bne.n	8007e6c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <TIM_OC6_SetConfig+0xb8>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b006      	add	sp, #24
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	ffefffff 	.word	0xffefffff
 8007e94:	feff8fff 	.word	0xfeff8fff
 8007e98:	ffdfffff 	.word	0xffdfffff
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800
 8007ea8:	fffbffff 	.word	0xfffbffff

08007eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4393      	bics	r3, r2
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	22f0      	movs	r2, #240	; 0xf0
 8007ed6:	4393      	bics	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	220a      	movs	r2, #10
 8007ee8:	4393      	bics	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	46c0      	nop			; (mov r8, r8)
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b006      	add	sp, #24
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	4393      	bics	r3, r2
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	4a0d      	ldr	r2, [pc, #52]	; (8007f68 <TIM_TI2_ConfigInputStage+0x60>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	031b      	lsls	r3, r3, #12
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	22a0      	movs	r2, #160	; 0xa0
 8007f44:	4393      	bics	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b006      	add	sp, #24
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	ffff0fff 	.word	0xffff0fff

08007f6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a08      	ldr	r2, [pc, #32]	; (8007fa0 <TIM_ITRx_SetConfig+0x34>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	2207      	movs	r2, #7
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	609a      	str	r2, [r3, #8]
}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b004      	add	sp, #16
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	ffcfff8f 	.word	0xffcfff8f

08007fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <TIM_ETR_SetConfig+0x3c>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	021a      	lsls	r2, r3, #8
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	609a      	str	r2, [r3, #8]
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b006      	add	sp, #24
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	ffff00ff 	.word	0xffff00ff

08007fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	221f      	movs	r2, #31
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	0013      	movs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	43d2      	mvns	r2, r2
 8008006:	401a      	ands	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	211f      	movs	r1, #31
 8008014:	400b      	ands	r3, r1
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4099      	lsls	r1, r3
 800801a:	000b      	movs	r3, r1
 800801c:	431a      	orrs	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	46bd      	mov	sp, r7
 8008026:	b006      	add	sp, #24
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	223c      	movs	r2, #60	; 0x3c
 800803a:	5c9b      	ldrb	r3, [r3, r2]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008040:	2302      	movs	r3, #2
 8008042:	e04a      	b.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	223c      	movs	r2, #60	; 0x3c
 8008048:	2101      	movs	r1, #1
 800804a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	223d      	movs	r2, #61	; 0x3d
 8008050:	2102      	movs	r1, #2
 8008052:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1e      	ldr	r2, [pc, #120]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d108      	bne.n	8008080 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4a1d      	ldr	r2, [pc, #116]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008072:	4013      	ands	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2270      	movs	r2, #112	; 0x70
 8008084:	4393      	bics	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a11      	ldr	r2, [pc, #68]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a10      	ldr	r2, [pc, #64]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d10c      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2280      	movs	r2, #128	; 0x80
 80080b2:	4393      	bics	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	223d      	movs	r2, #61	; 0x3d
 80080cc:	2101      	movs	r1, #1
 80080ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	223c      	movs	r2, #60	; 0x3c
 80080d4:	2100      	movs	r1, #0
 80080d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	0018      	movs	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	b004      	add	sp, #16
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	ff0fffff 	.word	0xff0fffff
 80080ec:	40000400 	.word	0x40000400

080080f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	223c      	movs	r2, #60	; 0x3c
 8008102:	5c9b      	ldrb	r3, [r3, r2]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008108:	2302      	movs	r3, #2
 800810a:	e079      	b.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	223c      	movs	r2, #60	; 0x3c
 8008110:	2101      	movs	r1, #1
 8008112:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	22ff      	movs	r2, #255	; 0xff
 8008118:	4393      	bics	r3, r2
 800811a:	001a      	movs	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4313      	orrs	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4a38      	ldr	r2, [pc, #224]	; (8008208 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008128:	401a      	ands	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4a35      	ldr	r2, [pc, #212]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008136:	401a      	ands	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a33      	ldr	r2, [pc, #204]	; (8008210 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008144:	401a      	ands	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a30      	ldr	r2, [pc, #192]	; (8008214 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008152:	401a      	ands	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a2e      	ldr	r2, [pc, #184]	; (8008218 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008160:	401a      	ands	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a2b      	ldr	r2, [pc, #172]	; (800821c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800816e:	401a      	ands	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a29      	ldr	r2, [pc, #164]	; (8008220 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800817c:	401a      	ands	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a25      	ldr	r2, [pc, #148]	; (8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d106      	bne.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a24      	ldr	r2, [pc, #144]	; (8008228 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008196:	401a      	ands	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d121      	bne.n	80081ee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a1f      	ldr	r2, [pc, #124]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80081ae:	401a      	ands	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	051b      	lsls	r3, r3, #20
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80081be:	401a      	ands	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a1a      	ldr	r2, [pc, #104]	; (8008234 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80081cc:	401a      	ands	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d106      	bne.n	80081ee <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80081e4:	401a      	ands	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	223c      	movs	r2, #60	; 0x3c
 80081fa:	2100      	movs	r1, #0
 80081fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	0018      	movs	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	b004      	add	sp, #16
 8008206:	bd80      	pop	{r7, pc}
 8008208:	fffffcff 	.word	0xfffffcff
 800820c:	fffffbff 	.word	0xfffffbff
 8008210:	fffff7ff 	.word	0xfffff7ff
 8008214:	ffffefff 	.word	0xffffefff
 8008218:	ffffdfff 	.word	0xffffdfff
 800821c:	ffffbfff 	.word	0xffffbfff
 8008220:	fff0ffff 	.word	0xfff0ffff
 8008224:	40012c00 	.word	0x40012c00
 8008228:	efffffff 	.word	0xefffffff
 800822c:	ff0fffff 	.word	0xff0fffff
 8008230:	feffffff 	.word	0xfeffffff
 8008234:	fdffffff 	.word	0xfdffffff
 8008238:	dfffffff 	.word	0xdfffffff

0800823c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	b002      	add	sp, #8
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	b002      	add	sp, #8
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008264:	46c0      	nop			; (mov r8, r8)
 8008266:	46bd      	mov	sp, r7
 8008268:	b002      	add	sp, #8
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	1dbb      	adds	r3, r7, #6
 800827a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2284      	movs	r2, #132	; 0x84
 8008280:	589b      	ldr	r3, [r3, r2]
 8008282:	2b20      	cmp	r3, #32
 8008284:	d000      	beq.n	8008288 <HAL_UART_Transmit+0x1c>
 8008286:	e097      	b.n	80083b8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_Transmit+0x2a>
 800828e:	1dbb      	adds	r3, r7, #6
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e08f      	b.n	80083ba <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	2380      	movs	r3, #128	; 0x80
 80082a0:	015b      	lsls	r3, r3, #5
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d109      	bne.n	80082ba <HAL_UART_Transmit+0x4e>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2201      	movs	r2, #1
 80082b2:	4013      	ands	r3, r2
 80082b4:	d001      	beq.n	80082ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e07f      	b.n	80083ba <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	5c9b      	ldrb	r3, [r3, r2]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_UART_Transmit+0x5c>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e078      	b.n	80083ba <HAL_UART_Transmit+0x14e>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2280      	movs	r2, #128	; 0x80
 80082cc:	2101      	movs	r1, #1
 80082ce:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	228c      	movs	r2, #140	; 0x8c
 80082d4:	2100      	movs	r1, #0
 80082d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2284      	movs	r2, #132	; 0x84
 80082dc:	2121      	movs	r1, #33	; 0x21
 80082de:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082e0:	f7fb fbd4 	bl	8003a8c <HAL_GetTick>
 80082e4:	0003      	movs	r3, r0
 80082e6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1dba      	adds	r2, r7, #6
 80082ec:	2154      	movs	r1, #84	; 0x54
 80082ee:	8812      	ldrh	r2, [r2, #0]
 80082f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1dba      	adds	r2, r7, #6
 80082f6:	2156      	movs	r1, #86	; 0x56
 80082f8:	8812      	ldrh	r2, [r2, #0]
 80082fa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	015b      	lsls	r3, r3, #5
 8008304:	429a      	cmp	r2, r3
 8008306:	d108      	bne.n	800831a <HAL_UART_Transmit+0xae>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	e003      	b.n	8008322 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2280      	movs	r2, #128	; 0x80
 8008326:	2100      	movs	r1, #0
 8008328:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800832a:	e02c      	b.n	8008386 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	0013      	movs	r3, r2
 8008336:	2200      	movs	r2, #0
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	f000 fde1 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 800833e:	1e03      	subs	r3, r0, #0
 8008340:	d001      	beq.n	8008346 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e039      	b.n	80083ba <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	001a      	movs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	05d2      	lsls	r2, r2, #23
 8008358:	0dd2      	lsrs	r2, r2, #23
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	3302      	adds	r3, #2
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	e007      	b.n	8008374 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	3301      	adds	r3, #1
 8008372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2256      	movs	r2, #86	; 0x56
 8008378:	5a9b      	ldrh	r3, [r3, r2]
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	b299      	uxth	r1, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2256      	movs	r2, #86	; 0x56
 8008384:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2256      	movs	r2, #86	; 0x56
 800838a:	5a9b      	ldrh	r3, [r3, r2]
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1cc      	bne.n	800832c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	0013      	movs	r3, r2
 800839c:	2200      	movs	r2, #0
 800839e:	2140      	movs	r1, #64	; 0x40
 80083a0:	f000 fdae 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 80083a4:	1e03      	subs	r3, r0, #0
 80083a6:	d001      	beq.n	80083ac <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e006      	b.n	80083ba <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2284      	movs	r2, #132	; 0x84
 80083b0:	2120      	movs	r1, #32
 80083b2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e000      	b.n	80083ba <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80083b8:	2302      	movs	r3, #2
  }
}
 80083ba:	0018      	movs	r0, r3
 80083bc:	46bd      	mov	sp, r7
 80083be:	b008      	add	sp, #32
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083c4:	b5b0      	push	{r4, r5, r7, lr}
 80083c6:	b0aa      	sub	sp, #168	; 0xa8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	22a4      	movs	r2, #164	; 0xa4
 80083d4:	18b9      	adds	r1, r7, r2
 80083d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	20a0      	movs	r0, #160	; 0xa0
 80083e0:	1839      	adds	r1, r7, r0
 80083e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	249c      	movs	r4, #156	; 0x9c
 80083ec:	1939      	adds	r1, r7, r4
 80083ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083f0:	0011      	movs	r1, r2
 80083f2:	18bb      	adds	r3, r7, r2
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4aa0      	ldr	r2, [pc, #640]	; (8008678 <HAL_UART_IRQHandler+0x2b4>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	2298      	movs	r2, #152	; 0x98
 80083fc:	18bd      	adds	r5, r7, r2
 80083fe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008400:	18bb      	adds	r3, r7, r2
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11a      	bne.n	800843e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008408:	187b      	adds	r3, r7, r1
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2220      	movs	r2, #32
 800840e:	4013      	ands	r3, r2
 8008410:	d015      	beq.n	800843e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008412:	183b      	adds	r3, r7, r0
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2220      	movs	r2, #32
 8008418:	4013      	ands	r3, r2
 800841a:	d105      	bne.n	8008428 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800841c:	193b      	adds	r3, r7, r4
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	055b      	lsls	r3, r3, #21
 8008424:	4013      	ands	r3, r2
 8008426:	d00a      	beq.n	800843e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	2b00      	cmp	r3, #0
 800842e:	d100      	bne.n	8008432 <HAL_UART_IRQHandler+0x6e>
 8008430:	e2cf      	b.n	80089d2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	0010      	movs	r0, r2
 800843a:	4798      	blx	r3
      }
      return;
 800843c:	e2c9      	b.n	80089d2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800843e:	2398      	movs	r3, #152	; 0x98
 8008440:	18fb      	adds	r3, r7, r3
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d100      	bne.n	800844a <HAL_UART_IRQHandler+0x86>
 8008448:	e11e      	b.n	8008688 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800844a:	239c      	movs	r3, #156	; 0x9c
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a8a      	ldr	r2, [pc, #552]	; (800867c <HAL_UART_IRQHandler+0x2b8>)
 8008452:	4013      	ands	r3, r2
 8008454:	d106      	bne.n	8008464 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008456:	23a0      	movs	r3, #160	; 0xa0
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a88      	ldr	r2, [pc, #544]	; (8008680 <HAL_UART_IRQHandler+0x2bc>)
 800845e:	4013      	ands	r3, r2
 8008460:	d100      	bne.n	8008464 <HAL_UART_IRQHandler+0xa0>
 8008462:	e111      	b.n	8008688 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008464:	23a4      	movs	r3, #164	; 0xa4
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2201      	movs	r2, #1
 800846c:	4013      	ands	r3, r2
 800846e:	d012      	beq.n	8008496 <HAL_UART_IRQHandler+0xd2>
 8008470:	23a0      	movs	r3, #160	; 0xa0
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	2380      	movs	r3, #128	; 0x80
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4013      	ands	r3, r2
 800847c:	d00b      	beq.n	8008496 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2201      	movs	r2, #1
 8008484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	228c      	movs	r2, #140	; 0x8c
 800848a:	589b      	ldr	r3, [r3, r2]
 800848c:	2201      	movs	r2, #1
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	218c      	movs	r1, #140	; 0x8c
 8008494:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008496:	23a4      	movs	r3, #164	; 0xa4
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2202      	movs	r2, #2
 800849e:	4013      	ands	r3, r2
 80084a0:	d011      	beq.n	80084c6 <HAL_UART_IRQHandler+0x102>
 80084a2:	239c      	movs	r3, #156	; 0x9c
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2201      	movs	r2, #1
 80084aa:	4013      	ands	r3, r2
 80084ac:	d00b      	beq.n	80084c6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2202      	movs	r2, #2
 80084b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	228c      	movs	r2, #140	; 0x8c
 80084ba:	589b      	ldr	r3, [r3, r2]
 80084bc:	2204      	movs	r2, #4
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	218c      	movs	r1, #140	; 0x8c
 80084c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084c6:	23a4      	movs	r3, #164	; 0xa4
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2204      	movs	r2, #4
 80084ce:	4013      	ands	r3, r2
 80084d0:	d011      	beq.n	80084f6 <HAL_UART_IRQHandler+0x132>
 80084d2:	239c      	movs	r3, #156	; 0x9c
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2201      	movs	r2, #1
 80084da:	4013      	ands	r3, r2
 80084dc:	d00b      	beq.n	80084f6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2204      	movs	r2, #4
 80084e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	228c      	movs	r2, #140	; 0x8c
 80084ea:	589b      	ldr	r3, [r3, r2]
 80084ec:	2202      	movs	r2, #2
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	218c      	movs	r1, #140	; 0x8c
 80084f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084f6:	23a4      	movs	r3, #164	; 0xa4
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2208      	movs	r2, #8
 80084fe:	4013      	ands	r3, r2
 8008500:	d017      	beq.n	8008532 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008502:	23a0      	movs	r3, #160	; 0xa0
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2220      	movs	r2, #32
 800850a:	4013      	ands	r3, r2
 800850c:	d105      	bne.n	800851a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800850e:	239c      	movs	r3, #156	; 0x9c
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a59      	ldr	r2, [pc, #356]	; (800867c <HAL_UART_IRQHandler+0x2b8>)
 8008516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008518:	d00b      	beq.n	8008532 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2208      	movs	r2, #8
 8008520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	228c      	movs	r2, #140	; 0x8c
 8008526:	589b      	ldr	r3, [r3, r2]
 8008528:	2208      	movs	r2, #8
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	218c      	movs	r1, #140	; 0x8c
 8008530:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008532:	23a4      	movs	r3, #164	; 0xa4
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	4013      	ands	r3, r2
 800853e:	d013      	beq.n	8008568 <HAL_UART_IRQHandler+0x1a4>
 8008540:	23a0      	movs	r3, #160	; 0xa0
 8008542:	18fb      	adds	r3, r7, r3
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	04db      	lsls	r3, r3, #19
 800854a:	4013      	ands	r3, r2
 800854c:	d00c      	beq.n	8008568 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2280      	movs	r2, #128	; 0x80
 8008554:	0112      	lsls	r2, r2, #4
 8008556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	228c      	movs	r2, #140	; 0x8c
 800855c:	589b      	ldr	r3, [r3, r2]
 800855e:	2220      	movs	r2, #32
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	218c      	movs	r1, #140	; 0x8c
 8008566:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	228c      	movs	r2, #140	; 0x8c
 800856c:	589b      	ldr	r3, [r3, r2]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d100      	bne.n	8008574 <HAL_UART_IRQHandler+0x1b0>
 8008572:	e230      	b.n	80089d6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008574:	23a4      	movs	r3, #164	; 0xa4
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2220      	movs	r2, #32
 800857c:	4013      	ands	r3, r2
 800857e:	d015      	beq.n	80085ac <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008580:	23a0      	movs	r3, #160	; 0xa0
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2220      	movs	r2, #32
 8008588:	4013      	ands	r3, r2
 800858a:	d106      	bne.n	800859a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800858c:	239c      	movs	r3, #156	; 0x9c
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	055b      	lsls	r3, r3, #21
 8008596:	4013      	ands	r3, r2
 8008598:	d008      	beq.n	80085ac <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	0010      	movs	r0, r2
 80085aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	228c      	movs	r2, #140	; 0x8c
 80085b0:	589b      	ldr	r3, [r3, r2]
 80085b2:	2194      	movs	r1, #148	; 0x94
 80085b4:	187a      	adds	r2, r7, r1
 80085b6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2240      	movs	r2, #64	; 0x40
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d004      	beq.n	80085d0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2228      	movs	r2, #40	; 0x28
 80085cc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085ce:	d047      	beq.n	8008660 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 fd5c 	bl	8009090 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2240      	movs	r2, #64	; 0x40
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d137      	bne.n	8008656 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ea:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80085ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ee:	2090      	movs	r0, #144	; 0x90
 80085f0:	183a      	adds	r2, r7, r0
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	2301      	movs	r3, #1
 80085f6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085fa:	f383 8810 	msr	PRIMASK, r3
}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2140      	movs	r1, #64	; 0x40
 800860c:	438a      	bics	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	183b      	adds	r3, r7, r0
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008618:	f383 8810 	msr	PRIMASK, r3
}
 800861c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d012      	beq.n	800864c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862a:	4a16      	ldr	r2, [pc, #88]	; (8008684 <HAL_UART_IRQHandler+0x2c0>)
 800862c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008632:	0018      	movs	r0, r3
 8008634:	f7fc fe24 	bl	8005280 <HAL_DMA_Abort_IT>
 8008638:	1e03      	subs	r3, r0, #0
 800863a:	d01a      	beq.n	8008672 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	0018      	movs	r0, r3
 8008648:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864a:	e012      	b.n	8008672 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	0018      	movs	r0, r3
 8008650:	f000 f9da 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	e00d      	b.n	8008672 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	0018      	movs	r0, r3
 800865a:	f000 f9d5 	bl	8008a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865e:	e008      	b.n	8008672 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	0018      	movs	r0, r3
 8008664:	f000 f9d0 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	228c      	movs	r2, #140	; 0x8c
 800866c:	2100      	movs	r1, #0
 800866e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008670:	e1b1      	b.n	80089d6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008672:	46c0      	nop			; (mov r8, r8)
    return;
 8008674:	e1af      	b.n	80089d6 <HAL_UART_IRQHandler+0x612>
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	0000080f 	.word	0x0000080f
 800867c:	10000001 	.word	0x10000001
 8008680:	04000120 	.word	0x04000120
 8008684:	0800915d 	.word	0x0800915d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d000      	beq.n	8008692 <HAL_UART_IRQHandler+0x2ce>
 8008690:	e135      	b.n	80088fe <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008692:	23a4      	movs	r3, #164	; 0xa4
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2210      	movs	r2, #16
 800869a:	4013      	ands	r3, r2
 800869c:	d100      	bne.n	80086a0 <HAL_UART_IRQHandler+0x2dc>
 800869e:	e12e      	b.n	80088fe <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086a0:	23a0      	movs	r3, #160	; 0xa0
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2210      	movs	r2, #16
 80086a8:	4013      	ands	r3, r2
 80086aa:	d100      	bne.n	80086ae <HAL_UART_IRQHandler+0x2ea>
 80086ac:	e127      	b.n	80088fe <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2210      	movs	r2, #16
 80086b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2240      	movs	r2, #64	; 0x40
 80086be:	4013      	ands	r3, r2
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d000      	beq.n	80086c6 <HAL_UART_IRQHandler+0x302>
 80086c4:	e09e      	b.n	8008804 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	217e      	movs	r1, #126	; 0x7e
 80086d0:	187b      	adds	r3, r7, r1
 80086d2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d100      	bne.n	80086de <HAL_UART_IRQHandler+0x31a>
 80086dc:	e17d      	b.n	80089da <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	225c      	movs	r2, #92	; 0x5c
 80086e2:	5a9b      	ldrh	r3, [r3, r2]
 80086e4:	187a      	adds	r2, r7, r1
 80086e6:	8812      	ldrh	r2, [r2, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d300      	bcc.n	80086ee <HAL_UART_IRQHandler+0x32a>
 80086ec:	e175      	b.n	80089da <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	187a      	adds	r2, r7, r1
 80086f2:	215e      	movs	r1, #94	; 0x5e
 80086f4:	8812      	ldrh	r2, [r2, #0]
 80086f6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2220      	movs	r2, #32
 8008702:	4013      	ands	r3, r2
 8008704:	d16f      	bne.n	80087e6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008706:	f3ef 8310 	mrs	r3, PRIMASK
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008710:	2301      	movs	r3, #1
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	f383 8810 	msr	PRIMASK, r3
}
 800871a:	46c0      	nop			; (mov r8, r8)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	49b1      	ldr	r1, [pc, #708]	; (80089ec <HAL_UART_IRQHandler+0x628>)
 8008728:	400a      	ands	r2, r1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800872e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	f383 8810 	msr	PRIMASK, r3
}
 8008736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008738:	f3ef 8310 	mrs	r3, PRIMASK
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	677b      	str	r3, [r7, #116]	; 0x74
 8008742:	2301      	movs	r3, #1
 8008744:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008748:	f383 8810 	msr	PRIMASK, r3
}
 800874c:	46c0      	nop			; (mov r8, r8)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2101      	movs	r1, #1
 800875a:	438a      	bics	r2, r1
 800875c:	609a      	str	r2, [r3, #8]
 800875e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008760:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800876a:	f3ef 8310 	mrs	r3, PRIMASK
 800876e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008770:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008772:	673b      	str	r3, [r7, #112]	; 0x70
 8008774:	2301      	movs	r3, #1
 8008776:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877a:	f383 8810 	msr	PRIMASK, r3
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2140      	movs	r1, #64	; 0x40
 800878c:	438a      	bics	r2, r1
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008792:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008796:	f383 8810 	msr	PRIMASK, r3
}
 800879a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2288      	movs	r2, #136	; 0x88
 80087a0:	2120      	movs	r1, #32
 80087a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087aa:	f3ef 8310 	mrs	r3, PRIMASK
 80087ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80087b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b4:	2301      	movs	r3, #1
 80087b6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ba:	f383 8810 	msr	PRIMASK, r3
}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2110      	movs	r1, #16
 80087cc:	438a      	bics	r2, r1
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d6:	f383 8810 	msr	PRIMASK, r3
}
 80087da:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e0:	0018      	movs	r0, r3
 80087e2:	f7fc fceb 	bl	80051bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	225c      	movs	r2, #92	; 0x5c
 80087ea:	5a9a      	ldrh	r2, [r3, r2]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	215e      	movs	r1, #94	; 0x5e
 80087f0:	5a5b      	ldrh	r3, [r3, r1]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	0011      	movs	r1, r2
 80087fc:	0018      	movs	r0, r3
 80087fe:	f000 f90b 	bl	8008a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008802:	e0ea      	b.n	80089da <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	225c      	movs	r2, #92	; 0x5c
 8008808:	5a99      	ldrh	r1, [r3, r2]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	225e      	movs	r2, #94	; 0x5e
 800880e:	5a9b      	ldrh	r3, [r3, r2]
 8008810:	b29a      	uxth	r2, r3
 8008812:	208e      	movs	r0, #142	; 0x8e
 8008814:	183b      	adds	r3, r7, r0
 8008816:	1a8a      	subs	r2, r1, r2
 8008818:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	225e      	movs	r2, #94	; 0x5e
 800881e:	5a9b      	ldrh	r3, [r3, r2]
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d100      	bne.n	8008828 <HAL_UART_IRQHandler+0x464>
 8008826:	e0da      	b.n	80089de <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8008828:	183b      	adds	r3, r7, r0
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d100      	bne.n	8008832 <HAL_UART_IRQHandler+0x46e>
 8008830:	e0d5      	b.n	80089de <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008832:	f3ef 8310 	mrs	r3, PRIMASK
 8008836:	60fb      	str	r3, [r7, #12]
  return(result);
 8008838:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800883a:	2488      	movs	r4, #136	; 0x88
 800883c:	193a      	adds	r2, r7, r4
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	2301      	movs	r3, #1
 8008842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f383 8810 	msr	PRIMASK, r3
}
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4966      	ldr	r1, [pc, #408]	; (80089f0 <HAL_UART_IRQHandler+0x62c>)
 8008858:	400a      	ands	r2, r1
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	193b      	adds	r3, r7, r4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f383 8810 	msr	PRIMASK, r3
}
 8008868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886a:	f3ef 8310 	mrs	r3, PRIMASK
 800886e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008870:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008872:	2484      	movs	r4, #132	; 0x84
 8008874:	193a      	adds	r2, r7, r4
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	2301      	movs	r3, #1
 800887a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f383 8810 	msr	PRIMASK, r3
}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4959      	ldr	r1, [pc, #356]	; (80089f4 <HAL_UART_IRQHandler+0x630>)
 8008890:	400a      	ands	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	193b      	adds	r3, r7, r4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	f383 8810 	msr	PRIMASK, r3
}
 80088a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2288      	movs	r2, #136	; 0x88
 80088a6:	2120      	movs	r1, #32
 80088a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b6:	f3ef 8310 	mrs	r3, PRIMASK
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088be:	2480      	movs	r4, #128	; 0x80
 80088c0:	193a      	adds	r2, r7, r4
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	2301      	movs	r3, #1
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	f383 8810 	msr	PRIMASK, r3
}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2110      	movs	r1, #16
 80088dc:	438a      	bics	r2, r1
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	193b      	adds	r3, r7, r4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	f383 8810 	msr	PRIMASK, r3
}
 80088ec:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ee:	183b      	adds	r3, r7, r0
 80088f0:	881a      	ldrh	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	0011      	movs	r1, r2
 80088f6:	0018      	movs	r0, r3
 80088f8:	f000 f88e 	bl	8008a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088fc:	e06f      	b.n	80089de <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088fe:	23a4      	movs	r3, #164	; 0xa4
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	2380      	movs	r3, #128	; 0x80
 8008906:	035b      	lsls	r3, r3, #13
 8008908:	4013      	ands	r3, r2
 800890a:	d010      	beq.n	800892e <HAL_UART_IRQHandler+0x56a>
 800890c:	239c      	movs	r3, #156	; 0x9c
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	2380      	movs	r3, #128	; 0x80
 8008914:	03db      	lsls	r3, r3, #15
 8008916:	4013      	ands	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2280      	movs	r2, #128	; 0x80
 8008920:	0352      	lsls	r2, r2, #13
 8008922:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	0018      	movs	r0, r3
 8008928:	f000 fcce 	bl	80092c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800892c:	e05a      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800892e:	23a4      	movs	r3, #164	; 0xa4
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2280      	movs	r2, #128	; 0x80
 8008936:	4013      	ands	r3, r2
 8008938:	d016      	beq.n	8008968 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800893a:	23a0      	movs	r3, #160	; 0xa0
 800893c:	18fb      	adds	r3, r7, r3
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2280      	movs	r2, #128	; 0x80
 8008942:	4013      	ands	r3, r2
 8008944:	d106      	bne.n	8008954 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008946:	239c      	movs	r3, #156	; 0x9c
 8008948:	18fb      	adds	r3, r7, r3
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	2380      	movs	r3, #128	; 0x80
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	4013      	ands	r3, r2
 8008952:	d009      	beq.n	8008968 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008958:	2b00      	cmp	r3, #0
 800895a:	d042      	beq.n	80089e2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	0010      	movs	r0, r2
 8008964:	4798      	blx	r3
    }
    return;
 8008966:	e03c      	b.n	80089e2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008968:	23a4      	movs	r3, #164	; 0xa4
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2240      	movs	r2, #64	; 0x40
 8008970:	4013      	ands	r3, r2
 8008972:	d00a      	beq.n	800898a <HAL_UART_IRQHandler+0x5c6>
 8008974:	23a0      	movs	r3, #160	; 0xa0
 8008976:	18fb      	adds	r3, r7, r3
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2240      	movs	r2, #64	; 0x40
 800897c:	4013      	ands	r3, r2
 800897e:	d004      	beq.n	800898a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	0018      	movs	r0, r3
 8008984:	f000 fc01 	bl	800918a <UART_EndTransmit_IT>
    return;
 8008988:	e02c      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800898a:	23a4      	movs	r3, #164	; 0xa4
 800898c:	18fb      	adds	r3, r7, r3
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	041b      	lsls	r3, r3, #16
 8008994:	4013      	ands	r3, r2
 8008996:	d00b      	beq.n	80089b0 <HAL_UART_IRQHandler+0x5ec>
 8008998:	23a0      	movs	r3, #160	; 0xa0
 800899a:	18fb      	adds	r3, r7, r3
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	2380      	movs	r3, #128	; 0x80
 80089a0:	05db      	lsls	r3, r3, #23
 80089a2:	4013      	ands	r3, r2
 80089a4:	d004      	beq.n	80089b0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	0018      	movs	r0, r3
 80089aa:	f000 fc9d 	bl	80092e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ae:	e019      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b0:	23a4      	movs	r3, #164	; 0xa4
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	045b      	lsls	r3, r3, #17
 80089ba:	4013      	ands	r3, r2
 80089bc:	d012      	beq.n	80089e4 <HAL_UART_IRQHandler+0x620>
 80089be:	23a0      	movs	r3, #160	; 0xa0
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0d      	bge.n	80089e4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 fc84 	bl	80092d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d0:	e008      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
      return;
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	e006      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
    return;
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	e004      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
      return;
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	e002      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
      return;
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	e000      	b.n	80089e4 <HAL_UART_IRQHandler+0x620>
    return;
 80089e2:	46c0      	nop			; (mov r8, r8)
  }
}
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b02a      	add	sp, #168	; 0xa8
 80089e8:	bdb0      	pop	{r4, r5, r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	fffffeff 	.word	0xfffffeff
 80089f0:	fffffedf 	.word	0xfffffedf
 80089f4:	effffffe 	.word	0xeffffffe

080089f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a00:	46c0      	nop			; (mov r8, r8)
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b002      	add	sp, #8
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a10:	46c0      	nop			; (mov r8, r8)
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b002      	add	sp, #8
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	000a      	movs	r2, r1
 8008a22:	1cbb      	adds	r3, r7, #2
 8008a24:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b002      	add	sp, #8
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a38:	231a      	movs	r3, #26
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4aa1      	ldr	r2, [pc, #644]	; (8008ce4 <UART_SetConfig+0x2b4>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	0019      	movs	r1, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4a9c      	ldr	r2, [pc, #624]	; (8008ce8 <UART_SetConfig+0x2b8>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	0019      	movs	r1, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	4a93      	ldr	r2, [pc, #588]	; (8008cec <UART_SetConfig+0x2bc>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	220f      	movs	r2, #15
 8008ab4:	4393      	bics	r3, r2
 8008ab6:	0019      	movs	r1, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a89      	ldr	r2, [pc, #548]	; (8008cf0 <UART_SetConfig+0x2c0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d127      	bne.n	8008b1e <UART_SetConfig+0xee>
 8008ace:	4b89      	ldr	r3, [pc, #548]	; (8008cf4 <UART_SetConfig+0x2c4>)
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d017      	beq.n	8008b0a <UART_SetConfig+0xda>
 8008ada:	d81b      	bhi.n	8008b14 <UART_SetConfig+0xe4>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d00a      	beq.n	8008af6 <UART_SetConfig+0xc6>
 8008ae0:	d818      	bhi.n	8008b14 <UART_SetConfig+0xe4>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <UART_SetConfig+0xbc>
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d00a      	beq.n	8008b00 <UART_SetConfig+0xd0>
 8008aea:	e013      	b.n	8008b14 <UART_SetConfig+0xe4>
 8008aec:	231b      	movs	r3, #27
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	2200      	movs	r2, #0
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e021      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008af6:	231b      	movs	r3, #27
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	2202      	movs	r2, #2
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e01c      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008b00:	231b      	movs	r3, #27
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	2204      	movs	r2, #4
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e017      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008b0a:	231b      	movs	r3, #27
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	2208      	movs	r2, #8
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e012      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008b14:	231b      	movs	r3, #27
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	2210      	movs	r2, #16
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e00d      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a75      	ldr	r2, [pc, #468]	; (8008cf8 <UART_SetConfig+0x2c8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d104      	bne.n	8008b32 <UART_SetConfig+0x102>
 8008b28:	231b      	movs	r3, #27
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e003      	b.n	8008b3a <UART_SetConfig+0x10a>
 8008b32:	231b      	movs	r3, #27
 8008b34:	18fb      	adds	r3, r7, r3
 8008b36:	2210      	movs	r2, #16
 8008b38:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69da      	ldr	r2, [r3, #28]
 8008b3e:	2380      	movs	r3, #128	; 0x80
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d000      	beq.n	8008b48 <UART_SetConfig+0x118>
 8008b46:	e065      	b.n	8008c14 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8008b48:	231b      	movs	r3, #27
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d015      	beq.n	8008b7e <UART_SetConfig+0x14e>
 8008b52:	dc18      	bgt.n	8008b86 <UART_SetConfig+0x156>
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d00d      	beq.n	8008b74 <UART_SetConfig+0x144>
 8008b58:	dc15      	bgt.n	8008b86 <UART_SetConfig+0x156>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <UART_SetConfig+0x134>
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d005      	beq.n	8008b6e <UART_SetConfig+0x13e>
 8008b62:	e010      	b.n	8008b86 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b64:	f7fd fb6a 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	617b      	str	r3, [r7, #20]
        break;
 8008b6c:	e012      	b.n	8008b94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b6e:	4b63      	ldr	r3, [pc, #396]	; (8008cfc <UART_SetConfig+0x2cc>)
 8008b70:	617b      	str	r3, [r7, #20]
        break;
 8008b72:	e00f      	b.n	8008b94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b74:	f7fd fad6 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8008b78:	0003      	movs	r3, r0
 8008b7a:	617b      	str	r3, [r7, #20]
        break;
 8008b7c:	e00a      	b.n	8008b94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	617b      	str	r3, [r7, #20]
        break;
 8008b84:	e006      	b.n	8008b94 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b8a:	231a      	movs	r3, #26
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	2201      	movs	r2, #1
 8008b90:	701a      	strb	r2, [r3, #0]
        break;
 8008b92:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d100      	bne.n	8008b9c <UART_SetConfig+0x16c>
 8008b9a:	e08d      	b.n	8008cb8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba0:	4b57      	ldr	r3, [pc, #348]	; (8008d00 <UART_SetConfig+0x2d0>)
 8008ba2:	0052      	lsls	r2, r2, #1
 8008ba4:	5ad3      	ldrh	r3, [r2, r3]
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	6978      	ldr	r0, [r7, #20]
 8008baa:	f7f7 fac5 	bl	8000138 <__udivsi3>
 8008bae:	0003      	movs	r3, r0
 8008bb0:	005a      	lsls	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	18d2      	adds	r2, r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	0019      	movs	r1, r3
 8008bc0:	0010      	movs	r0, r2
 8008bc2:	f7f7 fab9 	bl	8000138 <__udivsi3>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b0f      	cmp	r3, #15
 8008bce:	d91c      	bls.n	8008c0a <UART_SetConfig+0x1da>
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	025b      	lsls	r3, r3, #9
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d217      	bcs.n	8008c0a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	200e      	movs	r0, #14
 8008be0:	183b      	adds	r3, r7, r0
 8008be2:	210f      	movs	r1, #15
 8008be4:	438a      	bics	r2, r1
 8008be6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2207      	movs	r2, #7
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	b299      	uxth	r1, r3
 8008bf4:	183b      	adds	r3, r7, r0
 8008bf6:	183a      	adds	r2, r7, r0
 8008bf8:	8812      	ldrh	r2, [r2, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	183a      	adds	r2, r7, r0
 8008c04:	8812      	ldrh	r2, [r2, #0]
 8008c06:	60da      	str	r2, [r3, #12]
 8008c08:	e056      	b.n	8008cb8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8008c0a:	231a      	movs	r3, #26
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	2201      	movs	r2, #1
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	e051      	b.n	8008cb8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c14:	231b      	movs	r3, #27
 8008c16:	18fb      	adds	r3, r7, r3
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d015      	beq.n	8008c4a <UART_SetConfig+0x21a>
 8008c1e:	dc18      	bgt.n	8008c52 <UART_SetConfig+0x222>
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d00d      	beq.n	8008c40 <UART_SetConfig+0x210>
 8008c24:	dc15      	bgt.n	8008c52 <UART_SetConfig+0x222>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <UART_SetConfig+0x200>
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d005      	beq.n	8008c3a <UART_SetConfig+0x20a>
 8008c2e:	e010      	b.n	8008c52 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c30:	f7fd fb04 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 8008c34:	0003      	movs	r3, r0
 8008c36:	617b      	str	r3, [r7, #20]
        break;
 8008c38:	e012      	b.n	8008c60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c3a:	4b30      	ldr	r3, [pc, #192]	; (8008cfc <UART_SetConfig+0x2cc>)
 8008c3c:	617b      	str	r3, [r7, #20]
        break;
 8008c3e:	e00f      	b.n	8008c60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c40:	f7fd fa70 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 8008c44:	0003      	movs	r3, r0
 8008c46:	617b      	str	r3, [r7, #20]
        break;
 8008c48:	e00a      	b.n	8008c60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	617b      	str	r3, [r7, #20]
        break;
 8008c50:	e006      	b.n	8008c60 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c56:	231a      	movs	r3, #26
 8008c58:	18fb      	adds	r3, r7, r3
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]
        break;
 8008c5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d028      	beq.n	8008cb8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c6a:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <UART_SetConfig+0x2d0>)
 8008c6c:	0052      	lsls	r2, r2, #1
 8008c6e:	5ad3      	ldrh	r3, [r2, r3]
 8008c70:	0019      	movs	r1, r3
 8008c72:	6978      	ldr	r0, [r7, #20]
 8008c74:	f7f7 fa60 	bl	8000138 <__udivsi3>
 8008c78:	0003      	movs	r3, r0
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	085b      	lsrs	r3, r3, #1
 8008c82:	18d2      	adds	r2, r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	0019      	movs	r1, r3
 8008c8a:	0010      	movs	r0, r2
 8008c8c:	f7f7 fa54 	bl	8000138 <__udivsi3>
 8008c90:	0003      	movs	r3, r0
 8008c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	d90a      	bls.n	8008cb0 <UART_SetConfig+0x280>
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	025b      	lsls	r3, r3, #9
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d205      	bcs.n	8008cb0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60da      	str	r2, [r3, #12]
 8008cae:	e003      	b.n	8008cb8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb0:	231a      	movs	r3, #26
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	226a      	movs	r2, #106	; 0x6a
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2268      	movs	r2, #104	; 0x68
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cd4:	231a      	movs	r3, #26
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	781b      	ldrb	r3, [r3, #0]
}
 8008cda:	0018      	movs	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	b008      	add	sp, #32
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	46c0      	nop			; (mov r8, r8)
 8008ce4:	cfff69f3 	.word	0xcfff69f3
 8008ce8:	ffffcfff 	.word	0xffffcfff
 8008cec:	11fff4ff 	.word	0x11fff4ff
 8008cf0:	40013800 	.word	0x40013800
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40004400 	.word	0x40004400
 8008cfc:	00f42400 	.word	0x00f42400
 8008d00:	0800ddb8 	.word	0x0800ddb8

08008d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	2201      	movs	r2, #1
 8008d12:	4013      	ands	r3, r2
 8008d14:	d00b      	beq.n	8008d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4a4a      	ldr	r2, [pc, #296]	; (8008e48 <UART_AdvFeatureConfig+0x144>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	0019      	movs	r1, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	2202      	movs	r2, #2
 8008d34:	4013      	ands	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	4a43      	ldr	r2, [pc, #268]	; (8008e4c <UART_AdvFeatureConfig+0x148>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	0019      	movs	r1, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	2204      	movs	r2, #4
 8008d56:	4013      	ands	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a3b      	ldr	r2, [pc, #236]	; (8008e50 <UART_AdvFeatureConfig+0x14c>)
 8008d62:	4013      	ands	r3, r2
 8008d64:	0019      	movs	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	2208      	movs	r2, #8
 8008d78:	4013      	ands	r3, r2
 8008d7a:	d00b      	beq.n	8008d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	4a34      	ldr	r2, [pc, #208]	; (8008e54 <UART_AdvFeatureConfig+0x150>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	0019      	movs	r1, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	2210      	movs	r2, #16
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	4a2c      	ldr	r2, [pc, #176]	; (8008e58 <UART_AdvFeatureConfig+0x154>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	0019      	movs	r1, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	2220      	movs	r2, #32
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d00b      	beq.n	8008dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	4a25      	ldr	r2, [pc, #148]	; (8008e5c <UART_AdvFeatureConfig+0x158>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	0019      	movs	r1, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	2240      	movs	r2, #64	; 0x40
 8008dde:	4013      	ands	r3, r2
 8008de0:	d01d      	beq.n	8008e1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <UART_AdvFeatureConfig+0x15c>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	0019      	movs	r1, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfe:	2380      	movs	r3, #128	; 0x80
 8008e00:	035b      	lsls	r3, r3, #13
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d10b      	bne.n	8008e1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <UART_AdvFeatureConfig+0x160>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	0019      	movs	r1, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	2280      	movs	r2, #128	; 0x80
 8008e24:	4013      	ands	r3, r2
 8008e26:	d00b      	beq.n	8008e40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	4a0e      	ldr	r2, [pc, #56]	; (8008e68 <UART_AdvFeatureConfig+0x164>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	0019      	movs	r1, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	605a      	str	r2, [r3, #4]
  }
}
 8008e40:	46c0      	nop			; (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b002      	add	sp, #8
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	fffdffff 	.word	0xfffdffff
 8008e4c:	fffeffff 	.word	0xfffeffff
 8008e50:	fffbffff 	.word	0xfffbffff
 8008e54:	ffff7fff 	.word	0xffff7fff
 8008e58:	ffffefff 	.word	0xffffefff
 8008e5c:	ffffdfff 	.word	0xffffdfff
 8008e60:	ffefffff 	.word	0xffefffff
 8008e64:	ff9fffff 	.word	0xff9fffff
 8008e68:	fff7ffff 	.word	0xfff7ffff

08008e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	228c      	movs	r2, #140	; 0x8c
 8008e78:	2100      	movs	r1, #0
 8008e7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e7c:	f7fa fe06 	bl	8003a8c <HAL_GetTick>
 8008e80:	0003      	movs	r3, r0
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2208      	movs	r2, #8
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d10c      	bne.n	8008eac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2280      	movs	r2, #128	; 0x80
 8008e96:	0391      	lsls	r1, r2, #14
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4a18      	ldr	r2, [pc, #96]	; (8008efc <UART_CheckIdleState+0x90>)
 8008e9c:	9200      	str	r2, [sp, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f000 f82e 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 8008ea4:	1e03      	subs	r3, r0, #0
 8008ea6:	d001      	beq.n	8008eac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e023      	b.n	8008ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d10c      	bne.n	8008ed4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2280      	movs	r2, #128	; 0x80
 8008ebe:	03d1      	lsls	r1, r2, #15
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4a0e      	ldr	r2, [pc, #56]	; (8008efc <UART_CheckIdleState+0x90>)
 8008ec4:	9200      	str	r2, [sp, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f000 f81a 	bl	8008f00 <UART_WaitOnFlagUntilTimeout>
 8008ecc:	1e03      	subs	r3, r0, #0
 8008ece:	d001      	beq.n	8008ed4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e00f      	b.n	8008ef4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2284      	movs	r2, #132	; 0x84
 8008ed8:	2120      	movs	r1, #32
 8008eda:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2288      	movs	r2, #136	; 0x88
 8008ee0:	2120      	movs	r1, #32
 8008ee2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2280      	movs	r2, #128	; 0x80
 8008eee:	2100      	movs	r1, #0
 8008ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b004      	add	sp, #16
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	01ffffff 	.word	0x01ffffff

08008f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b094      	sub	sp, #80	; 0x50
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	1dfb      	adds	r3, r7, #7
 8008f0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f10:	e0a7      	b.n	8009062 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f14:	3301      	adds	r3, #1
 8008f16:	d100      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008f18:	e0a3      	b.n	8009062 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1a:	f7fa fdb7 	bl	8003a8c <HAL_GetTick>
 8008f1e:	0002      	movs	r2, r0
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d302      	bcc.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d13f      	bne.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f30:	f3ef 8310 	mrs	r3, PRIMASK
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f38:	647b      	str	r3, [r7, #68]	; 0x44
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	f383 8810 	msr	PRIMASK, r3
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	494e      	ldr	r1, [pc, #312]	; (800908c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008f52:	400a      	ands	r2, r1
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	f383 8810 	msr	PRIMASK, r3
}
 8008f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f62:	f3ef 8310 	mrs	r3, PRIMASK
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	f383 8810 	msr	PRIMASK, r3
}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2101      	movs	r1, #1
 8008f84:	438a      	bics	r2, r1
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8e:	f383 8810 	msr	PRIMASK, r3
}
 8008f92:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2284      	movs	r2, #132	; 0x84
 8008f98:	2120      	movs	r1, #32
 8008f9a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2288      	movs	r2, #136	; 0x88
 8008fa0:	2120      	movs	r1, #32
 8008fa2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2280      	movs	r2, #128	; 0x80
 8008fa8:	2100      	movs	r1, #0
 8008faa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e069      	b.n	8009084 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	4013      	ands	r3, r2
 8008fba:	d052      	beq.n	8009062 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69da      	ldr	r2, [r3, #28]
 8008fc2:	2380      	movs	r3, #128	; 0x80
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d148      	bne.n	8009062 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2280      	movs	r2, #128	; 0x80
 8008fd6:	0112      	lsls	r2, r2, #4
 8008fd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fda:	f3ef 8310 	mrs	r3, PRIMASK
 8008fde:	613b      	str	r3, [r7, #16]
  return(result);
 8008fe0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f383 8810 	msr	PRIMASK, r3
}
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4924      	ldr	r1, [pc, #144]	; (800908c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008ffc:	400a      	ands	r2, r1
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f383 8810 	msr	PRIMASK, r3
}
 800900a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800900c:	f3ef 8310 	mrs	r3, PRIMASK
 8009010:	61fb      	str	r3, [r7, #28]
  return(result);
 8009012:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009014:	64bb      	str	r3, [r7, #72]	; 0x48
 8009016:	2301      	movs	r3, #1
 8009018:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f383 8810 	msr	PRIMASK, r3
}
 8009020:	46c0      	nop			; (mov r8, r8)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2101      	movs	r1, #1
 800902e:	438a      	bics	r2, r1
 8009030:	609a      	str	r2, [r3, #8]
 8009032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	f383 8810 	msr	PRIMASK, r3
}
 800903c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2284      	movs	r2, #132	; 0x84
 8009042:	2120      	movs	r1, #32
 8009044:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2288      	movs	r2, #136	; 0x88
 800904a:	2120      	movs	r1, #32
 800904c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	228c      	movs	r2, #140	; 0x8c
 8009052:	2120      	movs	r1, #32
 8009054:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2280      	movs	r2, #128	; 0x80
 800905a:	2100      	movs	r1, #0
 800905c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e010      	b.n	8009084 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	4013      	ands	r3, r2
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	425a      	negs	r2, r3
 8009072:	4153      	adcs	r3, r2
 8009074:	b2db      	uxtb	r3, r3
 8009076:	001a      	movs	r2, r3
 8009078:	1dfb      	adds	r3, r7, #7
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d100      	bne.n	8009082 <UART_WaitOnFlagUntilTimeout+0x182>
 8009080:	e747      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b014      	add	sp, #80	; 0x50
 800908a:	bd80      	pop	{r7, pc}
 800908c:	fffffe5f 	.word	0xfffffe5f

08009090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08e      	sub	sp, #56	; 0x38
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009098:	f3ef 8310 	mrs	r3, PRIMASK
 800909c:	617b      	str	r3, [r7, #20]
  return(result);
 800909e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
 80090a2:	2301      	movs	r3, #1
 80090a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	f383 8810 	msr	PRIMASK, r3
}
 80090ac:	46c0      	nop			; (mov r8, r8)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4926      	ldr	r1, [pc, #152]	; (8009154 <UART_EndRxTransfer+0xc4>)
 80090ba:	400a      	ands	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f383 8810 	msr	PRIMASK, r3
}
 80090c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ca:	f3ef 8310 	mrs	r3, PRIMASK
 80090ce:	623b      	str	r3, [r7, #32]
  return(result);
 80090d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
 80090d4:	2301      	movs	r3, #1
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	f383 8810 	msr	PRIMASK, r3
}
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	491b      	ldr	r1, [pc, #108]	; (8009158 <UART_EndRxTransfer+0xc8>)
 80090ec:	400a      	ands	r2, r1
 80090ee:	609a      	str	r2, [r3, #8]
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	f383 8810 	msr	PRIMASK, r3
}
 80090fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d118      	bne.n	8009136 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009104:	f3ef 8310 	mrs	r3, PRIMASK
 8009108:	60bb      	str	r3, [r7, #8]
  return(result);
 800910a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800910e:	2301      	movs	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f383 8810 	msr	PRIMASK, r3
}
 8009118:	46c0      	nop			; (mov r8, r8)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2110      	movs	r1, #16
 8009126:	438a      	bics	r2, r1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2288      	movs	r2, #136	; 0x88
 800913a:	2120      	movs	r1, #32
 800913c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	671a      	str	r2, [r3, #112]	; 0x70
}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	46bd      	mov	sp, r7
 800914e:	b00e      	add	sp, #56	; 0x38
 8009150:	bd80      	pop	{r7, pc}
 8009152:	46c0      	nop			; (mov r8, r8)
 8009154:	fffffedf 	.word	0xfffffedf
 8009158:	effffffe 	.word	0xeffffffe

0800915c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	225e      	movs	r2, #94	; 0x5e
 800916e:	2100      	movs	r1, #0
 8009170:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2256      	movs	r2, #86	; 0x56
 8009176:	2100      	movs	r1, #0
 8009178:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	0018      	movs	r0, r3
 800917e:	f7ff fc43 	bl	8008a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	46bd      	mov	sp, r7
 8009186:	b004      	add	sp, #16
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009192:	f3ef 8310 	mrs	r3, PRIMASK
 8009196:	60bb      	str	r3, [r7, #8]
  return(result);
 8009198:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	2301      	movs	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f383 8810 	msr	PRIMASK, r3
}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2140      	movs	r1, #64	; 0x40
 80091b4:	438a      	bics	r2, r1
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f383 8810 	msr	PRIMASK, r3
}
 80091c2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2284      	movs	r2, #132	; 0x84
 80091c8:	2120      	movs	r1, #32
 80091ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	0018      	movs	r0, r3
 80091d6:	f7ff fc0f 	bl	80089f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	46bd      	mov	sp, r7
 80091de:	b006      	add	sp, #24
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e05d      	b.n	80092b8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2284      	movs	r2, #132	; 0x84
 8009200:	589b      	ldr	r3, [r3, r2]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d107      	bne.n	8009216 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2280      	movs	r2, #128	; 0x80
 800920a:	2100      	movs	r1, #0
 800920c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	0018      	movs	r0, r3
 8009212:	f7fa f863 	bl	80032dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2284      	movs	r2, #132	; 0x84
 800921a:	2124      	movs	r1, #36	; 0x24
 800921c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2101      	movs	r1, #1
 800922a:	438a      	bics	r2, r1
 800922c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	0018      	movs	r0, r3
 8009232:	f7ff fbfd 	bl	8008a30 <UART_SetConfig>
 8009236:	0003      	movs	r3, r0
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e03b      	b.n	80092b8 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	0018      	movs	r0, r3
 800924c:	f7ff fd5a 	bl	8008d04 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2180      	movs	r1, #128	; 0x80
 800925c:	01c9      	lsls	r1, r1, #7
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <HAL_RS485Ex_Init+0xdc>)
 800926a:	4013      	ands	r3, r2
 800926c:	0019      	movs	r1, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	055b      	lsls	r3, r3, #21
 800927c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	041b      	lsls	r3, r3, #16
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4313      	orrs	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a0d      	ldr	r2, [pc, #52]	; (80092c4 <HAL_RS485Ex_Init+0xe0>)
 8009290:	4013      	ands	r3, r2
 8009292:	0019      	movs	r1, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	430a      	orrs	r2, r1
 800929c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2101      	movs	r1, #1
 80092aa:	430a      	orrs	r2, r1
 80092ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	0018      	movs	r0, r3
 80092b2:	f7ff fddb 	bl	8008e6c <UART_CheckIdleState>
 80092b6:	0003      	movs	r3, r0
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b006      	add	sp, #24
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	ffff7fff 	.word	0xffff7fff
 80092c4:	fc00ffff 	.word	0xfc00ffff

080092c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092d0:	46c0      	nop			; (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b002      	add	sp, #8
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b002      	add	sp, #8
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092f0:	46c0      	nop			; (mov r8, r8)
 80092f2:	46bd      	mov	sp, r7
 80092f4:	b002      	add	sp, #8
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <New_MedianFilter>:
#include "MedianFilter.h"

MedianFilter* New_MedianFilter(int size, int seed)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
   MedianFilter *self = (MedianFilter*) malloc(sizeof(MedianFilter));
 8009302:	2018      	movs	r0, #24
 8009304:	f001 fe42 	bl	800af8c <malloc>
 8009308:	0003      	movs	r3, r0
 800930a:	60bb      	str	r3, [r7, #8]

   self->medFilterWin      = constrain(size, 3, 255);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	22ff      	movs	r2, #255	; 0xff
 8009310:	2103      	movs	r1, #3
 8009312:	0018      	movs	r0, r3
 8009314:	f000 f85c 	bl	80093d0 <constrain>
 8009318:	0003      	movs	r3, r0
 800931a:	b2da      	uxtb	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	701a      	strb	r2, [r3, #0]
   self->medDataPointer    = size >> 1;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	105b      	asrs	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	705a      	strb	r2, [r3, #1]
   self->data              = (int*)     calloc (size, sizeof(int));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2104      	movs	r1, #4
 800932e:	0018      	movs	r0, r3
 8009330:	f001 fde8 	bl	800af04 <calloc>
 8009334:	0003      	movs	r3, r0
 8009336:	001a      	movs	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	605a      	str	r2, [r3, #4]
   self->sizeMap           = (uint8_t*) calloc (size, sizeof(uint8_t));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2101      	movs	r1, #1
 8009340:	0018      	movs	r0, r3
 8009342:	f001 fddf 	bl	800af04 <calloc>
 8009346:	0003      	movs	r3, r0
 8009348:	001a      	movs	r2, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	609a      	str	r2, [r3, #8]
   self->locationMap       = (uint8_t*) calloc (size, sizeof(uint8_t));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2101      	movs	r1, #1
 8009352:	0018      	movs	r0, r3
 8009354:	f001 fdd6 	bl	800af04 <calloc>
 8009358:	0003      	movs	r3, r0
 800935a:	001a      	movs	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	60da      	str	r2, [r3, #12]
   self->oldestDataPoint   = self->medDataPointer;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	785a      	ldrb	r2, [r3, #1]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	741a      	strb	r2, [r3, #16]
   self->totalSum          = size * seed;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	435a      	muls	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	615a      	str	r2, [r3, #20]

   for(uint8_t i = 0; i < self->medFilterWin; i++)
 8009372:	230f      	movs	r3, #15
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	e01d      	b.n	80093b8 <New_MedianFilter+0xc0>
   {
      self->sizeMap[i]     = i;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	210f      	movs	r1, #15
 8009382:	187b      	adds	r3, r7, r1
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	187a      	adds	r2, r7, r1
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	701a      	strb	r2, [r3, #0]
      self->locationMap[i] = i;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	187b      	adds	r3, r7, r1
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	187a      	adds	r2, r7, r1
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	701a      	strb	r2, [r3, #0]
      self->data[i]        = seed;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	187b      	adds	r3, r7, r1
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	601a      	str	r2, [r3, #0]
   for(uint8_t i = 0; i < self->medFilterWin; i++)
 80093ae:	187b      	adds	r3, r7, r1
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	3201      	adds	r2, #1
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	220f      	movs	r2, #15
 80093be:	18ba      	adds	r2, r7, r2
 80093c0:	7812      	ldrb	r2, [r2, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d3da      	bcc.n	800937c <New_MedianFilter+0x84>
   }

   return self;
 80093c6:	68bb      	ldr	r3, [r7, #8]
}
 80093c8:	0018      	movs	r0, r3
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b004      	add	sp, #16
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <constrain>:

int constrain(int v, int min, int max) 
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
    if(v < min) return min;
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	da01      	bge.n	80093e8 <constrain+0x18>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	e006      	b.n	80093f6 <constrain+0x26>
    else if(max < v) return max;
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	da01      	bge.n	80093f4 <constrain+0x24>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	e000      	b.n	80093f6 <constrain+0x26>
    else return v;
 80093f4:	68fb      	ldr	r3, [r7, #12]
}
 80093f6:	0018      	movs	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b004      	add	sp, #16
 80093fc:	bd80      	pop	{r7, pc}

080093fe <MedianFilter_In>:

int MedianFilter_In(MedianFilter *self, const int value)
{
 80093fe:	b5b0      	push	{r4, r5, r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
   bool dataMoved = false;
 8009408:	2317      	movs	r3, #23
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
   const uint8_t rightEdge = self->medFilterWin - 1;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	230f      	movs	r3, #15
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	3a01      	subs	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]

   self->totalSum += value - self->data[self->oldestDataPoint];
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6859      	ldr	r1, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7c1b      	ldrb	r3, [r3, #16]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	18cb      	adds	r3, r1, r3
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	1acb      	subs	r3, r1, r3
 8009432:	18d2      	adds	r2, r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	615a      	str	r2, [r3, #20]

   self->data[self->oldestDataPoint] = value;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7c1b      	ldrb	r3, [r3, #16]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	601a      	str	r2, [r3, #0]

   // SORT LEFT (-) <======(n) (+)
   if(self->locationMap[self->oldestDataPoint] > 0)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	7c12      	ldrb	r2, [r2, #16]
 8009450:	189b      	adds	r3, r3, r2
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d05f      	beq.n	8009518 <MedianFilter_In+0x11a>
   {
      for(uint8_t i = self->locationMap[self->oldestDataPoint]; i > 0; i--)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7c12      	ldrb	r2, [r2, #16]
 8009460:	189a      	adds	r2, r3, r2
 8009462:	2316      	movs	r3, #22
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	e04e      	b.n	800950a <MedianFilter_In+0x10c>
      {
         uint8_t n = i - 1;
 800946c:	240e      	movs	r4, #14
 800946e:	193b      	adds	r3, r7, r4
 8009470:	2516      	movs	r5, #22
 8009472:	197a      	adds	r2, r7, r5
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	3a01      	subs	r2, #1
 8009478:	701a      	strb	r2, [r3, #0]

         if(self->data[self->oldestDataPoint] < self->data[self->sizeMap[n]])
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	7c1b      	ldrb	r3, [r3, #16]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	18d3      	adds	r3, r2, r3
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6859      	ldr	r1, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6898      	ldr	r0, [r3, #8]
 8009490:	193b      	adds	r3, r7, r4
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	18c3      	adds	r3, r0, r3
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	18cb      	adds	r3, r1, r3
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	da39      	bge.n	8009516 <MedianFilter_In+0x118>
         {
            self->sizeMap[i] = self->sizeMap[n];
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	193b      	adds	r3, r7, r4
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	18d2      	adds	r2, r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6899      	ldr	r1, [r3, #8]
 80094b0:	0028      	movs	r0, r5
 80094b2:	183b      	adds	r3, r7, r0
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	18cb      	adds	r3, r1, r3
 80094b8:	7812      	ldrb	r2, [r2, #0]
 80094ba:	701a      	strb	r2, [r3, #0]
            self->locationMap[self->sizeMap[n]]++;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6899      	ldr	r1, [r3, #8]
 80094c4:	193b      	adds	r3, r7, r4
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	18cb      	adds	r3, r1, r3
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	18d3      	adds	r3, r2, r3
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	3201      	adds	r2, #1
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]

            self->sizeMap[n] = self->oldestDataPoint;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	193b      	adds	r3, r7, r4
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	18d3      	adds	r3, r2, r3
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	7c12      	ldrb	r2, [r2, #16]
 80094e4:	701a      	strb	r2, [r3, #0]
            self->locationMap[self->oldestDataPoint]--;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	7c12      	ldrb	r2, [r2, #16]
 80094ee:	189b      	adds	r3, r3, r2
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	3a01      	subs	r2, #1
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]

            dataMoved = true;
 80094f8:	2317      	movs	r3, #23
 80094fa:	18fb      	adds	r3, r7, r3
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]
      for(uint8_t i = self->locationMap[self->oldestDataPoint]; i > 0; i--)
 8009500:	183b      	adds	r3, r7, r0
 8009502:	781a      	ldrb	r2, [r3, #0]
 8009504:	183b      	adds	r3, r7, r0
 8009506:	3a01      	subs	r2, #1
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	2316      	movs	r3, #22
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1ab      	bne.n	800946c <MedianFilter_In+0x6e>
 8009514:	e000      	b.n	8009518 <MedianFilter_In+0x11a>
         }
         else
         {
            break;
 8009516:	46c0      	nop			; (mov r8, r8)
         }
      }
   }

   // SORT RIGHT (-) (n)======> (+)
   if(!dataMoved && self->locationMap[self->oldestDataPoint] < rightEdge)
 8009518:	2317      	movs	r3, #23
 800951a:	18fb      	adds	r3, r7, r3
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2201      	movs	r2, #1
 8009520:	4053      	eors	r3, r2
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d059      	beq.n	80095dc <MedianFilter_In+0x1de>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	189b      	adds	r3, r3, r2
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	220f      	movs	r2, #15
 8009536:	18ba      	adds	r2, r7, r2
 8009538:	7812      	ldrb	r2, [r2, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d94e      	bls.n	80095dc <MedianFilter_In+0x1de>
   {
      for(int i = self->locationMap[self->oldestDataPoint]; i < rightEdge; i++)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	7c12      	ldrb	r2, [r2, #16]
 8009546:	189b      	adds	r3, r3, r2
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	613b      	str	r3, [r7, #16]
 800954c:	e03e      	b.n	80095cc <MedianFilter_In+0x1ce>
      {
         int n = i + 1;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	60bb      	str	r3, [r7, #8]

         if(self->data[self->oldestDataPoint] > self->data[self->sizeMap[n]])
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7c1b      	ldrb	r3, [r3, #16]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	18d3      	adds	r3, r2, r3
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6859      	ldr	r1, [r3, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6898      	ldr	r0, [r3, #8]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	18c3      	adds	r3, r0, r3
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	18cb      	adds	r3, r1, r3
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	dd2f      	ble.n	80095da <MedianFilter_In+0x1dc>
         {
            self->sizeMap[i] = self->sizeMap[n];
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689a      	ldr	r2, [r3, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	18d2      	adds	r2, r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6899      	ldr	r1, [r3, #8]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	18cb      	adds	r3, r1, r3
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	701a      	strb	r2, [r3, #0]
            self->locationMap[self->sizeMap[n]]--;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6899      	ldr	r1, [r3, #8]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	18cb      	adds	r3, r1, r3
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	18d3      	adds	r3, r2, r3
 800959e:	781a      	ldrb	r2, [r3, #0]
 80095a0:	3a01      	subs	r2, #1
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	701a      	strb	r2, [r3, #0]

            self->sizeMap[n] = self->oldestDataPoint;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	18d3      	adds	r3, r2, r3
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	7c12      	ldrb	r2, [r2, #16]
 80095b2:	701a      	strb	r2, [r3, #0]
            self->locationMap[self->oldestDataPoint]++;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	7c12      	ldrb	r2, [r2, #16]
 80095bc:	189b      	adds	r3, r3, r2
 80095be:	781a      	ldrb	r2, [r3, #0]
 80095c0:	3201      	adds	r2, #1
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
      for(int i = self->locationMap[self->oldestDataPoint]; i < rightEdge; i++)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3301      	adds	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	230f      	movs	r3, #15
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	dbba      	blt.n	800954e <MedianFilter_In+0x150>
 80095d8:	e000      	b.n	80095dc <MedianFilter_In+0x1de>
         }
         else
         {
            break;
 80095da:	46c0      	nop			; (mov r8, r8)
         }
      }
   }
   self->oldestDataPoint++;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7c1b      	ldrb	r3, [r3, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	741a      	strb	r2, [r3, #16]
   if(self->oldestDataPoint == self->medFilterWin) self->oldestDataPoint = 0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7c1a      	ldrb	r2, [r3, #16]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d102      	bne.n	80095fa <MedianFilter_In+0x1fc>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	741a      	strb	r2, [r3, #16]

   return self->data[self->sizeMap[self->medDataPointer]];
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	7849      	ldrb	r1, [r1, #1]
 8009606:	185b      	adds	r3, r3, r1
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	18d3      	adds	r3, r2, r3
 800960e:	681b      	ldr	r3, [r3, #0]
}
 8009610:	0018      	movs	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	b006      	add	sp, #24
 8009616:	bdb0      	pop	{r4, r5, r7, pc}

08009618 <MedianFilter_Out>:

int MedianFilter_Out(MedianFilter *self)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
   return self->data[self->sizeMap[self->medDataPointer]];
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	7849      	ldrb	r1, [r1, #1]
 800962c:	185b      	adds	r3, r3, r1
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	18d3      	adds	r3, r2, r3
 8009634:	681b      	ldr	r3, [r3, #0]
}
 8009636:	0018      	movs	r0, r3
 8009638:	46bd      	mov	sp, r7
 800963a:	b002      	add	sp, #8
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8009640:	b5b0      	push	{r4, r5, r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	0004      	movs	r4, r0
 8009648:	0008      	movs	r0, r1
 800964a:	0011      	movs	r1, r2
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	1dfb      	adds	r3, r7, #7
 8009650:	1c22      	adds	r2, r4, #0
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	1dbb      	adds	r3, r7, #6
 8009656:	1c02      	adds	r2, r0, #0
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	1d7b      	adds	r3, r7, #5
 800965c:	1c0a      	adds	r2, r1, #0
 800965e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8009660:	230f      	movs	r3, #15
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8009668:	1dbb      	adds	r3, r7, #6
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d007      	beq.n	8009680 <eMBInit+0x40>
 8009670:	1dbb      	adds	r3, r7, #6
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8009678:	1dbb      	adds	r3, r7, #6
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2bf7      	cmp	r3, #247	; 0xf7
 800967e:	d904      	bls.n	800968a <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 8009680:	230f      	movs	r3, #15
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	2202      	movs	r2, #2
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e047      	b.n	800971a <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800968a:	4b27      	ldr	r3, [pc, #156]	; (8009728 <eMBInit+0xe8>)
 800968c:	1dba      	adds	r2, r7, #6
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 8009692:	1dfb      	adds	r3, r7, #7
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d127      	bne.n	80096ea <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800969a:	4b24      	ldr	r3, [pc, #144]	; (800972c <eMBInit+0xec>)
 800969c:	4a24      	ldr	r2, [pc, #144]	; (8009730 <eMBInit+0xf0>)
 800969e:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80096a0:	4b24      	ldr	r3, [pc, #144]	; (8009734 <eMBInit+0xf4>)
 80096a2:	4a25      	ldr	r2, [pc, #148]	; (8009738 <eMBInit+0xf8>)
 80096a4:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80096a6:	4b25      	ldr	r3, [pc, #148]	; (800973c <eMBInit+0xfc>)
 80096a8:	4a25      	ldr	r2, [pc, #148]	; (8009740 <eMBInit+0x100>)
 80096aa:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80096ac:	4b25      	ldr	r3, [pc, #148]	; (8009744 <eMBInit+0x104>)
 80096ae:	4a26      	ldr	r2, [pc, #152]	; (8009748 <eMBInit+0x108>)
 80096b0:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80096b2:	4b26      	ldr	r3, [pc, #152]	; (800974c <eMBInit+0x10c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80096b8:	4b25      	ldr	r3, [pc, #148]	; (8009750 <eMBInit+0x110>)
 80096ba:	4a26      	ldr	r2, [pc, #152]	; (8009754 <eMBInit+0x114>)
 80096bc:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80096be:	4b26      	ldr	r3, [pc, #152]	; (8009758 <eMBInit+0x118>)
 80096c0:	4a26      	ldr	r2, [pc, #152]	; (800975c <eMBInit+0x11c>)
 80096c2:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80096c4:	4b26      	ldr	r3, [pc, #152]	; (8009760 <eMBInit+0x120>)
 80096c6:	4a27      	ldr	r2, [pc, #156]	; (8009764 <eMBInit+0x124>)
 80096c8:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80096ca:	4b17      	ldr	r3, [pc, #92]	; (8009728 <eMBInit+0xe8>)
 80096cc:	7818      	ldrb	r0, [r3, #0]
 80096ce:	230f      	movs	r3, #15
 80096d0:	18fc      	adds	r4, r7, r3
 80096d2:	2320      	movs	r3, #32
 80096d4:	18fb      	adds	r3, r7, r3
 80096d6:	781d      	ldrb	r5, [r3, #0]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	1d7b      	adds	r3, r7, #5
 80096dc:	7819      	ldrb	r1, [r3, #0]
 80096de:	002b      	movs	r3, r5
 80096e0:	f000 feb6 	bl	800a450 <eMBRTUInit>
 80096e4:	0003      	movs	r3, r0
 80096e6:	7023      	strb	r3, [r4, #0]
            break;
 80096e8:	e003      	b.n	80096f2 <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80096ea:	230f      	movs	r3, #15
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2202      	movs	r2, #2
 80096f0:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 80096f2:	240f      	movs	r4, #15
 80096f4:	193b      	adds	r3, r7, r4
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10e      	bne.n	800971a <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 80096fc:	f001 f920 	bl	800a940 <xMBPortEventInit>
 8009700:	1e03      	subs	r3, r0, #0
 8009702:	d103      	bne.n	800970c <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8009704:	193b      	adds	r3, r7, r4
 8009706:	2203      	movs	r2, #3
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	e006      	b.n	800971a <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <eMBInit+0x128>)
 800970e:	1dfa      	adds	r2, r7, #7
 8009710:	7812      	ldrb	r2, [r2, #0]
 8009712:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 8009714:	4b15      	ldr	r3, [pc, #84]	; (800976c <eMBInit+0x12c>)
 8009716:	2201      	movs	r2, #1
 8009718:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800971a:	230f      	movs	r3, #15
 800971c:	18fb      	adds	r3, r7, r3
 800971e:	781b      	ldrb	r3, [r3, #0]
}
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b004      	add	sp, #16
 8009726:	bdb0      	pop	{r4, r5, r7, pc}
 8009728:	200005b8 	.word	0x200005b8
 800972c:	200005c0 	.word	0x200005c0
 8009730:	0800a4ed 	.word	0x0800a4ed
 8009734:	200005c4 	.word	0x200005c4
 8009738:	0800a515 	.word	0x0800a515
 800973c:	200005bc 	.word	0x200005bc
 8009740:	0800a5e5 	.word	0x0800a5e5
 8009744:	200005c8 	.word	0x200005c8
 8009748:	0800a535 	.word	0x0800a535
 800974c:	200005cc 	.word	0x200005cc
 8009750:	200005d0 	.word	0x200005d0
 8009754:	0800a6cd 	.word	0x0800a6cd
 8009758:	200005d4 	.word	0x200005d4
 800975c:	0800a7a1 	.word	0x0800a7a1
 8009760:	200005d8 	.word	0x200005d8
 8009764:	0800a855 	.word	0x0800a855
 8009768:	200005b9 	.word	0x200005b9
 800976c:	20000011 	.word	0x20000011

08009770 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8009776:	1dfb      	adds	r3, r7, #7
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <eMBEnable+0x34>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d106      	bne.n	8009792 <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8009784:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <eMBEnable+0x38>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <eMBEnable+0x34>)
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
 8009790:	e002      	b.n	8009798 <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8009792:	1dfb      	adds	r3, r7, #7
 8009794:	2206      	movs	r2, #6
 8009796:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009798:	1dfb      	adds	r3, r7, #7
 800979a:	781b      	ldrb	r3, [r3, #0]
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b002      	add	sp, #8
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000011 	.word	0x20000011
 80097a8:	200005c0 	.word	0x200005c0

080097ac <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80097ac:	b5b0      	push	{r4, r5, r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80097b2:	1cfb      	adds	r3, r7, #3
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80097b8:	4b57      	ldr	r3, [pc, #348]	; (8009918 <eMBPoll+0x16c>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 80097c0:	2306      	movs	r3, #6
 80097c2:	e0a5      	b.n	8009910 <eMBPoll+0x164>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80097c4:	1cbb      	adds	r3, r7, #2
 80097c6:	0018      	movs	r0, r3
 80097c8:	f001 f8dc 	bl	800a984 <xMBPortEventGet>
 80097cc:	0003      	movs	r3, r0
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d000      	beq.n	80097d4 <eMBPoll+0x28>
 80097d2:	e093      	b.n	80098fc <eMBPoll+0x150>
    {
        switch ( eEvent )
 80097d4:	1cbb      	adds	r3, r7, #2
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d100      	bne.n	80097de <eMBPoll+0x32>
 80097dc:	e090      	b.n	8009900 <eMBPoll+0x154>
 80097de:	dd00      	ble.n	80097e2 <eMBPoll+0x36>
 80097e0:	e095      	b.n	800990e <eMBPoll+0x162>
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d024      	beq.n	8009830 <eMBPoll+0x84>
 80097e6:	dd00      	ble.n	80097ea <eMBPoll+0x3e>
 80097e8:	e091      	b.n	800990e <eMBPoll+0x162>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d100      	bne.n	80097f0 <eMBPoll+0x44>
 80097ee:	e089      	b.n	8009904 <eMBPoll+0x158>
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d000      	beq.n	80097f6 <eMBPoll+0x4a>
 80097f4:	e08b      	b.n	800990e <eMBPoll+0x162>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80097f6:	4b49      	ldr	r3, [pc, #292]	; (800991c <eMBPoll+0x170>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	1cfc      	adds	r4, r7, #3
 80097fc:	4a48      	ldr	r2, [pc, #288]	; (8009920 <eMBPoll+0x174>)
 80097fe:	4949      	ldr	r1, [pc, #292]	; (8009924 <eMBPoll+0x178>)
 8009800:	4849      	ldr	r0, [pc, #292]	; (8009928 <eMBPoll+0x17c>)
 8009802:	4798      	blx	r3
 8009804:	0003      	movs	r3, r0
 8009806:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 8009808:	1cfb      	adds	r3, r7, #3
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d000      	beq.n	8009812 <eMBPoll+0x66>
 8009810:	e07a      	b.n	8009908 <eMBPoll+0x15c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8009812:	4b45      	ldr	r3, [pc, #276]	; (8009928 <eMBPoll+0x17c>)
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	4b45      	ldr	r3, [pc, #276]	; (800992c <eMBPoll+0x180>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d004      	beq.n	8009828 <eMBPoll+0x7c>
 800981e:	4b42      	ldr	r3, [pc, #264]	; (8009928 <eMBPoll+0x17c>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d000      	beq.n	8009828 <eMBPoll+0x7c>
 8009826:	e06f      	b.n	8009908 <eMBPoll+0x15c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8009828:	2002      	movs	r0, #2
 800982a:	f001 f895 	bl	800a958 <xMBPortEventPost>
                }
            }
            break;
 800982e:	e06b      	b.n	8009908 <eMBPoll+0x15c>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8009830:	4b3c      	ldr	r3, [pc, #240]	; (8009924 <eMBPoll+0x178>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	4b3e      	ldr	r3, [pc, #248]	; (8009930 <eMBPoll+0x184>)
 8009838:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800983a:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <eMBPoll+0x188>)
 800983c:	2201      	movs	r2, #1
 800983e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8009840:	2300      	movs	r3, #0
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	e020      	b.n	8009888 <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8009846:	4b3c      	ldr	r3, [pc, #240]	; (8009938 <eMBPoll+0x18c>)
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	00d2      	lsls	r2, r2, #3
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01e      	beq.n	8009890 <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8009852:	4b39      	ldr	r3, [pc, #228]	; (8009938 <eMBPoll+0x18c>)
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	00d2      	lsls	r2, r2, #3
 8009858:	5cd2      	ldrb	r2, [r2, r3]
 800985a:	4b35      	ldr	r3, [pc, #212]	; (8009930 <eMBPoll+0x184>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d10f      	bne.n	8009882 <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8009862:	4a35      	ldr	r2, [pc, #212]	; (8009938 <eMBPoll+0x18c>)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	18d3      	adds	r3, r2, r3
 800986a:	3304      	adds	r3, #4
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4b2d      	ldr	r3, [pc, #180]	; (8009924 <eMBPoll+0x178>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	492b      	ldr	r1, [pc, #172]	; (8009920 <eMBPoll+0x174>)
 8009874:	0018      	movs	r0, r3
 8009876:	4790      	blx	r2
 8009878:	0003      	movs	r3, r0
 800987a:	001a      	movs	r2, r3
 800987c:	4b2d      	ldr	r3, [pc, #180]	; (8009934 <eMBPoll+0x188>)
 800987e:	701a      	strb	r2, [r3, #0]
                    break;
 8009880:	e007      	b.n	8009892 <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3301      	adds	r3, #1
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b0f      	cmp	r3, #15
 800988c:	dddb      	ble.n	8009846 <eMBPoll+0x9a>
 800988e:	e000      	b.n	8009892 <eMBPoll+0xe6>
                    break;
 8009890:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8009892:	4b25      	ldr	r3, [pc, #148]	; (8009928 <eMBPoll+0x17c>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d038      	beq.n	800990c <eMBPoll+0x160>
            {
                if( eException != MB_EX_NONE )
 800989a:	4b26      	ldr	r3, [pc, #152]	; (8009934 <eMBPoll+0x188>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d01e      	beq.n	80098e0 <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80098a2:	4b1f      	ldr	r3, [pc, #124]	; (8009920 <eMBPoll+0x174>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80098a8:	4b21      	ldr	r3, [pc, #132]	; (8009930 <eMBPoll+0x184>)
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	4b1d      	ldr	r3, [pc, #116]	; (8009924 <eMBPoll+0x178>)
 80098ae:	6819      	ldr	r1, [r3, #0]
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <eMBPoll+0x174>)
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	1c58      	adds	r0, r3, #1
 80098b6:	b284      	uxth	r4, r0
 80098b8:	4819      	ldr	r0, [pc, #100]	; (8009920 <eMBPoll+0x174>)
 80098ba:	8004      	strh	r4, [r0, #0]
 80098bc:	18cb      	adds	r3, r1, r3
 80098be:	2180      	movs	r1, #128	; 0x80
 80098c0:	4249      	negs	r1, r1
 80098c2:	430a      	orrs	r2, r1
 80098c4:	b2d2      	uxtb	r2, r2
 80098c6:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80098c8:	4b16      	ldr	r3, [pc, #88]	; (8009924 <eMBPoll+0x178>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <eMBPoll+0x174>)
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	1c59      	adds	r1, r3, #1
 80098d2:	b288      	uxth	r0, r1
 80098d4:	4912      	ldr	r1, [pc, #72]	; (8009920 <eMBPoll+0x174>)
 80098d6:	8008      	strh	r0, [r1, #0]
 80098d8:	18d3      	adds	r3, r2, r3
 80098da:	4a16      	ldr	r2, [pc, #88]	; (8009934 <eMBPoll+0x188>)
 80098dc:	7812      	ldrb	r2, [r2, #0]
 80098de:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80098e0:	4b16      	ldr	r3, [pc, #88]	; (800993c <eMBPoll+0x190>)
 80098e2:	681d      	ldr	r5, [r3, #0]
 80098e4:	4b11      	ldr	r3, [pc, #68]	; (800992c <eMBPoll+0x180>)
 80098e6:	7818      	ldrb	r0, [r3, #0]
 80098e8:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <eMBPoll+0x178>)
 80098ea:	6819      	ldr	r1, [r3, #0]
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <eMBPoll+0x174>)
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	1cfc      	adds	r4, r7, #3
 80098f2:	001a      	movs	r2, r3
 80098f4:	47a8      	blx	r5
 80098f6:	0003      	movs	r3, r0
 80098f8:	7023      	strb	r3, [r4, #0]
            }
            break;
 80098fa:	e007      	b.n	800990c <eMBPoll+0x160>

        case EV_FRAME_SENT:
            break;
        }
    }
 80098fc:	46c0      	nop			; (mov r8, r8)
 80098fe:	e006      	b.n	800990e <eMBPoll+0x162>
            break;
 8009900:	46c0      	nop			; (mov r8, r8)
 8009902:	e004      	b.n	800990e <eMBPoll+0x162>
            break;
 8009904:	46c0      	nop			; (mov r8, r8)
 8009906:	e002      	b.n	800990e <eMBPoll+0x162>
            break;
 8009908:	46c0      	nop			; (mov r8, r8)
 800990a:	e000      	b.n	800990e <eMBPoll+0x162>
            break;
 800990c:	46c0      	nop			; (mov r8, r8)
    return MB_ENOERR;
 800990e:	2300      	movs	r3, #0
}
 8009910:	0018      	movs	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	b002      	add	sp, #8
 8009916:	bdb0      	pop	{r4, r5, r7, pc}
 8009918:	20000011 	.word	0x20000011
 800991c:	200005c8 	.word	0x200005c8
 8009920:	200005e4 	.word	0x200005e4
 8009924:	200005e0 	.word	0x200005e0
 8009928:	200005dc 	.word	0x200005dc
 800992c:	200005b8 	.word	0x200005b8
 8009930:	200005e6 	.word	0x200005e6
 8009934:	200005e7 	.word	0x200005e7
 8009938:	20000014 	.word	0x20000014
 800993c:	200005bc 	.word	0x200005bc

08009940 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	000a      	movs	r2, r1
 800994a:	1cbb      	adds	r3, r7, #2
 800994c:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 800994e:	230f      	movs	r3, #15
 8009950:	18fb      	adds	r3, r7, r3
 8009952:	22ff      	movs	r2, #255	; 0xff
 8009954:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8009956:	230e      	movs	r3, #14
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	22ff      	movs	r2, #255	; 0xff
 800995c:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 800995e:	e019      	b.n	8009994 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	607a      	str	r2, [r7, #4]
 8009966:	781a      	ldrb	r2, [r3, #0]
 8009968:	200e      	movs	r0, #14
 800996a:	183b      	adds	r3, r7, r0
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4053      	eors	r3, r2
 8009970:	b2db      	uxtb	r3, r3
 8009972:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8009974:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <usMBCRC16+0x84>)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	18d3      	adds	r3, r2, r3
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	183b      	adds	r3, r7, r0
 800997e:	200f      	movs	r0, #15
 8009980:	183a      	adds	r2, r7, r0
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	404a      	eors	r2, r1
 8009986:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8009988:	183b      	adds	r3, r7, r0
 800998a:	490f      	ldr	r1, [pc, #60]	; (80099c8 <usMBCRC16+0x88>)
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	188a      	adds	r2, r1, r2
 8009990:	7812      	ldrb	r2, [r2, #0]
 8009992:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8009994:	1cbb      	adds	r3, r7, #2
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	1cba      	adds	r2, r7, #2
 800999a:	1e59      	subs	r1, r3, #1
 800999c:	8011      	strh	r1, [r2, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1de      	bne.n	8009960 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80099a2:	230f      	movs	r3, #15
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	b21a      	sxth	r2, r3
 80099ac:	230e      	movs	r3, #14
 80099ae:	18fb      	adds	r3, r7, r3
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	b21b      	sxth	r3, r3
 80099b4:	4313      	orrs	r3, r2
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	b29b      	uxth	r3, r3
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b004      	add	sp, #16
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	0800ddd0 	.word	0x0800ddd0
 80099c8:	0800ded0 	.word	0x0800ded0

080099cc <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80099cc:	b5b0      	push	{r4, r5, r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80099d6:	2316      	movs	r3, #22
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d000      	beq.n	80099e8 <eMBFuncReadCoils+0x1c>
 80099e6:	e091      	b.n	8009b0c <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3301      	adds	r3, #1
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	2014      	movs	r0, #20
 80099f2:	183b      	adds	r3, r7, r0
 80099f4:	0212      	lsls	r2, r2, #8
 80099f6:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3302      	adds	r3, #2
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b299      	uxth	r1, r3
 8009a00:	183b      	adds	r3, r7, r0
 8009a02:	183a      	adds	r2, r7, r0
 8009a04:	8812      	ldrh	r2, [r2, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009a0a:	183b      	adds	r3, r7, r0
 8009a0c:	881a      	ldrh	r2, [r3, #0]
 8009a0e:	183b      	adds	r3, r7, r0
 8009a10:	3201      	adds	r2, #1
 8009a12:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3303      	adds	r3, #3
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	2012      	movs	r0, #18
 8009a1e:	183b      	adds	r3, r7, r0
 8009a20:	0212      	lsls	r2, r2, #8
 8009a22:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3304      	adds	r3, #4
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b299      	uxth	r1, r3
 8009a2c:	183b      	adds	r3, r7, r0
 8009a2e:	183a      	adds	r2, r7, r0
 8009a30:	8812      	ldrh	r2, [r2, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8009a36:	183b      	adds	r3, r7, r0
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d061      	beq.n	8009b02 <eMBFuncReadCoils+0x136>
 8009a3e:	0001      	movs	r1, r0
 8009a40:	183b      	adds	r3, r7, r0
 8009a42:	881a      	ldrh	r2, [r3, #0]
 8009a44:	23fa      	movs	r3, #250	; 0xfa
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d25a      	bcs.n	8009b02 <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2200      	movs	r2, #0
 8009a54:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	60fa      	str	r2, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8009a6c:	187b      	adds	r3, r7, r1
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	2207      	movs	r2, #7
 8009a72:	4013      	ands	r3, r2
 8009a74:	d009      	beq.n	8009a8a <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8009a76:	187b      	adds	r3, r7, r1
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	08db      	lsrs	r3, r3, #3
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	2317      	movs	r3, #23
 8009a82:	18fb      	adds	r3, r7, r3
 8009a84:	3201      	adds	r2, #1
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	e007      	b.n	8009a9a <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8009a8a:	2312      	movs	r3, #18
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	08db      	lsrs	r3, r3, #3
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	2317      	movs	r3, #23
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	60fa      	str	r2, [r7, #12]
 8009aa0:	2217      	movs	r2, #23
 8009aa2:	18ba      	adds	r2, r7, r2
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8009ab4:	250b      	movs	r5, #11
 8009ab6:	197c      	adds	r4, r7, r5
 8009ab8:	2312      	movs	r3, #18
 8009aba:	18fb      	adds	r3, r7, r3
 8009abc:	881a      	ldrh	r2, [r3, #0]
 8009abe:	2314      	movs	r3, #20
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	8819      	ldrh	r1, [r3, #0]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f7f8 ff2f 	bl	800292a <eMBRegCoilsCB>
 8009acc:	0003      	movs	r3, r0
 8009ace:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009ad0:	197b      	adds	r3, r7, r5
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d009      	beq.n	8009aec <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009ad8:	2316      	movs	r3, #22
 8009ada:	18fc      	adds	r4, r7, r3
 8009adc:	197b      	adds	r3, r7, r5
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	f000 ff01 	bl	800a8e8 <prveMBError2Exception>
 8009ae6:	0003      	movs	r3, r0
 8009ae8:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8009aea:	e013      	b.n	8009b14 <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	881a      	ldrh	r2, [r3, #0]
 8009af0:	2317      	movs	r3, #23
 8009af2:	18fb      	adds	r3, r7, r3
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	18d3      	adds	r3, r2, r3
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009b00:	e008      	b.n	8009b14 <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009b02:	2316      	movs	r3, #22
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	2203      	movs	r2, #3
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e003      	b.n	8009b14 <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009b0c:	2316      	movs	r3, #22
 8009b0e:	18fb      	adds	r3, r7, r3
 8009b10:	2203      	movs	r2, #3
 8009b12:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009b14:	2316      	movs	r3, #22
 8009b16:	18fb      	adds	r3, r7, r3
 8009b18:	781b      	ldrb	r3, [r3, #0]
}
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b006      	add	sp, #24
 8009b20:	bdb0      	pop	{r4, r5, r7, pc}

08009b22 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8009b22:	b5b0      	push	{r4, r5, r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8009b2c:	230f      	movs	r3, #15
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	d155      	bne.n	8009be8 <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	200c      	movs	r0, #12
 8009b46:	183b      	adds	r3, r7, r0
 8009b48:	0212      	lsls	r2, r2, #8
 8009b4a:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3302      	adds	r3, #2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	b299      	uxth	r1, r3
 8009b54:	183b      	adds	r3, r7, r0
 8009b56:	183a      	adds	r2, r7, r0
 8009b58:	8812      	ldrh	r2, [r2, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009b5e:	183b      	adds	r3, r7, r0
 8009b60:	881a      	ldrh	r2, [r3, #0]
 8009b62:	183b      	adds	r3, r7, r0
 8009b64:	3201      	adds	r2, #1
 8009b66:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d135      	bne.n	8009bde <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3303      	adds	r3, #3
 8009b76:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009b78:	2bff      	cmp	r3, #255	; 0xff
 8009b7a:	d004      	beq.n	8009b86 <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3303      	adds	r3, #3
 8009b80:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d12b      	bne.n	8009bde <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8009b86:	2108      	movs	r1, #8
 8009b88:	187b      	adds	r3, r7, r1
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3303      	adds	r3, #3
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2bff      	cmp	r3, #255	; 0xff
 8009b96:	d103      	bne.n	8009ba0 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8009b98:	187b      	adds	r3, r7, r1
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e003      	b.n	8009ba8 <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8009ba8:	250b      	movs	r5, #11
 8009baa:	197c      	adds	r4, r7, r5
 8009bac:	230c      	movs	r3, #12
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	8819      	ldrh	r1, [r3, #0]
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	18f8      	adds	r0, r7, r3
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f7f8 feb6 	bl	800292a <eMBRegCoilsCB>
 8009bbe:	0003      	movs	r3, r0
 8009bc0:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009bc2:	197b      	adds	r3, r7, r5
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d012      	beq.n	8009bf0 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009bca:	230f      	movs	r3, #15
 8009bcc:	18fc      	adds	r4, r7, r3
 8009bce:	197b      	adds	r3, r7, r5
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f000 fe88 	bl	800a8e8 <prveMBError2Exception>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8009bdc:	e008      	b.n	8009bf0 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009bde:	230f      	movs	r3, #15
 8009be0:	18fb      	adds	r3, r7, r3
 8009be2:	2203      	movs	r2, #3
 8009be4:	701a      	strb	r2, [r3, #0]
 8009be6:	e003      	b.n	8009bf0 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009be8:	230f      	movs	r3, #15
 8009bea:	18fb      	adds	r3, r7, r3
 8009bec:	2203      	movs	r2, #3
 8009bee:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009bf0:	230f      	movs	r3, #15
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	781b      	ldrb	r3, [r3, #0]
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b004      	add	sp, #16
 8009bfc:	bdb0      	pop	{r4, r5, r7, pc}

08009bfe <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8009bfe:	b5b0      	push	{r4, r5, r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8009c08:	230e      	movs	r3, #14
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	2b05      	cmp	r3, #5
 8009c16:	d800      	bhi.n	8009c1a <eMBFuncWriteMultipleCoils+0x1c>
 8009c18:	e07a      	b.n	8009d10 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	200c      	movs	r0, #12
 8009c24:	183b      	adds	r3, r7, r0
 8009c26:	0212      	lsls	r2, r2, #8
 8009c28:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	b299      	uxth	r1, r3
 8009c32:	183b      	adds	r3, r7, r0
 8009c34:	183a      	adds	r2, r7, r0
 8009c36:	8812      	ldrh	r2, [r2, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009c3c:	183b      	adds	r3, r7, r0
 8009c3e:	881a      	ldrh	r2, [r3, #0]
 8009c40:	183b      	adds	r3, r7, r0
 8009c42:	3201      	adds	r2, #1
 8009c44:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	200a      	movs	r0, #10
 8009c50:	183b      	adds	r3, r7, r0
 8009c52:	0212      	lsls	r2, r2, #8
 8009c54:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	b299      	uxth	r1, r3
 8009c5e:	183b      	adds	r3, r7, r0
 8009c60:	183a      	adds	r2, r7, r0
 8009c62:	8812      	ldrh	r2, [r2, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8009c68:	2309      	movs	r3, #9
 8009c6a:	18fb      	adds	r3, r7, r3
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	7952      	ldrb	r2, [r2, #5]
 8009c70:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8009c72:	183b      	adds	r3, r7, r0
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	2207      	movs	r2, #7
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d009      	beq.n	8009c90 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8009c7c:	183b      	adds	r3, r7, r0
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	08db      	lsrs	r3, r3, #3
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	230f      	movs	r3, #15
 8009c88:	18fb      	adds	r3, r7, r3
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	e007      	b.n	8009ca0 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8009c90:	230a      	movs	r3, #10
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	230f      	movs	r3, #15
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8009ca0:	210a      	movs	r1, #10
 8009ca2:	187b      	adds	r3, r7, r1
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d02d      	beq.n	8009d06 <eMBFuncWriteMultipleCoils+0x108>
 8009caa:	187b      	adds	r3, r7, r1
 8009cac:	881a      	ldrh	r2, [r3, #0]
 8009cae:	23f6      	movs	r3, #246	; 0xf6
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d827      	bhi.n	8009d06 <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8009cb6:	230f      	movs	r3, #15
 8009cb8:	18fa      	adds	r2, r7, r3
 8009cba:	2309      	movs	r3, #9
 8009cbc:	18fb      	adds	r3, r7, r3
 8009cbe:	7812      	ldrb	r2, [r2, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d11f      	bne.n	8009d06 <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	1d98      	adds	r0, r3, #6
 8009cca:	2508      	movs	r5, #8
 8009ccc:	197c      	adds	r4, r7, r5
 8009cce:	187b      	adds	r3, r7, r1
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	8819      	ldrh	r1, [r3, #0]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f7f8 fe26 	bl	800292a <eMBRegCoilsCB>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009ce2:	197b      	adds	r3, r7, r5
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009cea:	230e      	movs	r3, #14
 8009cec:	18fc      	adds	r4, r7, r3
 8009cee:	197b      	adds	r3, r7, r5
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f000 fdf8 	bl	800a8e8 <prveMBError2Exception>
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8009cfc:	e00c      	b.n	8009d18 <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2205      	movs	r2, #5
 8009d02:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009d04:	e008      	b.n	8009d18 <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009d06:	230e      	movs	r3, #14
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	701a      	strb	r2, [r3, #0]
 8009d0e:	e003      	b.n	8009d18 <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009d10:	230e      	movs	r3, #14
 8009d12:	18fb      	adds	r3, r7, r3
 8009d14:	2203      	movs	r2, #3
 8009d16:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009d18:	230e      	movs	r3, #14
 8009d1a:	18fb      	adds	r3, r7, r3
 8009d1c:	781b      	ldrb	r3, [r3, #0]
}
 8009d1e:	0018      	movs	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b004      	add	sp, #16
 8009d24:	bdb0      	pop	{r4, r5, r7, pc}

08009d26 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8009d26:	b5b0      	push	{r4, r5, r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8009d30:	2316      	movs	r3, #22
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	2b05      	cmp	r3, #5
 8009d3e:	d000      	beq.n	8009d42 <eMBFuncReadDiscreteInputs+0x1c>
 8009d40:	e091      	b.n	8009e66 <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3301      	adds	r3, #1
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	2014      	movs	r0, #20
 8009d4c:	183b      	adds	r3, r7, r0
 8009d4e:	0212      	lsls	r2, r2, #8
 8009d50:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3302      	adds	r3, #2
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	b299      	uxth	r1, r3
 8009d5a:	183b      	adds	r3, r7, r0
 8009d5c:	183a      	adds	r2, r7, r0
 8009d5e:	8812      	ldrh	r2, [r2, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009d64:	183b      	adds	r3, r7, r0
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	183b      	adds	r3, r7, r0
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3303      	adds	r3, #3
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	2012      	movs	r0, #18
 8009d78:	183b      	adds	r3, r7, r0
 8009d7a:	0212      	lsls	r2, r2, #8
 8009d7c:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3304      	adds	r3, #4
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b299      	uxth	r1, r3
 8009d86:	183b      	adds	r3, r7, r0
 8009d88:	183a      	adds	r2, r7, r0
 8009d8a:	8812      	ldrh	r2, [r2, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8009d90:	183b      	adds	r3, r7, r0
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d061      	beq.n	8009e5c <eMBFuncReadDiscreteInputs+0x136>
 8009d98:	0001      	movs	r1, r0
 8009d9a:	183b      	adds	r3, r7, r0
 8009d9c:	881a      	ldrh	r2, [r3, #0]
 8009d9e:	23fa      	movs	r3, #250	; 0xfa
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d25a      	bcs.n	8009e5c <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2200      	movs	r2, #0
 8009dae:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	60fa      	str	r2, [r7, #12]
 8009db6:	2202      	movs	r2, #2
 8009db8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	2207      	movs	r2, #7
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d009      	beq.n	8009de4 <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	08db      	lsrs	r3, r3, #3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	2317      	movs	r3, #23
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	3201      	adds	r2, #1
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e007      	b.n	8009df4 <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8009de4:	2312      	movs	r3, #18
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	2317      	movs	r3, #23
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	60fa      	str	r2, [r7, #12]
 8009dfa:	2217      	movs	r2, #23
 8009dfc:	18ba      	adds	r2, r7, r2
 8009dfe:	7812      	ldrb	r2, [r2, #0]
 8009e00:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	3301      	adds	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8009e0e:	250b      	movs	r5, #11
 8009e10:	197c      	adds	r4, r7, r5
 8009e12:	2312      	movs	r3, #18
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	881a      	ldrh	r2, [r3, #0]
 8009e18:	2314      	movs	r3, #20
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	8819      	ldrh	r1, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	0018      	movs	r0, r3
 8009e22:	f7f8 fd99 	bl	8002958 <eMBRegDiscreteCB>
 8009e26:	0003      	movs	r3, r0
 8009e28:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009e2a:	197b      	adds	r3, r7, r5
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009e32:	2316      	movs	r3, #22
 8009e34:	18fc      	adds	r4, r7, r3
 8009e36:	197b      	adds	r3, r7, r5
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f000 fd54 	bl	800a8e8 <prveMBError2Exception>
 8009e40:	0003      	movs	r3, r0
 8009e42:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8009e44:	e013      	b.n	8009e6e <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	881a      	ldrh	r2, [r3, #0]
 8009e4a:	2317      	movs	r3, #23
 8009e4c:	18fb      	adds	r3, r7, r3
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009e5a:	e008      	b.n	8009e6e <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009e5c:	2316      	movs	r3, #22
 8009e5e:	18fb      	adds	r3, r7, r3
 8009e60:	2203      	movs	r2, #3
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	e003      	b.n	8009e6e <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009e66:	2316      	movs	r3, #22
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009e6e:	2316      	movs	r3, #22
 8009e70:	18fb      	adds	r3, r7, r3
 8009e72:	781b      	ldrb	r3, [r3, #0]
}
 8009e74:	0018      	movs	r0, r3
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b006      	add	sp, #24
 8009e7a:	bdb0      	pop	{r4, r5, r7, pc}

08009e7c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8009e86:	260f      	movs	r6, #15
 8009e88:	19bb      	adds	r3, r7, r6
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d12f      	bne.n	8009ef6 <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	200c      	movs	r0, #12
 8009ea0:	183b      	adds	r3, r7, r0
 8009ea2:	0212      	lsls	r2, r2, #8
 8009ea4:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	b299      	uxth	r1, r3
 8009eae:	183b      	adds	r3, r7, r0
 8009eb0:	183a      	adds	r2, r7, r0
 8009eb2:	8812      	ldrh	r2, [r2, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009eb8:	183b      	adds	r3, r7, r0
 8009eba:	881a      	ldrh	r2, [r3, #0]
 8009ebc:	0001      	movs	r1, r0
 8009ebe:	183b      	adds	r3, r7, r0
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	1cd8      	adds	r0, r3, #3
 8009ec8:	250b      	movs	r5, #11
 8009eca:	197c      	adds	r4, r7, r5
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	8819      	ldrh	r1, [r3, #0]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f7f8 fc50 	bl	8002778 <eMBRegHoldingCB>
 8009ed8:	0003      	movs	r3, r0
 8009eda:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8009edc:	197b      	adds	r3, r7, r5
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00c      	beq.n	8009efe <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8009ee4:	19bc      	adds	r4, r7, r6
 8009ee6:	197b      	adds	r3, r7, r5
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	0018      	movs	r0, r3
 8009eec:	f000 fcfc 	bl	800a8e8 <prveMBError2Exception>
 8009ef0:	0003      	movs	r3, r0
 8009ef2:	7023      	strb	r3, [r4, #0]
 8009ef4:	e003      	b.n	8009efe <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009ef6:	230f      	movs	r3, #15
 8009ef8:	18fb      	adds	r3, r7, r3
 8009efa:	2203      	movs	r2, #3
 8009efc:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009efe:	230f      	movs	r3, #15
 8009f00:	18fb      	adds	r3, r7, r3
 8009f02:	781b      	ldrb	r3, [r3, #0]
}
 8009f04:	0018      	movs	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b005      	add	sp, #20
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f0c <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8009f16:	230f      	movs	r3, #15
 8009f18:	18fb      	adds	r3, r7, r3
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d962      	bls.n	8009fec <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	200c      	movs	r0, #12
 8009f30:	183b      	adds	r3, r7, r0
 8009f32:	0212      	lsls	r2, r2, #8
 8009f34:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3302      	adds	r3, #2
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b299      	uxth	r1, r3
 8009f3e:	183b      	adds	r3, r7, r0
 8009f40:	183a      	adds	r2, r7, r0
 8009f42:	8812      	ldrh	r2, [r2, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8009f48:	183b      	adds	r3, r7, r0
 8009f4a:	881a      	ldrh	r2, [r3, #0]
 8009f4c:	0005      	movs	r5, r0
 8009f4e:	183b      	adds	r3, r7, r0
 8009f50:	3201      	adds	r2, #1
 8009f52:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3303      	adds	r3, #3
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	200a      	movs	r0, #10
 8009f5e:	183b      	adds	r3, r7, r0
 8009f60:	0212      	lsls	r2, r2, #8
 8009f62:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b299      	uxth	r1, r3
 8009f6c:	183b      	adds	r3, r7, r0
 8009f6e:	183a      	adds	r2, r7, r0
 8009f70:	8812      	ldrh	r2, [r2, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8009f76:	2409      	movs	r4, #9
 8009f78:	193b      	adds	r3, r7, r4
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	7952      	ldrb	r2, [r2, #5]
 8009f7e:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8009f80:	0001      	movs	r1, r0
 8009f82:	187b      	adds	r3, r7, r1
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d02b      	beq.n	8009fe2 <eMBFuncWriteMultipleHoldingRegister+0xd6>
 8009f8a:	187b      	adds	r3, r7, r1
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	2b78      	cmp	r3, #120	; 0x78
 8009f90:	d827      	bhi.n	8009fe2 <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	18db      	adds	r3, r3, r3
 8009f9a:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8009f9c:	193a      	adds	r2, r7, r4
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d11e      	bne.n	8009fe2 <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	1d98      	adds	r0, r3, #6
 8009fa8:	2608      	movs	r6, #8
 8009faa:	19bc      	adds	r4, r7, r6
 8009fac:	187b      	adds	r3, r7, r1
 8009fae:	881a      	ldrh	r2, [r3, #0]
 8009fb0:	197b      	adds	r3, r7, r5
 8009fb2:	8819      	ldrh	r1, [r3, #0]
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f7f8 fbdf 	bl	8002778 <eMBRegHoldingCB>
 8009fba:	0003      	movs	r3, r0
 8009fbc:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009fbe:	19bb      	adds	r3, r7, r6
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009fc6:	230f      	movs	r3, #15
 8009fc8:	18fc      	adds	r4, r7, r3
 8009fca:	19bb      	adds	r3, r7, r6
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f000 fc8a 	bl	800a8e8 <prveMBError2Exception>
 8009fd4:	0003      	movs	r3, r0
 8009fd6:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8009fd8:	e00c      	b.n	8009ff4 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2205      	movs	r2, #5
 8009fde:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009fe0:	e008      	b.n	8009ff4 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009fe2:	230f      	movs	r3, #15
 8009fe4:	18fb      	adds	r3, r7, r3
 8009fe6:	2203      	movs	r2, #3
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	e003      	b.n	8009ff4 <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009fec:	230f      	movs	r3, #15
 8009fee:	18fb      	adds	r3, r7, r3
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009ff4:	230f      	movs	r3, #15
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	781b      	ldrb	r3, [r3, #0]
}
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	b005      	add	sp, #20
 800a000:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a002 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800a002:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a004:	b087      	sub	sp, #28
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800a00c:	2317      	movs	r3, #23
 800a00e:	18fb      	adds	r3, r7, r3
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	2b05      	cmp	r3, #5
 800a01a:	d000      	beq.n	800a01e <eMBFuncReadHoldingRegister+0x1c>
 800a01c:	e075      	b.n	800a10a <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3301      	adds	r3, #1
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	b29a      	uxth	r2, r3
 800a026:	2014      	movs	r0, #20
 800a028:	183b      	adds	r3, r7, r0
 800a02a:	0212      	lsls	r2, r2, #8
 800a02c:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3302      	adds	r3, #2
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b299      	uxth	r1, r3
 800a036:	183b      	adds	r3, r7, r0
 800a038:	183a      	adds	r2, r7, r0
 800a03a:	8812      	ldrh	r2, [r2, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800a040:	183b      	adds	r3, r7, r0
 800a042:	881a      	ldrh	r2, [r3, #0]
 800a044:	183b      	adds	r3, r7, r0
 800a046:	3201      	adds	r2, #1
 800a048:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3303      	adds	r3, #3
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b29a      	uxth	r2, r3
 800a052:	2512      	movs	r5, #18
 800a054:	197b      	adds	r3, r7, r5
 800a056:	0212      	lsls	r2, r2, #8
 800a058:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3304      	adds	r3, #4
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	197b      	adds	r3, r7, r5
 800a062:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800a064:	197b      	adds	r3, r7, r5
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d049      	beq.n	800a100 <eMBFuncReadHoldingRegister+0xfe>
 800a06c:	197b      	adds	r3, r7, r5
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	2b7d      	cmp	r3, #125	; 0x7d
 800a072:	d845      	bhi.n	800a100 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2200      	movs	r2, #0
 800a07c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
 800a084:	2203      	movs	r2, #3
 800a086:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	3301      	adds	r3, #1
 800a08e:	b29a      	uxth	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800a094:	197b      	adds	r3, r7, r5
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b2d9      	uxtb	r1, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	60fa      	str	r2, [r7, #12]
 800a0a0:	1c0a      	adds	r2, r1, #0
 800a0a2:	1892      	adds	r2, r2, r2
 800a0a4:	b2d2      	uxtb	r2, r2
 800a0a6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800a0b4:	260b      	movs	r6, #11
 800a0b6:	19bc      	adds	r4, r7, r6
 800a0b8:	197b      	adds	r3, r7, r5
 800a0ba:	881a      	ldrh	r2, [r3, #0]
 800a0bc:	183b      	adds	r3, r7, r0
 800a0be:	8819      	ldrh	r1, [r3, #0]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f7f8 fb58 	bl	8002778 <eMBRegHoldingCB>
 800a0c8:	0003      	movs	r3, r0
 800a0ca:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800a0cc:	19bb      	adds	r3, r7, r6
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d009      	beq.n	800a0e8 <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800a0d4:	2317      	movs	r3, #23
 800a0d6:	18fc      	adds	r4, r7, r3
 800a0d8:	19bb      	adds	r3, r7, r6
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f000 fc03 	bl	800a8e8 <prveMBError2Exception>
 800a0e2:	0003      	movs	r3, r0
 800a0e4:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800a0e6:	e014      	b.n	800a112 <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	881a      	ldrh	r2, [r3, #0]
 800a0ec:	2312      	movs	r3, #18
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	18db      	adds	r3, r3, r3
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	18d3      	adds	r3, r2, r3
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800a0fe:	e008      	b.n	800a112 <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800a100:	2317      	movs	r3, #23
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	2203      	movs	r2, #3
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e003      	b.n	800a112 <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800a10a:	2317      	movs	r3, #23
 800a10c:	18fb      	adds	r3, r7, r3
 800a10e:	2203      	movs	r2, #3
 800a110:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800a112:	2317      	movs	r3, #23
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	781b      	ldrb	r3, [r3, #0]
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	b007      	add	sp, #28
 800a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a120 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800a12a:	2317      	movs	r3, #23
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	2b09      	cmp	r3, #9
 800a138:	d800      	bhi.n	800a13c <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 800a13a:	e0d0      	b.n	800a2de <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3301      	adds	r3, #1
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b29a      	uxth	r2, r3
 800a144:	2014      	movs	r0, #20
 800a146:	183b      	adds	r3, r7, r0
 800a148:	0212      	lsls	r2, r2, #8
 800a14a:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3302      	adds	r3, #2
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b299      	uxth	r1, r3
 800a154:	183b      	adds	r3, r7, r0
 800a156:	183a      	adds	r2, r7, r0
 800a158:	8812      	ldrh	r2, [r2, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	881a      	ldrh	r2, [r3, #0]
 800a162:	0006      	movs	r6, r0
 800a164:	183b      	adds	r3, r7, r0
 800a166:	3201      	adds	r2, #1
 800a168:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3303      	adds	r3, #3
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b29a      	uxth	r2, r3
 800a172:	2012      	movs	r0, #18
 800a174:	183b      	adds	r3, r7, r0
 800a176:	0212      	lsls	r2, r2, #8
 800a178:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	b299      	uxth	r1, r3
 800a182:	183b      	adds	r3, r7, r0
 800a184:	183a      	adds	r2, r7, r0
 800a186:	8812      	ldrh	r2, [r2, #0]
 800a188:	430a      	orrs	r2, r1
 800a18a:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3305      	adds	r3, #5
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	b29a      	uxth	r2, r3
 800a194:	2410      	movs	r4, #16
 800a196:	193b      	adds	r3, r7, r4
 800a198:	0212      	lsls	r2, r2, #8
 800a19a:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3306      	adds	r3, #6
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	b299      	uxth	r1, r3
 800a1a4:	193b      	adds	r3, r7, r4
 800a1a6:	193a      	adds	r2, r7, r4
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 800a1ae:	193b      	adds	r3, r7, r4
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	193b      	adds	r3, r7, r4
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3307      	adds	r3, #7
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	240e      	movs	r4, #14
 800a1c2:	193b      	adds	r3, r7, r4
 800a1c4:	0212      	lsls	r2, r2, #8
 800a1c6:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b299      	uxth	r1, r3
 800a1d0:	193b      	adds	r3, r7, r4
 800a1d2:	193a      	adds	r2, r7, r4
 800a1d4:	8812      	ldrh	r2, [r2, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800a1da:	220d      	movs	r2, #13
 800a1dc:	18bb      	adds	r3, r7, r2
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	7a52      	ldrb	r2, [r2, #9]
 800a1e2:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800a1e4:	183b      	adds	r3, r7, r0
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d100      	bne.n	800a1ee <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 800a1ec:	e073      	b.n	800a2d6 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 800a1ee:	0005      	movs	r5, r0
 800a1f0:	183b      	adds	r3, r7, r0
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	2b7d      	cmp	r3, #125	; 0x7d
 800a1f6:	d900      	bls.n	800a1fa <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 800a1f8:	e06d      	b.n	800a2d6 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 800a1fa:	0021      	movs	r1, r4
 800a1fc:	187b      	adds	r3, r7, r1
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d068      	beq.n	800a2d6 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800a204:	187b      	adds	r3, r7, r1
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	2b79      	cmp	r3, #121	; 0x79
 800a20a:	d864      	bhi.n	800a2d6 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 800a20c:	187b      	adds	r3, r7, r1
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	005a      	lsls	r2, r3, #1
 800a212:	200d      	movs	r0, #13
 800a214:	183b      	adds	r3, r7, r0
 800a216:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800a218:	429a      	cmp	r2, r3
 800a21a:	d15c      	bne.n	800a2d6 <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0018      	movs	r0, r3
 800a220:	300a      	adds	r0, #10
 800a222:	2216      	movs	r2, #22
 800a224:	18bc      	adds	r4, r7, r2
 800a226:	187b      	adds	r3, r7, r1
 800a228:	881a      	ldrh	r2, [r3, #0]
 800a22a:	2310      	movs	r3, #16
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	8819      	ldrh	r1, [r3, #0]
 800a230:	2301      	movs	r3, #1
 800a232:	f7f8 faa1 	bl	8002778 <eMBRegHoldingCB>
 800a236:	0003      	movs	r3, r0
 800a238:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800a23a:	2016      	movs	r0, #22
 800a23c:	183b      	adds	r3, r7, r0
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d139      	bne.n	800a2b8 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2200      	movs	r2, #0
 800a24c:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	60ba      	str	r2, [r7, #8]
 800a254:	2217      	movs	r2, #23
 800a256:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800a264:	197b      	adds	r3, r7, r5
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	60ba      	str	r2, [r7, #8]
 800a270:	1c0a      	adds	r2, r1, #0
 800a272:	1892      	adds	r2, r2, r2
 800a274:	b2d2      	uxtb	r2, r2
 800a276:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	3301      	adds	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 800a284:	183c      	adds	r4, r7, r0
 800a286:	197b      	adds	r3, r7, r5
 800a288:	881a      	ldrh	r2, [r3, #0]
 800a28a:	19bb      	adds	r3, r7, r6
 800a28c:	8819      	ldrh	r1, [r3, #0]
 800a28e:	68b8      	ldr	r0, [r7, #8]
 800a290:	2300      	movs	r3, #0
 800a292:	f7f8 fa71 	bl	8002778 <eMBRegHoldingCB>
 800a296:	0003      	movs	r3, r0
 800a298:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 800a29a:	2016      	movs	r0, #22
 800a29c:	183b      	adds	r3, r7, r0
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	881a      	ldrh	r2, [r3, #0]
 800a2a8:	197b      	adds	r3, r7, r5
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	18db      	adds	r3, r3, r3
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	18d3      	adds	r3, r2, r3
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800a2b8:	2216      	movs	r2, #22
 800a2ba:	18bb      	adds	r3, r7, r2
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00d      	beq.n	800a2de <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800a2c2:	2317      	movs	r3, #23
 800a2c4:	18fc      	adds	r4, r7, r3
 800a2c6:	18bb      	adds	r3, r7, r2
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f000 fb0c 	bl	800a8e8 <prveMBError2Exception>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800a2d4:	e003      	b.n	800a2de <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800a2d6:	2317      	movs	r3, #23
 800a2d8:	18fb      	adds	r3, r7, r3
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 800a2de:	2317      	movs	r3, #23
 800a2e0:	18fb      	adds	r3, r7, r3
 800a2e2:	781b      	ldrb	r3, [r3, #0]
}
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	b007      	add	sp, #28
 800a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ec <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800a2f6:	2317      	movs	r3, #23
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	2b05      	cmp	r3, #5
 800a304:	d000      	beq.n	800a308 <eMBFuncReadInputRegister+0x1c>
 800a306:	e07a      	b.n	800a3fe <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3301      	adds	r3, #1
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b29a      	uxth	r2, r3
 800a310:	2014      	movs	r0, #20
 800a312:	183b      	adds	r3, r7, r0
 800a314:	0212      	lsls	r2, r2, #8
 800a316:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3302      	adds	r3, #2
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b299      	uxth	r1, r3
 800a320:	183b      	adds	r3, r7, r0
 800a322:	183a      	adds	r2, r7, r0
 800a324:	8812      	ldrh	r2, [r2, #0]
 800a326:	430a      	orrs	r2, r1
 800a328:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800a32a:	183b      	adds	r3, r7, r0
 800a32c:	881a      	ldrh	r2, [r3, #0]
 800a32e:	0005      	movs	r5, r0
 800a330:	183b      	adds	r3, r7, r0
 800a332:	3201      	adds	r2, #1
 800a334:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3303      	adds	r3, #3
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	2012      	movs	r0, #18
 800a340:	183b      	adds	r3, r7, r0
 800a342:	0212      	lsls	r2, r2, #8
 800a344:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3304      	adds	r3, #4
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b299      	uxth	r1, r3
 800a34e:	183b      	adds	r3, r7, r0
 800a350:	183a      	adds	r2, r7, r0
 800a352:	8812      	ldrh	r2, [r2, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800a358:	183b      	adds	r3, r7, r0
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d049      	beq.n	800a3f4 <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800a360:	183b      	adds	r3, r7, r0
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	2b7c      	cmp	r3, #124	; 0x7c
 800a366:	d845      	bhi.n	800a3f4 <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2200      	movs	r2, #0
 800a370:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	60fa      	str	r2, [r7, #12]
 800a378:	2204      	movs	r2, #4
 800a37a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	3301      	adds	r3, #1
 800a382:	b29a      	uxth	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800a388:	183b      	adds	r3, r7, r0
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b2d9      	uxtb	r1, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	60fa      	str	r2, [r7, #12]
 800a394:	1c0a      	adds	r2, r1, #0
 800a396:	1892      	adds	r2, r2, r2
 800a398:	b2d2      	uxtb	r2, r2
 800a39a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800a3a8:	260b      	movs	r6, #11
 800a3aa:	19bc      	adds	r4, r7, r6
 800a3ac:	183b      	adds	r3, r7, r0
 800a3ae:	881a      	ldrh	r2, [r3, #0]
 800a3b0:	197b      	adds	r3, r7, r5
 800a3b2:	8819      	ldrh	r1, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f7f8 faa6 	bl	8002908 <eMBRegInputCB>
 800a3bc:	0003      	movs	r3, r0
 800a3be:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800a3c0:	19bb      	adds	r3, r7, r6
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d009      	beq.n	800a3dc <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800a3c8:	2317      	movs	r3, #23
 800a3ca:	18fc      	adds	r4, r7, r3
 800a3cc:	19bb      	adds	r3, r7, r6
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f000 fa89 	bl	800a8e8 <prveMBError2Exception>
 800a3d6:	0003      	movs	r3, r0
 800a3d8:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800a3da:	e014      	b.n	800a406 <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	881a      	ldrh	r2, [r3, #0]
 800a3e0:	2312      	movs	r3, #18
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	18db      	adds	r3, r3, r3
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	18d3      	adds	r3, r2, r3
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800a3f2:	e008      	b.n	800a406 <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800a3f4:	2317      	movs	r3, #23
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e003      	b.n	800a406 <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800a3fe:	2317      	movs	r3, #23
 800a400:	18fb      	adds	r3, r7, r3
 800a402:	2203      	movs	r2, #3
 800a404:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800a406:	2317      	movs	r3, #23
 800a408:	18fb      	adds	r3, r7, r3
 800a40a:	781b      	ldrb	r3, [r3, #0]
}
 800a40c:	0018      	movs	r0, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	b007      	add	sp, #28
 800a412:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a414 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	1c58      	adds	r0, r3, #1
 800a422:	4b09      	ldr	r3, [pc, #36]	; (800a448 <eMBFuncReportSlaveID+0x34>)
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	001a      	movs	r2, r3
 800a428:	4b08      	ldr	r3, [pc, #32]	; (800a44c <eMBFuncReportSlaveID+0x38>)
 800a42a:	0019      	movs	r1, r3
 800a42c:	f000 fdb8 	bl	800afa0 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <eMBFuncReportSlaveID+0x34>)
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	3301      	adds	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	0018      	movs	r0, r3
 800a440:	46bd      	mov	sp, r7
 800a442:	b002      	add	sp, #8
 800a444:	bd80      	pop	{r7, pc}
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	20000608 	.word	0x20000608
 800a44c:	200005e8 	.word	0x200005e8

0800a450 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a450:	b590      	push	{r4, r7, lr}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	0004      	movs	r4, r0
 800a458:	0008      	movs	r0, r1
 800a45a:	603a      	str	r2, [r7, #0]
 800a45c:	0019      	movs	r1, r3
 800a45e:	1dfb      	adds	r3, r7, #7
 800a460:	1c22      	adds	r2, r4, #0
 800a462:	701a      	strb	r2, [r3, #0]
 800a464:	1dbb      	adds	r3, r7, #6
 800a466:	1c02      	adds	r2, r0, #0
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	1d7b      	adds	r3, r7, #5
 800a46c:	1c0a      	adds	r2, r1, #0
 800a46e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a470:	240f      	movs	r4, #15
 800a472:	193b      	adds	r3, r7, r4
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a478:	b672      	cpsid	i
}
 800a47a:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800a47c:	1d7b      	adds	r3, r7, #5
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	1dbb      	adds	r3, r7, #6
 800a484:	7818      	ldrb	r0, [r3, #0]
 800a486:	0013      	movs	r3, r2
 800a488:	2208      	movs	r2, #8
 800a48a:	f000 fad7 	bl	800aa3c <xMBPortSerialInit>
 800a48e:	0003      	movs	r3, r0
 800a490:	2b01      	cmp	r3, #1
 800a492:	d003      	beq.n	800a49c <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 800a494:	193b      	adds	r3, r7, r4
 800a496:	2203      	movs	r2, #3
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	e01b      	b.n	800a4d4 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	2396      	movs	r3, #150	; 0x96
 800a4a0:	01db      	lsls	r3, r3, #7
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d902      	bls.n	800a4ac <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800a4a6:	2323      	movs	r3, #35	; 0x23
 800a4a8:	60bb      	str	r3, [r7, #8]
 800a4aa:	e007      	b.n	800a4bc <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	0019      	movs	r1, r3
 800a4b2:	480d      	ldr	r0, [pc, #52]	; (800a4e8 <eMBRTUInit+0x98>)
 800a4b4:	f7f5 fe40 	bl	8000138 <__udivsi3>
 800a4b8:	0003      	movs	r3, r0
 800a4ba:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f000 faf9 	bl	800aab8 <xMBPortTimersInit>
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d003      	beq.n	800a4d4 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 800a4cc:	230f      	movs	r3, #15
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a4d4:	b662      	cpsie	i
}
 800a4d6:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 800a4d8:	230f      	movs	r3, #15
 800a4da:	18fb      	adds	r3, r7, r3
 800a4dc:	781b      	ldrb	r3, [r3, #0]
}
 800a4de:	0018      	movs	r0, r3
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	b005      	add	sp, #20
 800a4e4:	bd90      	pop	{r4, r7, pc}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	00177fa0 	.word	0x00177fa0

0800a4ec <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f0:	b672      	cpsid	i
}
 800a4f2:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <eMBRTUStart+0x24>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f000 fa63 	bl	800a9c8 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800a502:	f000 fb1d 	bl	800ab40 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 800a506:	b662      	cpsie	i
}
 800a508:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	2000060b 	.word	0x2000060b

0800a514 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a518:	b672      	cpsid	i
}
 800a51a:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 800a51c:	2100      	movs	r1, #0
 800a51e:	2000      	movs	r0, #0
 800a520:	f000 fa52 	bl	800a9c8 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800a524:	f000 fb20 	bl	800ab68 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 800a528:	b662      	cpsie	i
}
 800a52a:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 800a52c:	46c0      	nop			; (mov r8, r8)
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 800a540:	2316      	movs	r3, #22
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a548:	2317      	movs	r3, #23
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a550:	b672      	cpsid	i
}
 800a552:	46c0      	nop			; (mov r8, r8)
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800a554:	4b1d      	ldr	r3, [pc, #116]	; (800a5cc <eMBRTUReceive+0x98>)
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2bff      	cmp	r3, #255	; 0xff
 800a55c:	d905      	bls.n	800a56a <eMBRTUReceive+0x36>
 800a55e:	4b1c      	ldr	r3, [pc, #112]	; (800a5d0 <eMBRTUReceive+0x9c>)
 800a560:	4a1c      	ldr	r2, [pc, #112]	; (800a5d4 <eMBRTUReceive+0xa0>)
 800a562:	481d      	ldr	r0, [pc, #116]	; (800a5d8 <eMBRTUReceive+0xa4>)
 800a564:	21a1      	movs	r1, #161	; 0xa1
 800a566:	f000 fcaf 	bl	800aec8 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800a56a:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <eMBRTUReceive+0x98>)
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b03      	cmp	r3, #3
 800a572:	d91d      	bls.n	800a5b0 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800a574:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <eMBRTUReceive+0x98>)
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29a      	uxth	r2, r3
 800a57a:	4b18      	ldr	r3, [pc, #96]	; (800a5dc <eMBRTUReceive+0xa8>)
 800a57c:	0011      	movs	r1, r2
 800a57e:	0018      	movs	r0, r3
 800a580:	f7ff f9de 	bl	8009940 <usMBCRC16>
 800a584:	1e03      	subs	r3, r0, #0
 800a586:	d113      	bne.n	800a5b0 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <eMBRTUReceive+0xa8>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800a592:	4b0e      	ldr	r3, [pc, #56]	; (800a5cc <eMBRTUReceive+0x98>)
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b03      	subs	r3, #3
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <eMBRTUReceive+0xac>)
 800a5a4:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800a5a6:	2316      	movs	r3, #22
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	e003      	b.n	800a5b8 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 800a5b0:	2317      	movs	r3, #23
 800a5b2:	18fb      	adds	r3, r7, r3
 800a5b4:	2205      	movs	r2, #5
 800a5b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a5b8:	b662      	cpsie	i
}
 800a5ba:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800a5bc:	2317      	movs	r3, #23
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	781b      	ldrb	r3, [r3, #0]
}
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b006      	add	sp, #24
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	20000712 	.word	0x20000712
 800a5d0:	0800daf8 	.word	0x0800daf8
 800a5d4:	0800dfd0 	.word	0x0800dfd0
 800a5d8:	0800db20 	.word	0x0800db20
 800a5dc:	2000060c 	.word	0x2000060c
 800a5e0:	2000060d 	.word	0x2000060d

0800a5e4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800a5e4:	b5b0      	push	{r4, r5, r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6039      	str	r1, [r7, #0]
 800a5ec:	0011      	movs	r1, r2
 800a5ee:	1dfb      	adds	r3, r7, #7
 800a5f0:	1c02      	adds	r2, r0, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	1d3b      	adds	r3, r7, #4
 800a5f6:	1c0a      	adds	r2, r1, #0
 800a5f8:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a5fa:	230f      	movs	r3, #15
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a602:	b672      	cpsid	i
}
 800a604:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800a606:	4b2c      	ldr	r3, [pc, #176]	; (800a6b8 <eMBRTUSend+0xd4>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d145      	bne.n	800a69c <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	4b29      	ldr	r3, [pc, #164]	; (800a6bc <eMBRTUSend+0xd8>)
 800a616:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 800a618:	4b29      	ldr	r3, [pc, #164]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800a61e:	4b27      	ldr	r3, [pc, #156]	; (800a6bc <eMBRTUSend+0xd8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	1dfa      	adds	r2, r7, #7
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800a628:	4b25      	ldr	r3, [pc, #148]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	1d3b      	adds	r3, r7, #4
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	18d3      	adds	r3, r2, r3
 800a634:	b29a      	uxth	r2, r3
 800a636:	4b22      	ldr	r3, [pc, #136]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a638:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800a63a:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <eMBRTUSend+0xd8>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	b29b      	uxth	r3, r3
 800a644:	250c      	movs	r5, #12
 800a646:	197c      	adds	r4, r7, r5
 800a648:	0019      	movs	r1, r3
 800a64a:	0010      	movs	r0, r2
 800a64c:	f7ff f978 	bl	8009940 <usMBCRC16>
 800a650:	0003      	movs	r3, r0
 800a652:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800a654:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	b291      	uxth	r1, r2
 800a65e:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a660:	8011      	strh	r1, [r2, #0]
 800a662:	001a      	movs	r2, r3
 800a664:	197b      	adds	r3, r7, r5
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	b2d9      	uxtb	r1, r3
 800a66a:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <eMBRTUSend+0xe0>)
 800a66c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800a66e:	197b      	adds	r3, r7, r5
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b299      	uxth	r1, r3
 800a676:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	b290      	uxth	r0, r2
 800a680:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <eMBRTUSend+0xdc>)
 800a682:	8010      	strh	r0, [r2, #0]
 800a684:	001a      	movs	r2, r3
 800a686:	b2c9      	uxtb	r1, r1
 800a688:	4b0e      	ldr	r3, [pc, #56]	; (800a6c4 <eMBRTUSend+0xe0>)
 800a68a:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800a68c:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <eMBRTUSend+0xe4>)
 800a68e:	2201      	movs	r2, #1
 800a690:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800a692:	2101      	movs	r1, #1
 800a694:	2000      	movs	r0, #0
 800a696:	f000 f997 	bl	800a9c8 <vMBPortSerialEnable>
 800a69a:	e003      	b.n	800a6a4 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 800a69c:	230f      	movs	r3, #15
 800a69e:	18fb      	adds	r3, r7, r3
 800a6a0:	2205      	movs	r2, #5
 800a6a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6a4:	b662      	cpsie	i
}
 800a6a6:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800a6a8:	230f      	movs	r3, #15
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	781b      	ldrb	r3, [r3, #0]
}
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	b004      	add	sp, #16
 800a6b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	2000060b 	.word	0x2000060b
 800a6bc:	2000070c 	.word	0x2000070c
 800a6c0:	20000710 	.word	0x20000710
 800a6c4:	2000060c 	.word	0x2000060c
 800a6c8:	2000060a 	.word	0x2000060a

0800a6cc <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800a6d2:	1dfb      	adds	r3, r7, #7
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <xMBRTUReceiveFSM+0xb8>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <xMBRTUReceiveFSM+0x22>
 800a6e2:	4b29      	ldr	r3, [pc, #164]	; (800a788 <xMBRTUReceiveFSM+0xbc>)
 800a6e4:	4a29      	ldr	r2, [pc, #164]	; (800a78c <xMBRTUReceiveFSM+0xc0>)
 800a6e6:	482a      	ldr	r0, [pc, #168]	; (800a790 <xMBRTUReceiveFSM+0xc4>)
 800a6e8:	21eb      	movs	r1, #235	; 0xeb
 800a6ea:	f000 fbed 	bl	800aec8 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800a6ee:	1dbb      	adds	r3, r7, #6
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 f9cf 	bl	800aa94 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800a6f6:	4b27      	ldr	r3, [pc, #156]	; (800a794 <xMBRTUReceiveFSM+0xc8>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d00b      	beq.n	800a718 <xMBRTUReceiveFSM+0x4c>
 800a700:	dc3a      	bgt.n	800a778 <xMBRTUReceiveFSM+0xac>
 800a702:	2b02      	cmp	r3, #2
 800a704:	d020      	beq.n	800a748 <xMBRTUReceiveFSM+0x7c>
 800a706:	dc37      	bgt.n	800a778 <xMBRTUReceiveFSM+0xac>
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <xMBRTUReceiveFSM+0x46>
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d006      	beq.n	800a71e <xMBRTUReceiveFSM+0x52>
 800a710:	e032      	b.n	800a778 <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800a712:	f000 fa15 	bl	800ab40 <vMBPortTimersEnable>
        break;
 800a716:	e02f      	b.n	800a778 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800a718:	f000 fa12 	bl	800ab40 <vMBPortTimersEnable>
        break;
 800a71c:	e02c      	b.n	800a778 <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800a71e:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a720:	2200      	movs	r2, #0
 800a722:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a724:	4b1c      	ldr	r3, [pc, #112]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	b291      	uxth	r1, r2
 800a72e:	4a1a      	ldr	r2, [pc, #104]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a730:	8011      	strh	r1, [r2, #0]
 800a732:	001a      	movs	r2, r3
 800a734:	1dbb      	adds	r3, r7, #6
 800a736:	7819      	ldrb	r1, [r3, #0]
 800a738:	4b18      	ldr	r3, [pc, #96]	; (800a79c <xMBRTUReceiveFSM+0xd0>)
 800a73a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800a73c:	4b15      	ldr	r3, [pc, #84]	; (800a794 <xMBRTUReceiveFSM+0xc8>)
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800a742:	f000 f9fd 	bl	800ab40 <vMBPortTimersEnable>
        break;
 800a746:	e017      	b.n	800a778 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	2bff      	cmp	r3, #255	; 0xff
 800a750:	d80c      	bhi.n	800a76c <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800a752:	4b11      	ldr	r3, [pc, #68]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	b291      	uxth	r1, r2
 800a75c:	4a0e      	ldr	r2, [pc, #56]	; (800a798 <xMBRTUReceiveFSM+0xcc>)
 800a75e:	8011      	strh	r1, [r2, #0]
 800a760:	001a      	movs	r2, r3
 800a762:	1dbb      	adds	r3, r7, #6
 800a764:	7819      	ldrb	r1, [r3, #0]
 800a766:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <xMBRTUReceiveFSM+0xd0>)
 800a768:	5499      	strb	r1, [r3, r2]
 800a76a:	e002      	b.n	800a772 <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800a76c:	4b09      	ldr	r3, [pc, #36]	; (800a794 <xMBRTUReceiveFSM+0xc8>)
 800a76e:	2203      	movs	r2, #3
 800a770:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800a772:	f000 f9e5 	bl	800ab40 <vMBPortTimersEnable>
        break;
 800a776:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 800a778:	1dfb      	adds	r3, r7, #7
 800a77a:	781b      	ldrb	r3, [r3, #0]
}
 800a77c:	0018      	movs	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	b002      	add	sp, #8
 800a782:	bd80      	pop	{r7, pc}
 800a784:	2000060a 	.word	0x2000060a
 800a788:	0800db34 	.word	0x0800db34
 800a78c:	0800dfe0 	.word	0x0800dfe0
 800a790:	0800db20 	.word	0x0800db20
 800a794:	2000060b 	.word	0x2000060b
 800a798:	20000712 	.word	0x20000712
 800a79c:	2000060c 	.word	0x2000060c

0800a7a0 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a7a6:	1dfb      	adds	r3, r7, #7
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 800a7ac:	4b22      	ldr	r3, [pc, #136]	; (800a838 <xMBRTUTransmitFSM+0x98>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d006      	beq.n	800a7c4 <xMBRTUTransmitFSM+0x24>
 800a7b6:	4b21      	ldr	r3, [pc, #132]	; (800a83c <xMBRTUTransmitFSM+0x9c>)
 800a7b8:	4a21      	ldr	r2, [pc, #132]	; (800a840 <xMBRTUTransmitFSM+0xa0>)
 800a7ba:	2193      	movs	r1, #147	; 0x93
 800a7bc:	0049      	lsls	r1, r1, #1
 800a7be:	4821      	ldr	r0, [pc, #132]	; (800a844 <xMBRTUTransmitFSM+0xa4>)
 800a7c0:	f000 fb82 	bl	800aec8 <__assert_func>

    switch ( eSndState )
 800a7c4:	4b20      	ldr	r3, [pc, #128]	; (800a848 <xMBRTUTransmitFSM+0xa8>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <xMBRTUTransmitFSM+0x34>
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d005      	beq.n	800a7de <xMBRTUTransmitFSM+0x3e>
 800a7d2:	e02b      	b.n	800a82c <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	f000 f8f6 	bl	800a9c8 <vMBPortSerialEnable>
        break;
 800a7dc:	e026      	b.n	800a82c <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800a7de:	4b1b      	ldr	r3, [pc, #108]	; (800a84c <xMBRTUTransmitFSM+0xac>)
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d013      	beq.n	800a810 <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800a7e8:	4b19      	ldr	r3, [pc, #100]	; (800a850 <xMBRTUTransmitFSM+0xb0>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f000 f939 	bl	800aa68 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800a7f6:	4b16      	ldr	r3, [pc, #88]	; (800a850 <xMBRTUTransmitFSM+0xb0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	4b14      	ldr	r3, [pc, #80]	; (800a850 <xMBRTUTransmitFSM+0xb0>)
 800a7fe:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 800a800:	4b12      	ldr	r3, [pc, #72]	; (800a84c <xMBRTUTransmitFSM+0xac>)
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	3b01      	subs	r3, #1
 800a808:	b29a      	uxth	r2, r3
 800a80a:	4b10      	ldr	r3, [pc, #64]	; (800a84c <xMBRTUTransmitFSM+0xac>)
 800a80c:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800a80e:	e00c      	b.n	800a82a <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800a810:	1dfc      	adds	r4, r7, #7
 800a812:	2003      	movs	r0, #3
 800a814:	f000 f8a0 	bl	800a958 <xMBPortEventPost>
 800a818:	0003      	movs	r3, r0
 800a81a:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 800a81c:	2100      	movs	r1, #0
 800a81e:	2001      	movs	r0, #1
 800a820:	f000 f8d2 	bl	800a9c8 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800a824:	4b08      	ldr	r3, [pc, #32]	; (800a848 <xMBRTUTransmitFSM+0xa8>)
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
        break;
 800a82a:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 800a82c:	1dfb      	adds	r3, r7, #7
 800a82e:	781b      	ldrb	r3, [r3, #0]
}
 800a830:	0018      	movs	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	b003      	add	sp, #12
 800a836:	bd90      	pop	{r4, r7, pc}
 800a838:	2000060b 	.word	0x2000060b
 800a83c:	0800db50 	.word	0x0800db50
 800a840:	0800dff4 	.word	0x0800dff4
 800a844:	0800db20 	.word	0x0800db20
 800a848:	2000060a 	.word	0x2000060a
 800a84c:	20000710 	.word	0x20000710
 800a850:	2000070c 	.word	0x2000070c

0800a854 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800a85a:	1dfb      	adds	r3, r7, #7
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 800a860:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <xMBRTUTimerT35Expired+0x84>)
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b03      	cmp	r3, #3
 800a868:	d029      	beq.n	800a8be <xMBRTUTimerT35Expired+0x6a>
 800a86a:	dc12      	bgt.n	800a892 <xMBRTUTimerT35Expired+0x3e>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <xMBRTUTimerT35Expired+0x22>
 800a870:	2b02      	cmp	r3, #2
 800a872:	d007      	beq.n	800a884 <xMBRTUTimerT35Expired+0x30>
 800a874:	e00d      	b.n	800a892 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800a876:	1dfc      	adds	r4, r7, #7
 800a878:	2000      	movs	r0, #0
 800a87a:	f000 f86d 	bl	800a958 <xMBPortEventPost>
 800a87e:	0003      	movs	r3, r0
 800a880:	7023      	strb	r3, [r4, #0]
        break;
 800a882:	e01d      	b.n	800a8c0 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800a884:	1dfc      	adds	r4, r7, #7
 800a886:	2001      	movs	r0, #1
 800a888:	f000 f866 	bl	800a958 <xMBPortEventPost>
 800a88c:	0003      	movs	r3, r0
 800a88e:	7023      	strb	r3, [r4, #0]
        break;
 800a890:	e016      	b.n	800a8c0 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800a892:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <xMBRTUTimerT35Expired+0x84>)
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d011      	beq.n	800a8c0 <xMBRTUTimerT35Expired+0x6c>
 800a89c:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <xMBRTUTimerT35Expired+0x84>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d00c      	beq.n	800a8c0 <xMBRTUTimerT35Expired+0x6c>
 800a8a6:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <xMBRTUTimerT35Expired+0x84>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d007      	beq.n	800a8c0 <xMBRTUTimerT35Expired+0x6c>
 800a8b0:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <xMBRTUTimerT35Expired+0x88>)
 800a8b2:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <xMBRTUTimerT35Expired+0x8c>)
 800a8b4:	2160      	movs	r1, #96	; 0x60
 800a8b6:	31ff      	adds	r1, #255	; 0xff
 800a8b8:	480a      	ldr	r0, [pc, #40]	; (800a8e4 <xMBRTUTimerT35Expired+0x90>)
 800a8ba:	f000 fb05 	bl	800aec8 <__assert_func>
        break;
 800a8be:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800a8c0:	f000 f952 	bl	800ab68 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <xMBRTUTimerT35Expired+0x84>)
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800a8ca:	1dfb      	adds	r3, r7, #7
 800a8cc:	781b      	ldrb	r3, [r3, #0]
}
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	b003      	add	sp, #12
 800a8d4:	bd90      	pop	{r4, r7, pc}
 800a8d6:	46c0      	nop			; (mov r8, r8)
 800a8d8:	2000060b 	.word	0x2000060b
 800a8dc:	0800db6c 	.word	0x0800db6c
 800a8e0:	0800e008 	.word	0x0800e008
 800a8e4:	0800db20 	.word	0x0800db20

0800a8e8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	0002      	movs	r2, r0
 800a8f0:	1dfb      	adds	r3, r7, #7
 800a8f2:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 800a8f4:	1dfb      	adds	r3, r7, #7
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b07      	cmp	r3, #7
 800a8fa:	d00f      	beq.n	800a91c <prveMBError2Exception+0x34>
 800a8fc:	dc13      	bgt.n	800a926 <prveMBError2Exception+0x3e>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <prveMBError2Exception+0x20>
 800a902:	2b01      	cmp	r3, #1
 800a904:	d005      	beq.n	800a912 <prveMBError2Exception+0x2a>
 800a906:	e00e      	b.n	800a926 <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800a908:	230f      	movs	r3, #15
 800a90a:	18fb      	adds	r3, r7, r3
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
            break;
 800a910:	e00e      	b.n	800a930 <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800a912:	230f      	movs	r3, #15
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	2202      	movs	r2, #2
 800a918:	701a      	strb	r2, [r3, #0]
            break;
 800a91a:	e009      	b.n	800a930 <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800a91c:	230f      	movs	r3, #15
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	2206      	movs	r2, #6
 800a922:	701a      	strb	r2, [r3, #0]
            break;
 800a924:	e004      	b.n	800a930 <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800a926:	230f      	movs	r3, #15
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	2204      	movs	r2, #4
 800a92c:	701a      	strb	r2, [r3, #0]
            break;
 800a92e:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 800a930:	230f      	movs	r3, #15
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	781b      	ldrb	r3, [r3, #0]
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b004      	add	sp, #16
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 800a944:	4b03      	ldr	r3, [pc, #12]	; (800a954 <xMBPortEventInit+0x14>)
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800a94a:	2301      	movs	r3, #1
}
 800a94c:	0018      	movs	r0, r3
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	20000715 	.word	0x20000715

0800a958 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	0002      	movs	r2, r0
 800a960:	1dfb      	adds	r3, r7, #7
 800a962:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <xMBPortEventPost+0x24>)
 800a966:	2201      	movs	r2, #1
 800a968:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <xMBPortEventPost+0x28>)
 800a96c:	1dfa      	adds	r2, r7, #7
 800a96e:	7812      	ldrb	r2, [r2, #0]
 800a970:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800a972:	2301      	movs	r3, #1
}
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b002      	add	sp, #8
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20000715 	.word	0x20000715
 800a980:	20000714 	.word	0x20000714

0800a984 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 800a98c:	210f      	movs	r1, #15
 800a98e:	187b      	adds	r3, r7, r1
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <xMBPortEventGet+0x3c>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d009      	beq.n	800a9b0 <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <xMBPortEventGet+0x40>)
 800a99e:	781a      	ldrb	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 800a9a4:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <xMBPortEventGet+0x3c>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800a9aa:	187b      	adds	r3, r7, r1
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 800a9b0:	230f      	movs	r3, #15
 800a9b2:	18fb      	adds	r3, r7, r3
 800a9b4:	781b      	ldrb	r3, [r3, #0]
}
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b004      	add	sp, #16
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	20000715 	.word	0x20000715
 800a9c4:	20000714 	.word	0x20000714

0800a9c8 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	0002      	movs	r2, r0
 800a9d0:	1dfb      	adds	r3, r7, #7
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	1dbb      	adds	r3, r7, #6
 800a9d6:	1c0a      	adds	r2, r1, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 800a9da:	1dfb      	adds	r3, r7, #7
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d008      	beq.n	800a9f4 <vMBPortSerialEnable+0x2c>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800a9e2:	4b15      	ldr	r3, [pc, #84]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2120      	movs	r1, #32
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	e007      	b.n	800aa04 <vMBPortSerialEnable+0x3c>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800a9f4:	4b10      	ldr	r3, [pc, #64]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2120      	movs	r1, #32
 800aa00:	438a      	bics	r2, r1
 800aa02:	601a      	str	r2, [r3, #0]
  }
  
  if (xTxEnable) {    
 800aa04:	1dbb      	adds	r3, r7, #6
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d008      	beq.n	800aa1e <vMBPortSerialEnable+0x56>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2180      	movs	r1, #128	; 0x80
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	601a      	str	r2, [r3, #0]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 800aa1c:	e007      	b.n	800aa2e <vMBPortSerialEnable+0x66>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <vMBPortSerialEnable+0x70>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2180      	movs	r1, #128	; 0x80
 800aa2a:	438a      	bics	r2, r1
 800aa2c:	601a      	str	r2, [r3, #0]
}
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	46bd      	mov	sp, r7
 800aa32:	b002      	add	sp, #8
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	20000508 	.word	0x20000508

0800aa3c <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 800aa3c:	b590      	push	{r4, r7, lr}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	0004      	movs	r4, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	0010      	movs	r0, r2
 800aa48:	0019      	movs	r1, r3
 800aa4a:	1dfb      	adds	r3, r7, #7
 800aa4c:	1c22      	adds	r2, r4, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	1dbb      	adds	r3, r7, #6
 800aa52:	1c02      	adds	r2, r0, #0
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	1d7b      	adds	r3, r7, #5
 800aa58:	1c0a      	adds	r2, r1, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 800aa5c:	2301      	movs	r3, #1
}
 800aa5e:	0018      	movs	r0, r3
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b003      	add	sp, #12
 800aa64:	bd90      	pop	{r4, r7, pc}
	...

0800aa68 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	0002      	movs	r2, r0
 800aa70:	1dfb      	adds	r3, r7, #7
 800aa72:	701a      	strb	r2, [r3, #0]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 800aa74:	1df9      	adds	r1, r7, #7
 800aa76:	4806      	ldr	r0, [pc, #24]	; (800aa90 <xMBPortSerialPutByte+0x28>)
 800aa78:	230a      	movs	r3, #10
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f7fd fbf6 	bl	800826c <HAL_UART_Transmit>
 800aa80:	0003      	movs	r3, r0
 800aa82:	425a      	negs	r2, r3
 800aa84:	4153      	adcs	r3, r2
 800aa86:	b2db      	uxtb	r3, r3
}
 800aa88:	0018      	movs	r0, r3
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20000508 	.word	0x20000508

0800aa94 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->RDR & (uint8_t)0x00FF);
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <xMBPortSerialGetByte+0x20>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800aaa8:	2301      	movs	r3, #1
}
 800aaaa:	0018      	movs	r0, r3
 800aaac:	46bd      	mov	sp, r7
 800aaae:	b002      	add	sp, #8
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	46c0      	nop			; (mov r8, r8)
 800aab4:	20000508 	.word	0x20000508

0800aab8 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	0002      	movs	r2, r0
 800aac0:	1dbb      	adds	r3, r7, #6
 800aac2:	801a      	strh	r2, [r3, #0]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim14.Instance = TIM14;
 800aac4:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <xMBPortTimersInit+0x78>)
 800aac6:	4a1b      	ldr	r2, [pc, #108]	; (800ab34 <xMBPortTimersInit+0x7c>)
 800aac8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800aaca:	f7fb fbb7 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 800aace:	0003      	movs	r3, r0
 800aad0:	4919      	ldr	r1, [pc, #100]	; (800ab38 <xMBPortTimersInit+0x80>)
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7f5 fb30 	bl	8000138 <__udivsi3>
 800aad8:	0003      	movs	r3, r0
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <xMBPortTimersInit+0x78>)
 800aade:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aae0:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <xMBPortTimersInit+0x78>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50 - 1;
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <xMBPortTimersInit+0x78>)
 800aae8:	2231      	movs	r2, #49	; 0x31
 800aaea:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 800aaec:	4b13      	ldr	r3, [pc, #76]	; (800ab3c <xMBPortTimersInit+0x84>)
 800aaee:	1dba      	adds	r2, r7, #6
 800aaf0:	8812      	ldrh	r2, [r2, #0]
 800aaf2:	801a      	strh	r2, [r3, #0]
  
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800aaf4:	4b0e      	ldr	r3, [pc, #56]	; (800ab30 <xMBPortTimersInit+0x78>)
 800aaf6:	0018      	movs	r0, r3
 800aaf8:	f7fc f8dc 	bl	8006cb4 <HAL_TIM_Base_Init>
 800aafc:	1e03      	subs	r3, r0, #0
 800aafe:	d001      	beq.n	800ab04 <xMBPortTimersInit+0x4c>
  {
    return FALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	e011      	b.n	800ab28 <xMBPortTimersInit+0x70>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ab04:	210c      	movs	r1, #12
 800ab06:	187b      	adds	r3, r7, r1
 800ab08:	2220      	movs	r2, #32
 800ab0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	2200      	movs	r2, #0
 800ab10:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig) != HAL_OK)
 800ab12:	187a      	adds	r2, r7, r1
 800ab14:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <xMBPortTimersInit+0x78>)
 800ab16:	0011      	movs	r1, r2
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7fd fa87 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 800ab1e:	1e03      	subs	r3, r0, #0
 800ab20:	d001      	beq.n	800ab26 <xMBPortTimersInit+0x6e>
  {
    return FALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e000      	b.n	800ab28 <xMBPortTimersInit+0x70>
  }
  
  return TRUE;
 800ab26:	2301      	movs	r3, #1
}
 800ab28:	0018      	movs	r0, r3
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b006      	add	sp, #24
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	200003c8 	.word	0x200003c8
 800ab34:	40002000 	.word	0x40002000
 800ab38:	000f4240 	.word	0x000f4240
 800ab3c:	20000716 	.word	0x20000716

0800ab40 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 800ab44:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <vMBPortTimersEnable+0x1c>)
 800ab46:	881a      	ldrh	r2, [r3, #0]
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <vMBPortTimersEnable+0x20>)
 800ab4a:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <vMBPortTimersEnable+0x24>)
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f7fc f908 	bl	8006d64 <HAL_TIM_Base_Start_IT>
}
 800ab54:	46c0      	nop			; (mov r8, r8)
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	20000716 	.word	0x20000716
 800ab60:	20000718 	.word	0x20000718
 800ab64:	200003c8 	.word	0x200003c8

0800ab68 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim14);
 800ab6c:	4b03      	ldr	r3, [pc, #12]	; (800ab7c <vMBPortTimersDisable+0x14>)
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f7fc f946 	bl	8006e00 <HAL_TIM_Base_Stop_IT>
}
 800ab74:	46c0      	nop			; (mov r8, r8)
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	200003c8 	.word	0x200003c8

0800ab80 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	0002      	movs	r2, r0
 800ab88:	1dfb      	adds	r3, r7, #7
 800ab8a:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800ab8c:	240f      	movs	r4, #15
 800ab8e:	193a      	adds	r2, r7, r4
 800ab90:	1df9      	adds	r1, r7, #7
 800ab92:	4806      	ldr	r0, [pc, #24]	; (800abac <W25qxx_Spi+0x2c>)
 800ab94:	2364      	movs	r3, #100	; 0x64
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f7fb fd43 	bl	8006624 <HAL_SPI_TransmitReceive>
	return ret;
 800ab9e:	193b      	adds	r3, r7, r4
 800aba0:	781b      	ldrb	r3, [r3, #0]
}
 800aba2:	0018      	movs	r0, r3
 800aba4:	46bd      	mov	sp, r7
 800aba6:	b005      	add	sp, #20
 800aba8:	bd90      	pop	{r4, r7, pc}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	20000314 	.word	0x20000314

0800abb0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	2300      	movs	r3, #0
 800abbc:	60bb      	str	r3, [r7, #8]
 800abbe:	2300      	movs	r3, #0
 800abc0:	607b      	str	r3, [r7, #4]
 800abc2:	2300      	movs	r3, #0
 800abc4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <W25qxx_ReadID+0x6c>)
 800abc8:	2200      	movs	r2, #0
 800abca:	2101      	movs	r1, #1
 800abcc:	0018      	movs	r0, r3
 800abce:	f7fa fe27 	bl	8005820 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800abd2:	209f      	movs	r0, #159	; 0x9f
 800abd4:	f7ff ffd4 	bl	800ab80 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800abd8:	20a5      	movs	r0, #165	; 0xa5
 800abda:	f7ff ffd1 	bl	800ab80 <W25qxx_Spi>
 800abde:	0003      	movs	r3, r0
 800abe0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800abe2:	20a5      	movs	r0, #165	; 0xa5
 800abe4:	f7ff ffcc 	bl	800ab80 <W25qxx_Spi>
 800abe8:	0003      	movs	r3, r0
 800abea:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800abec:	20a5      	movs	r0, #165	; 0xa5
 800abee:	f7ff ffc7 	bl	800ab80 <W25qxx_Spi>
 800abf2:	0003      	movs	r3, r0
 800abf4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <W25qxx_ReadID+0x6c>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	2101      	movs	r1, #1
 800abfc:	0018      	movs	r0, r3
 800abfe:	f7fa fe0f 	bl	8005820 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	041a      	lsls	r2, r3, #16
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	021b      	lsls	r3, r3, #8
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]
	return Temp;
 800ac12:	68fb      	ldr	r3, [r7, #12]
}
 800ac14:	0018      	movs	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	b004      	add	sp, #16
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	50000400 	.word	0x50000400

0800ac20 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800ac26:	4b1d      	ldr	r3, [pc, #116]	; (800ac9c <W25qxx_ReadUniqID+0x7c>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f7fa fdf7 	bl	8005820 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800ac32:	204b      	movs	r0, #75	; 0x4b
 800ac34:	f7ff ffa4 	bl	800ab80 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800ac38:	1dfb      	adds	r3, r7, #7
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e007      	b.n	800ac50 <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ac40:	20a5      	movs	r0, #165	; 0xa5
 800ac42:	f7ff ff9d 	bl	800ab80 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800ac46:	1dfb      	adds	r3, r7, #7
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	1dfb      	adds	r3, r7, #7
 800ac4c:	3201      	adds	r2, #1
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	1dfb      	adds	r3, r7, #7
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d9f3      	bls.n	800ac40 <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 800ac58:	1dbb      	adds	r3, r7, #6
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	701a      	strb	r2, [r3, #0]
 800ac5e:	e00e      	b.n	800ac7e <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ac60:	1dbb      	adds	r3, r7, #6
 800ac62:	781c      	ldrb	r4, [r3, #0]
 800ac64:	20a5      	movs	r0, #165	; 0xa5
 800ac66:	f7ff ff8b 	bl	800ab80 <W25qxx_Spi>
 800ac6a:	0003      	movs	r3, r0
 800ac6c:	001a      	movs	r2, r3
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <W25qxx_ReadUniqID+0x80>)
 800ac70:	191b      	adds	r3, r3, r4
 800ac72:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800ac74:	1dbb      	adds	r3, r7, #6
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	1dbb      	adds	r3, r7, #6
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	1dbb      	adds	r3, r7, #6
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	d9ec      	bls.n	800ac60 <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <W25qxx_ReadUniqID+0x7c>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	f7fa fdc7 	bl	8005820 <HAL_GPIO_WritePin>
}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b003      	add	sp, #12
 800ac98:	bd90      	pop	{r4, r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	50000400 	.word	0x50000400
 800aca0:	2000071c 	.word	0x2000071c

0800aca4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800aca4:	b5b0      	push	{r4, r5, r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	0002      	movs	r2, r0
 800acac:	1dfb      	adds	r3, r7, #7
 800acae:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800acb0:	240f      	movs	r4, #15
 800acb2:	193b      	adds	r3, r7, r4
 800acb4:	2200      	movs	r2, #0
 800acb6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800acb8:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <W25qxx_ReadStatusRegister+0xa8>)
 800acba:	2200      	movs	r2, #0
 800acbc:	2101      	movs	r1, #1
 800acbe:	0018      	movs	r0, r3
 800acc0:	f7fa fdae 	bl	8005820 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800acc4:	1dfb      	adds	r3, r7, #7
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d10f      	bne.n	800acec <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 800accc:	2005      	movs	r0, #5
 800acce:	f7ff ff57 	bl	800ab80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800acd2:	0025      	movs	r5, r4
 800acd4:	193c      	adds	r4, r7, r4
 800acd6:	20a5      	movs	r0, #165	; 0xa5
 800acd8:	f7ff ff52 	bl	800ab80 <W25qxx_Spi>
 800acdc:	0003      	movs	r3, r0
 800acde:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <W25qxx_ReadStatusRegister+0xac>)
 800ace2:	197a      	adds	r2, r7, r5
 800ace4:	2124      	movs	r1, #36	; 0x24
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	545a      	strb	r2, [r3, r1]
 800acea:	e022      	b.n	800ad32 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800acec:	1dfb      	adds	r3, r7, #7
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d10f      	bne.n	800ad14 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 800acf4:	2035      	movs	r0, #53	; 0x35
 800acf6:	f7ff ff43 	bl	800ab80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800acfa:	250f      	movs	r5, #15
 800acfc:	197c      	adds	r4, r7, r5
 800acfe:	20a5      	movs	r0, #165	; 0xa5
 800ad00:	f7ff ff3e 	bl	800ab80 <W25qxx_Spi>
 800ad04:	0003      	movs	r3, r0
 800ad06:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <W25qxx_ReadStatusRegister+0xac>)
 800ad0a:	197a      	adds	r2, r7, r5
 800ad0c:	2125      	movs	r1, #37	; 0x25
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	545a      	strb	r2, [r3, r1]
 800ad12:	e00e      	b.n	800ad32 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 800ad14:	2015      	movs	r0, #21
 800ad16:	f7ff ff33 	bl	800ab80 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800ad1a:	250f      	movs	r5, #15
 800ad1c:	197c      	adds	r4, r7, r5
 800ad1e:	20a5      	movs	r0, #165	; 0xa5
 800ad20:	f7ff ff2e 	bl	800ab80 <W25qxx_Spi>
 800ad24:	0003      	movs	r3, r0
 800ad26:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 800ad28:	4b09      	ldr	r3, [pc, #36]	; (800ad50 <W25qxx_ReadStatusRegister+0xac>)
 800ad2a:	197a      	adds	r2, r7, r5
 800ad2c:	2126      	movs	r1, #38	; 0x26
 800ad2e:	7812      	ldrb	r2, [r2, #0]
 800ad30:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ad32:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <W25qxx_ReadStatusRegister+0xa8>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	2101      	movs	r1, #1
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f7fa fd71 	bl	8005820 <HAL_GPIO_WritePin>
	return status;
 800ad3e:	230f      	movs	r3, #15
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	781b      	ldrb	r3, [r3, #0]
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	b004      	add	sp, #16
 800ad4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad4c:	50000400 	.word	0x50000400
 800ad50:	2000071c 	.word	0x2000071c

0800ad54 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800ad5a:	4b58      	ldr	r3, [pc, #352]	; (800aebc <W25qxx_Init+0x168>)
 800ad5c:	2227      	movs	r2, #39	; 0x27
 800ad5e:	2101      	movs	r1, #1
 800ad60:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 800ad62:	e002      	b.n	800ad6a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800ad64:	2001      	movs	r0, #1
 800ad66:	f7f8 fe9b 	bl	8003aa0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800ad6a:	f7f8 fe8f 	bl	8003a8c <HAL_GetTick>
 800ad6e:	0003      	movs	r3, r0
 800ad70:	2b63      	cmp	r3, #99	; 0x63
 800ad72:	d9f7      	bls.n	800ad64 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ad74:	4b52      	ldr	r3, [pc, #328]	; (800aec0 <W25qxx_Init+0x16c>)
 800ad76:	2201      	movs	r2, #1
 800ad78:	2101      	movs	r1, #1
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	f7fa fd50 	bl	8005820 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800ad80:	2064      	movs	r0, #100	; 0x64
 800ad82:	f7f8 fe8d 	bl	8003aa0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800ad86:	f7ff ff13 	bl	800abb0 <W25qxx_ReadID>
 800ad8a:	0003      	movs	r3, r0
 800ad8c:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	22ff      	movs	r2, #255	; 0xff
 800ad92:	4013      	ands	r3, r2
 800ad94:	3b11      	subs	r3, #17
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d84d      	bhi.n	800ae36 <W25qxx_Init+0xe2>
 800ad9a:	009a      	lsls	r2, r3, #2
 800ad9c:	4b49      	ldr	r3, [pc, #292]	; (800aec4 <W25qxx_Init+0x170>)
 800ad9e:	18d3      	adds	r3, r2, r3
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800ada4:	4b45      	ldr	r3, [pc, #276]	; (800aebc <W25qxx_Init+0x168>)
 800ada6:	220a      	movs	r2, #10
 800ada8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800adaa:	4b44      	ldr	r3, [pc, #272]	; (800aebc <W25qxx_Init+0x168>)
 800adac:	2280      	movs	r2, #128	; 0x80
 800adae:	00d2      	lsls	r2, r2, #3
 800adb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800adb2:	e046      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800adb4:	4b41      	ldr	r3, [pc, #260]	; (800aebc <W25qxx_Init+0x168>)
 800adb6:	2209      	movs	r2, #9
 800adb8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800adba:	4b40      	ldr	r3, [pc, #256]	; (800aebc <W25qxx_Init+0x168>)
 800adbc:	2280      	movs	r2, #128	; 0x80
 800adbe:	0092      	lsls	r2, r2, #2
 800adc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800adc2:	e03e      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800adc4:	4b3d      	ldr	r3, [pc, #244]	; (800aebc <W25qxx_Init+0x168>)
 800adc6:	2208      	movs	r2, #8
 800adc8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800adca:	4b3c      	ldr	r3, [pc, #240]	; (800aebc <W25qxx_Init+0x168>)
 800adcc:	2280      	movs	r2, #128	; 0x80
 800adce:	0052      	lsls	r2, r2, #1
 800add0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800add2:	e036      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800add4:	4b39      	ldr	r3, [pc, #228]	; (800aebc <W25qxx_Init+0x168>)
 800add6:	2207      	movs	r2, #7
 800add8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800adda:	4b38      	ldr	r3, [pc, #224]	; (800aebc <W25qxx_Init+0x168>)
 800addc:	2280      	movs	r2, #128	; 0x80
 800adde:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800ade0:	e02f      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800ade2:	4b36      	ldr	r3, [pc, #216]	; (800aebc <W25qxx_Init+0x168>)
 800ade4:	2206      	movs	r2, #6
 800ade6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800ade8:	4b34      	ldr	r3, [pc, #208]	; (800aebc <W25qxx_Init+0x168>)
 800adea:	2240      	movs	r2, #64	; 0x40
 800adec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800adee:	e028      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800adf0:	4b32      	ldr	r3, [pc, #200]	; (800aebc <W25qxx_Init+0x168>)
 800adf2:	2205      	movs	r2, #5
 800adf4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800adf6:	4b31      	ldr	r3, [pc, #196]	; (800aebc <W25qxx_Init+0x168>)
 800adf8:	2220      	movs	r2, #32
 800adfa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800adfc:	e021      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <W25qxx_Init+0x168>)
 800ae00:	2204      	movs	r2, #4
 800ae02:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800ae04:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <W25qxx_Init+0x168>)
 800ae06:	2210      	movs	r2, #16
 800ae08:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800ae0a:	e01a      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800ae0c:	4b2b      	ldr	r3, [pc, #172]	; (800aebc <W25qxx_Init+0x168>)
 800ae0e:	2203      	movs	r2, #3
 800ae10:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800ae12:	4b2a      	ldr	r3, [pc, #168]	; (800aebc <W25qxx_Init+0x168>)
 800ae14:	2208      	movs	r2, #8
 800ae16:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800ae18:	e013      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800ae1a:	4b28      	ldr	r3, [pc, #160]	; (800aebc <W25qxx_Init+0x168>)
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800ae20:	4b26      	ldr	r3, [pc, #152]	; (800aebc <W25qxx_Init+0x168>)
 800ae22:	2204      	movs	r2, #4
 800ae24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800ae26:	e00c      	b.n	800ae42 <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800ae28:	4b24      	ldr	r3, [pc, #144]	; (800aebc <W25qxx_Init+0x168>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800ae2e:	4b23      	ldr	r3, [pc, #140]	; (800aebc <W25qxx_Init+0x168>)
 800ae30:	2202      	movs	r2, #2
 800ae32:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800ae34:	e005      	b.n	800ae42 <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800ae36:	4b21      	ldr	r3, [pc, #132]	; (800aebc <W25qxx_Init+0x168>)
 800ae38:	2227      	movs	r2, #39	; 0x27
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	5499      	strb	r1, [r3, r2]
		return false;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e038      	b.n	800aeb4 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 800ae42:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <W25qxx_Init+0x168>)
 800ae44:	2280      	movs	r2, #128	; 0x80
 800ae46:	0052      	lsls	r2, r2, #1
 800ae48:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800ae4a:	4b1c      	ldr	r3, [pc, #112]	; (800aebc <W25qxx_Init+0x168>)
 800ae4c:	2280      	movs	r2, #128	; 0x80
 800ae4e:	0152      	lsls	r2, r2, #5
 800ae50:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800ae52:	4b1a      	ldr	r3, [pc, #104]	; (800aebc <W25qxx_Init+0x168>)
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	011a      	lsls	r2, r3, #4
 800ae58:	4b18      	ldr	r3, [pc, #96]	; (800aebc <W25qxx_Init+0x168>)
 800ae5a:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800ae5c:	4b17      	ldr	r3, [pc, #92]	; (800aebc <W25qxx_Init+0x168>)
 800ae5e:	695a      	ldr	r2, [r3, #20]
 800ae60:	4b16      	ldr	r3, [pc, #88]	; (800aebc <W25qxx_Init+0x168>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	435a      	muls	r2, r3
 800ae66:	4b15      	ldr	r3, [pc, #84]	; (800aebc <W25qxx_Init+0x168>)
 800ae68:	895b      	ldrh	r3, [r3, #10]
 800ae6a:	0019      	movs	r1, r3
 800ae6c:	0010      	movs	r0, r2
 800ae6e:	f7f5 f963 	bl	8000138 <__udivsi3>
 800ae72:	0003      	movs	r3, r0
 800ae74:	001a      	movs	r2, r3
 800ae76:	4b11      	ldr	r3, [pc, #68]	; (800aebc <W25qxx_Init+0x168>)
 800ae78:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800ae7a:	4b10      	ldr	r3, [pc, #64]	; (800aebc <W25qxx_Init+0x168>)
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	011a      	lsls	r2, r3, #4
 800ae80:	4b0e      	ldr	r3, [pc, #56]	; (800aebc <W25qxx_Init+0x168>)
 800ae82:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800ae84:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <W25qxx_Init+0x168>)
 800ae86:	695a      	ldr	r2, [r3, #20]
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <W25qxx_Init+0x168>)
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	4353      	muls	r3, r2
 800ae8e:	0a9a      	lsrs	r2, r3, #10
 800ae90:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <W25qxx_Init+0x168>)
 800ae92:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 800ae94:	f7ff fec4 	bl	800ac20 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f7ff ff03 	bl	800aca4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800ae9e:	2002      	movs	r0, #2
 800aea0:	f7ff ff00 	bl	800aca4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800aea4:	2003      	movs	r0, #3
 800aea6:	f7ff fefd 	bl	800aca4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800aeaa:	4b04      	ldr	r3, [pc, #16]	; (800aebc <W25qxx_Init+0x168>)
 800aeac:	2227      	movs	r2, #39	; 0x27
 800aeae:	2100      	movs	r1, #0
 800aeb0:	5499      	strb	r1, [r3, r2]
	return true;
 800aeb2:	2301      	movs	r3, #1
}
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	b002      	add	sp, #8
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	2000071c 	.word	0x2000071c
 800aec0:	50000400 	.word	0x50000400
 800aec4:	0800e020 	.word	0x0800e020

0800aec8 <__assert_func>:
 800aec8:	b530      	push	{r4, r5, lr}
 800aeca:	0014      	movs	r4, r2
 800aecc:	001a      	movs	r2, r3
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <__assert_func+0x2c>)
 800aed0:	0005      	movs	r5, r0
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	b085      	sub	sp, #20
 800aed6:	68d8      	ldr	r0, [r3, #12]
 800aed8:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <__assert_func+0x30>)
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d101      	bne.n	800aee2 <__assert_func+0x1a>
 800aede:	4b07      	ldr	r3, [pc, #28]	; (800aefc <__assert_func+0x34>)
 800aee0:	001c      	movs	r4, r3
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	9100      	str	r1, [sp, #0]
 800aee6:	002b      	movs	r3, r5
 800aee8:	4905      	ldr	r1, [pc, #20]	; (800af00 <__assert_func+0x38>)
 800aeea:	9402      	str	r4, [sp, #8]
 800aeec:	f000 f81a 	bl	800af24 <fiprintf>
 800aef0:	f001 f826 	bl	800bf40 <abort>
 800aef4:	20000094 	.word	0x20000094
 800aef8:	0800e060 	.word	0x0800e060
 800aefc:	0800e09b 	.word	0x0800e09b
 800af00:	0800e06d 	.word	0x0800e06d

0800af04 <calloc>:
 800af04:	b510      	push	{r4, lr}
 800af06:	4b03      	ldr	r3, [pc, #12]	; (800af14 <calloc+0x10>)
 800af08:	000a      	movs	r2, r1
 800af0a:	0001      	movs	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f000 f858 	bl	800afc2 <_calloc_r>
 800af12:	bd10      	pop	{r4, pc}
 800af14:	20000094 	.word	0x20000094

0800af18 <__errno>:
 800af18:	4b01      	ldr	r3, [pc, #4]	; (800af20 <__errno+0x8>)
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	4770      	bx	lr
 800af1e:	46c0      	nop			; (mov r8, r8)
 800af20:	20000094 	.word	0x20000094

0800af24 <fiprintf>:
 800af24:	b40e      	push	{r1, r2, r3}
 800af26:	b503      	push	{r0, r1, lr}
 800af28:	0001      	movs	r1, r0
 800af2a:	ab03      	add	r3, sp, #12
 800af2c:	4804      	ldr	r0, [pc, #16]	; (800af40 <fiprintf+0x1c>)
 800af2e:	cb04      	ldmia	r3!, {r2}
 800af30:	6800      	ldr	r0, [r0, #0]
 800af32:	9301      	str	r3, [sp, #4]
 800af34:	f000 f97c 	bl	800b230 <_vfiprintf_r>
 800af38:	b002      	add	sp, #8
 800af3a:	bc08      	pop	{r3}
 800af3c:	b003      	add	sp, #12
 800af3e:	4718      	bx	r3
 800af40:	20000094 	.word	0x20000094

0800af44 <__libc_init_array>:
 800af44:	b570      	push	{r4, r5, r6, lr}
 800af46:	2600      	movs	r6, #0
 800af48:	4d0c      	ldr	r5, [pc, #48]	; (800af7c <__libc_init_array+0x38>)
 800af4a:	4c0d      	ldr	r4, [pc, #52]	; (800af80 <__libc_init_array+0x3c>)
 800af4c:	1b64      	subs	r4, r4, r5
 800af4e:	10a4      	asrs	r4, r4, #2
 800af50:	42a6      	cmp	r6, r4
 800af52:	d109      	bne.n	800af68 <__libc_init_array+0x24>
 800af54:	2600      	movs	r6, #0
 800af56:	f002 fdc1 	bl	800dadc <_init>
 800af5a:	4d0a      	ldr	r5, [pc, #40]	; (800af84 <__libc_init_array+0x40>)
 800af5c:	4c0a      	ldr	r4, [pc, #40]	; (800af88 <__libc_init_array+0x44>)
 800af5e:	1b64      	subs	r4, r4, r5
 800af60:	10a4      	asrs	r4, r4, #2
 800af62:	42a6      	cmp	r6, r4
 800af64:	d105      	bne.n	800af72 <__libc_init_array+0x2e>
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	00b3      	lsls	r3, r6, #2
 800af6a:	58eb      	ldr	r3, [r5, r3]
 800af6c:	4798      	blx	r3
 800af6e:	3601      	adds	r6, #1
 800af70:	e7ee      	b.n	800af50 <__libc_init_array+0xc>
 800af72:	00b3      	lsls	r3, r6, #2
 800af74:	58eb      	ldr	r3, [r5, r3]
 800af76:	4798      	blx	r3
 800af78:	3601      	adds	r6, #1
 800af7a:	e7f2      	b.n	800af62 <__libc_init_array+0x1e>
 800af7c:	0800e440 	.word	0x0800e440
 800af80:	0800e440 	.word	0x0800e440
 800af84:	0800e440 	.word	0x0800e440
 800af88:	0800e444 	.word	0x0800e444

0800af8c <malloc>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	4b03      	ldr	r3, [pc, #12]	; (800af9c <malloc+0x10>)
 800af90:	0001      	movs	r1, r0
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	f000 f8ae 	bl	800b0f4 <_malloc_r>
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	46c0      	nop			; (mov r8, r8)
 800af9c:	20000094 	.word	0x20000094

0800afa0 <memcpy>:
 800afa0:	2300      	movs	r3, #0
 800afa2:	b510      	push	{r4, lr}
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d100      	bne.n	800afaa <memcpy+0xa>
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	5ccc      	ldrb	r4, [r1, r3]
 800afac:	54c4      	strb	r4, [r0, r3]
 800afae:	3301      	adds	r3, #1
 800afb0:	e7f8      	b.n	800afa4 <memcpy+0x4>

0800afb2 <memset>:
 800afb2:	0003      	movs	r3, r0
 800afb4:	1882      	adds	r2, r0, r2
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d100      	bne.n	800afbc <memset+0xa>
 800afba:	4770      	bx	lr
 800afbc:	7019      	strb	r1, [r3, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	e7f9      	b.n	800afb6 <memset+0x4>

0800afc2 <_calloc_r>:
 800afc2:	b570      	push	{r4, r5, r6, lr}
 800afc4:	0c13      	lsrs	r3, r2, #16
 800afc6:	0c0d      	lsrs	r5, r1, #16
 800afc8:	d11e      	bne.n	800b008 <_calloc_r+0x46>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10c      	bne.n	800afe8 <_calloc_r+0x26>
 800afce:	b289      	uxth	r1, r1
 800afd0:	b294      	uxth	r4, r2
 800afd2:	434c      	muls	r4, r1
 800afd4:	0021      	movs	r1, r4
 800afd6:	f000 f88d 	bl	800b0f4 <_malloc_r>
 800afda:	1e05      	subs	r5, r0, #0
 800afdc:	d01b      	beq.n	800b016 <_calloc_r+0x54>
 800afde:	0022      	movs	r2, r4
 800afe0:	2100      	movs	r1, #0
 800afe2:	f7ff ffe6 	bl	800afb2 <memset>
 800afe6:	e016      	b.n	800b016 <_calloc_r+0x54>
 800afe8:	1c1d      	adds	r5, r3, #0
 800afea:	1c0b      	adds	r3, r1, #0
 800afec:	b292      	uxth	r2, r2
 800afee:	b289      	uxth	r1, r1
 800aff0:	b29c      	uxth	r4, r3
 800aff2:	4351      	muls	r1, r2
 800aff4:	b2ab      	uxth	r3, r5
 800aff6:	4363      	muls	r3, r4
 800aff8:	0c0c      	lsrs	r4, r1, #16
 800affa:	191c      	adds	r4, r3, r4
 800affc:	0c22      	lsrs	r2, r4, #16
 800affe:	d107      	bne.n	800b010 <_calloc_r+0x4e>
 800b000:	0424      	lsls	r4, r4, #16
 800b002:	b289      	uxth	r1, r1
 800b004:	430c      	orrs	r4, r1
 800b006:	e7e5      	b.n	800afd4 <_calloc_r+0x12>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <_calloc_r+0x4e>
 800b00c:	1c13      	adds	r3, r2, #0
 800b00e:	e7ed      	b.n	800afec <_calloc_r+0x2a>
 800b010:	230c      	movs	r3, #12
 800b012:	2500      	movs	r5, #0
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	0028      	movs	r0, r5
 800b018:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b01c <_free_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	0005      	movs	r5, r0
 800b020:	2900      	cmp	r1, #0
 800b022:	d010      	beq.n	800b046 <_free_r+0x2a>
 800b024:	1f0c      	subs	r4, r1, #4
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da00      	bge.n	800b02e <_free_r+0x12>
 800b02c:	18e4      	adds	r4, r4, r3
 800b02e:	0028      	movs	r0, r5
 800b030:	f002 f880 	bl	800d134 <__malloc_lock>
 800b034:	4a1d      	ldr	r2, [pc, #116]	; (800b0ac <_free_r+0x90>)
 800b036:	6813      	ldr	r3, [r2, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d105      	bne.n	800b048 <_free_r+0x2c>
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	6014      	str	r4, [r2, #0]
 800b040:	0028      	movs	r0, r5
 800b042:	f002 f87f 	bl	800d144 <__malloc_unlock>
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	42a3      	cmp	r3, r4
 800b04a:	d908      	bls.n	800b05e <_free_r+0x42>
 800b04c:	6821      	ldr	r1, [r4, #0]
 800b04e:	1860      	adds	r0, r4, r1
 800b050:	4283      	cmp	r3, r0
 800b052:	d1f3      	bne.n	800b03c <_free_r+0x20>
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	1841      	adds	r1, r0, r1
 800b05a:	6021      	str	r1, [r4, #0]
 800b05c:	e7ee      	b.n	800b03c <_free_r+0x20>
 800b05e:	001a      	movs	r2, r3
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <_free_r+0x4e>
 800b066:	42a3      	cmp	r3, r4
 800b068:	d9f9      	bls.n	800b05e <_free_r+0x42>
 800b06a:	6811      	ldr	r1, [r2, #0]
 800b06c:	1850      	adds	r0, r2, r1
 800b06e:	42a0      	cmp	r0, r4
 800b070:	d10b      	bne.n	800b08a <_free_r+0x6e>
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	1809      	adds	r1, r1, r0
 800b076:	1850      	adds	r0, r2, r1
 800b078:	6011      	str	r1, [r2, #0]
 800b07a:	4283      	cmp	r3, r0
 800b07c:	d1e0      	bne.n	800b040 <_free_r+0x24>
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	1841      	adds	r1, r0, r1
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	6053      	str	r3, [r2, #4]
 800b088:	e7da      	b.n	800b040 <_free_r+0x24>
 800b08a:	42a0      	cmp	r0, r4
 800b08c:	d902      	bls.n	800b094 <_free_r+0x78>
 800b08e:	230c      	movs	r3, #12
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	e7d5      	b.n	800b040 <_free_r+0x24>
 800b094:	6821      	ldr	r1, [r4, #0]
 800b096:	1860      	adds	r0, r4, r1
 800b098:	4283      	cmp	r3, r0
 800b09a:	d103      	bne.n	800b0a4 <_free_r+0x88>
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	1841      	adds	r1, r0, r1
 800b0a2:	6021      	str	r1, [r4, #0]
 800b0a4:	6063      	str	r3, [r4, #4]
 800b0a6:	6054      	str	r4, [r2, #4]
 800b0a8:	e7ca      	b.n	800b040 <_free_r+0x24>
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	20000744 	.word	0x20000744

0800b0b0 <sbrk_aligned>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	4e0f      	ldr	r6, [pc, #60]	; (800b0f0 <sbrk_aligned+0x40>)
 800b0b4:	000d      	movs	r5, r1
 800b0b6:	6831      	ldr	r1, [r6, #0]
 800b0b8:	0004      	movs	r4, r0
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	d102      	bne.n	800b0c4 <sbrk_aligned+0x14>
 800b0be:	f000 fe5f 	bl	800bd80 <_sbrk_r>
 800b0c2:	6030      	str	r0, [r6, #0]
 800b0c4:	0029      	movs	r1, r5
 800b0c6:	0020      	movs	r0, r4
 800b0c8:	f000 fe5a 	bl	800bd80 <_sbrk_r>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d00a      	beq.n	800b0e6 <sbrk_aligned+0x36>
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	1cc5      	adds	r5, r0, #3
 800b0d4:	439d      	bics	r5, r3
 800b0d6:	42a8      	cmp	r0, r5
 800b0d8:	d007      	beq.n	800b0ea <sbrk_aligned+0x3a>
 800b0da:	1a29      	subs	r1, r5, r0
 800b0dc:	0020      	movs	r0, r4
 800b0de:	f000 fe4f 	bl	800bd80 <_sbrk_r>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	d101      	bne.n	800b0ea <sbrk_aligned+0x3a>
 800b0e6:	2501      	movs	r5, #1
 800b0e8:	426d      	negs	r5, r5
 800b0ea:	0028      	movs	r0, r5
 800b0ec:	bd70      	pop	{r4, r5, r6, pc}
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	20000748 	.word	0x20000748

0800b0f4 <_malloc_r>:
 800b0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	1ccb      	adds	r3, r1, #3
 800b0fa:	4393      	bics	r3, r2
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	0006      	movs	r6, r0
 800b100:	001f      	movs	r7, r3
 800b102:	2b0c      	cmp	r3, #12
 800b104:	d232      	bcs.n	800b16c <_malloc_r+0x78>
 800b106:	270c      	movs	r7, #12
 800b108:	42b9      	cmp	r1, r7
 800b10a:	d831      	bhi.n	800b170 <_malloc_r+0x7c>
 800b10c:	0030      	movs	r0, r6
 800b10e:	f002 f811 	bl	800d134 <__malloc_lock>
 800b112:	4d32      	ldr	r5, [pc, #200]	; (800b1dc <_malloc_r+0xe8>)
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	001c      	movs	r4, r3
 800b118:	2c00      	cmp	r4, #0
 800b11a:	d12e      	bne.n	800b17a <_malloc_r+0x86>
 800b11c:	0039      	movs	r1, r7
 800b11e:	0030      	movs	r0, r6
 800b120:	f7ff ffc6 	bl	800b0b0 <sbrk_aligned>
 800b124:	0004      	movs	r4, r0
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d11e      	bne.n	800b168 <_malloc_r+0x74>
 800b12a:	682c      	ldr	r4, [r5, #0]
 800b12c:	0025      	movs	r5, r4
 800b12e:	2d00      	cmp	r5, #0
 800b130:	d14a      	bne.n	800b1c8 <_malloc_r+0xd4>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	0029      	movs	r1, r5
 800b136:	18e3      	adds	r3, r4, r3
 800b138:	0030      	movs	r0, r6
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	f000 fe20 	bl	800bd80 <_sbrk_r>
 800b140:	9b01      	ldr	r3, [sp, #4]
 800b142:	4283      	cmp	r3, r0
 800b144:	d143      	bne.n	800b1ce <_malloc_r+0xda>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	3703      	adds	r7, #3
 800b14a:	1aff      	subs	r7, r7, r3
 800b14c:	2303      	movs	r3, #3
 800b14e:	439f      	bics	r7, r3
 800b150:	3708      	adds	r7, #8
 800b152:	2f0c      	cmp	r7, #12
 800b154:	d200      	bcs.n	800b158 <_malloc_r+0x64>
 800b156:	270c      	movs	r7, #12
 800b158:	0039      	movs	r1, r7
 800b15a:	0030      	movs	r0, r6
 800b15c:	f7ff ffa8 	bl	800b0b0 <sbrk_aligned>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d034      	beq.n	800b1ce <_malloc_r+0xda>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	19df      	adds	r7, r3, r7
 800b168:	6027      	str	r7, [r4, #0]
 800b16a:	e013      	b.n	800b194 <_malloc_r+0xa0>
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dacb      	bge.n	800b108 <_malloc_r+0x14>
 800b170:	230c      	movs	r3, #12
 800b172:	2500      	movs	r5, #0
 800b174:	6033      	str	r3, [r6, #0]
 800b176:	0028      	movs	r0, r5
 800b178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	1bd1      	subs	r1, r2, r7
 800b17e:	d420      	bmi.n	800b1c2 <_malloc_r+0xce>
 800b180:	290b      	cmp	r1, #11
 800b182:	d917      	bls.n	800b1b4 <_malloc_r+0xc0>
 800b184:	19e2      	adds	r2, r4, r7
 800b186:	6027      	str	r7, [r4, #0]
 800b188:	42a3      	cmp	r3, r4
 800b18a:	d111      	bne.n	800b1b0 <_malloc_r+0xbc>
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	6863      	ldr	r3, [r4, #4]
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	6053      	str	r3, [r2, #4]
 800b194:	0030      	movs	r0, r6
 800b196:	0025      	movs	r5, r4
 800b198:	f001 ffd4 	bl	800d144 <__malloc_unlock>
 800b19c:	2207      	movs	r2, #7
 800b19e:	350b      	adds	r5, #11
 800b1a0:	1d23      	adds	r3, r4, #4
 800b1a2:	4395      	bics	r5, r2
 800b1a4:	1aea      	subs	r2, r5, r3
 800b1a6:	429d      	cmp	r5, r3
 800b1a8:	d0e5      	beq.n	800b176 <_malloc_r+0x82>
 800b1aa:	1b5b      	subs	r3, r3, r5
 800b1ac:	50a3      	str	r3, [r4, r2]
 800b1ae:	e7e2      	b.n	800b176 <_malloc_r+0x82>
 800b1b0:	605a      	str	r2, [r3, #4]
 800b1b2:	e7ec      	b.n	800b18e <_malloc_r+0x9a>
 800b1b4:	6862      	ldr	r2, [r4, #4]
 800b1b6:	42a3      	cmp	r3, r4
 800b1b8:	d101      	bne.n	800b1be <_malloc_r+0xca>
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	e7ea      	b.n	800b194 <_malloc_r+0xa0>
 800b1be:	605a      	str	r2, [r3, #4]
 800b1c0:	e7e8      	b.n	800b194 <_malloc_r+0xa0>
 800b1c2:	0023      	movs	r3, r4
 800b1c4:	6864      	ldr	r4, [r4, #4]
 800b1c6:	e7a7      	b.n	800b118 <_malloc_r+0x24>
 800b1c8:	002c      	movs	r4, r5
 800b1ca:	686d      	ldr	r5, [r5, #4]
 800b1cc:	e7af      	b.n	800b12e <_malloc_r+0x3a>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	0030      	movs	r0, r6
 800b1d2:	6033      	str	r3, [r6, #0]
 800b1d4:	f001 ffb6 	bl	800d144 <__malloc_unlock>
 800b1d8:	e7cd      	b.n	800b176 <_malloc_r+0x82>
 800b1da:	46c0      	nop			; (mov r8, r8)
 800b1dc:	20000744 	.word	0x20000744

0800b1e0 <__sfputc_r>:
 800b1e0:	6893      	ldr	r3, [r2, #8]
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	6093      	str	r3, [r2, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da04      	bge.n	800b1f6 <__sfputc_r+0x16>
 800b1ec:	6994      	ldr	r4, [r2, #24]
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	db07      	blt.n	800b202 <__sfputc_r+0x22>
 800b1f2:	290a      	cmp	r1, #10
 800b1f4:	d005      	beq.n	800b202 <__sfputc_r+0x22>
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	1c58      	adds	r0, r3, #1
 800b1fa:	6010      	str	r0, [r2, #0]
 800b1fc:	7019      	strb	r1, [r3, #0]
 800b1fe:	0008      	movs	r0, r1
 800b200:	bd10      	pop	{r4, pc}
 800b202:	f000 fdcf 	bl	800bda4 <__swbuf_r>
 800b206:	0001      	movs	r1, r0
 800b208:	e7f9      	b.n	800b1fe <__sfputc_r+0x1e>

0800b20a <__sfputs_r>:
 800b20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20c:	0006      	movs	r6, r0
 800b20e:	000f      	movs	r7, r1
 800b210:	0014      	movs	r4, r2
 800b212:	18d5      	adds	r5, r2, r3
 800b214:	42ac      	cmp	r4, r5
 800b216:	d101      	bne.n	800b21c <__sfputs_r+0x12>
 800b218:	2000      	movs	r0, #0
 800b21a:	e007      	b.n	800b22c <__sfputs_r+0x22>
 800b21c:	7821      	ldrb	r1, [r4, #0]
 800b21e:	003a      	movs	r2, r7
 800b220:	0030      	movs	r0, r6
 800b222:	f7ff ffdd 	bl	800b1e0 <__sfputc_r>
 800b226:	3401      	adds	r4, #1
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d1f3      	bne.n	800b214 <__sfputs_r+0xa>
 800b22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b230 <_vfiprintf_r>:
 800b230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b232:	b0a1      	sub	sp, #132	; 0x84
 800b234:	0006      	movs	r6, r0
 800b236:	000c      	movs	r4, r1
 800b238:	001f      	movs	r7, r3
 800b23a:	9203      	str	r2, [sp, #12]
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d004      	beq.n	800b24a <_vfiprintf_r+0x1a>
 800b240:	6983      	ldr	r3, [r0, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <_vfiprintf_r+0x1a>
 800b246:	f001 fe55 	bl	800cef4 <__sinit>
 800b24a:	4b8e      	ldr	r3, [pc, #568]	; (800b484 <_vfiprintf_r+0x254>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	d11c      	bne.n	800b28a <_vfiprintf_r+0x5a>
 800b250:	6874      	ldr	r4, [r6, #4]
 800b252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b254:	07db      	lsls	r3, r3, #31
 800b256:	d405      	bmi.n	800b264 <_vfiprintf_r+0x34>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	059b      	lsls	r3, r3, #22
 800b25c:	d402      	bmi.n	800b264 <_vfiprintf_r+0x34>
 800b25e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b260:	f001 feed 	bl	800d03e <__retarget_lock_acquire_recursive>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	071b      	lsls	r3, r3, #28
 800b268:	d502      	bpl.n	800b270 <_vfiprintf_r+0x40>
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11d      	bne.n	800b2ac <_vfiprintf_r+0x7c>
 800b270:	0021      	movs	r1, r4
 800b272:	0030      	movs	r0, r6
 800b274:	f000 fdec 	bl	800be50 <__swsetup_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d017      	beq.n	800b2ac <_vfiprintf_r+0x7c>
 800b27c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b27e:	07db      	lsls	r3, r3, #31
 800b280:	d50d      	bpl.n	800b29e <_vfiprintf_r+0x6e>
 800b282:	2001      	movs	r0, #1
 800b284:	4240      	negs	r0, r0
 800b286:	b021      	add	sp, #132	; 0x84
 800b288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b28a:	4b7f      	ldr	r3, [pc, #508]	; (800b488 <_vfiprintf_r+0x258>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	d101      	bne.n	800b294 <_vfiprintf_r+0x64>
 800b290:	68b4      	ldr	r4, [r6, #8]
 800b292:	e7de      	b.n	800b252 <_vfiprintf_r+0x22>
 800b294:	4b7d      	ldr	r3, [pc, #500]	; (800b48c <_vfiprintf_r+0x25c>)
 800b296:	429c      	cmp	r4, r3
 800b298:	d1db      	bne.n	800b252 <_vfiprintf_r+0x22>
 800b29a:	68f4      	ldr	r4, [r6, #12]
 800b29c:	e7d9      	b.n	800b252 <_vfiprintf_r+0x22>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	059b      	lsls	r3, r3, #22
 800b2a2:	d4ee      	bmi.n	800b282 <_vfiprintf_r+0x52>
 800b2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a6:	f001 fecb 	bl	800d040 <__retarget_lock_release_recursive>
 800b2aa:	e7ea      	b.n	800b282 <_vfiprintf_r+0x52>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	ad08      	add	r5, sp, #32
 800b2b0:	616b      	str	r3, [r5, #20]
 800b2b2:	3320      	adds	r3, #32
 800b2b4:	766b      	strb	r3, [r5, #25]
 800b2b6:	3310      	adds	r3, #16
 800b2b8:	76ab      	strb	r3, [r5, #26]
 800b2ba:	9707      	str	r7, [sp, #28]
 800b2bc:	9f03      	ldr	r7, [sp, #12]
 800b2be:	783b      	ldrb	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <_vfiprintf_r+0x98>
 800b2c4:	2b25      	cmp	r3, #37	; 0x25
 800b2c6:	d14e      	bne.n	800b366 <_vfiprintf_r+0x136>
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	1afb      	subs	r3, r7, r3
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	429f      	cmp	r7, r3
 800b2d2:	d00d      	beq.n	800b2f0 <_vfiprintf_r+0xc0>
 800b2d4:	9b05      	ldr	r3, [sp, #20]
 800b2d6:	0021      	movs	r1, r4
 800b2d8:	0030      	movs	r0, r6
 800b2da:	9a03      	ldr	r2, [sp, #12]
 800b2dc:	f7ff ff95 	bl	800b20a <__sfputs_r>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d100      	bne.n	800b2e6 <_vfiprintf_r+0xb6>
 800b2e4:	e0b5      	b.n	800b452 <_vfiprintf_r+0x222>
 800b2e6:	696a      	ldr	r2, [r5, #20]
 800b2e8:	9b05      	ldr	r3, [sp, #20]
 800b2ea:	4694      	mov	ip, r2
 800b2ec:	4463      	add	r3, ip
 800b2ee:	616b      	str	r3, [r5, #20]
 800b2f0:	783b      	ldrb	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d100      	bne.n	800b2f8 <_vfiprintf_r+0xc8>
 800b2f6:	e0ac      	b.n	800b452 <_vfiprintf_r+0x222>
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	1c7b      	adds	r3, r7, #1
 800b2fc:	9303      	str	r3, [sp, #12]
 800b2fe:	2300      	movs	r3, #0
 800b300:	4252      	negs	r2, r2
 800b302:	606a      	str	r2, [r5, #4]
 800b304:	a904      	add	r1, sp, #16
 800b306:	3254      	adds	r2, #84	; 0x54
 800b308:	1852      	adds	r2, r2, r1
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	60eb      	str	r3, [r5, #12]
 800b30e:	60ab      	str	r3, [r5, #8]
 800b310:	7013      	strb	r3, [r2, #0]
 800b312:	65ab      	str	r3, [r5, #88]	; 0x58
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	2205      	movs	r2, #5
 800b318:	7819      	ldrb	r1, [r3, #0]
 800b31a:	485d      	ldr	r0, [pc, #372]	; (800b490 <_vfiprintf_r+0x260>)
 800b31c:	f001 fefe 	bl	800d11c <memchr>
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	1c5f      	adds	r7, r3, #1
 800b324:	2800      	cmp	r0, #0
 800b326:	d120      	bne.n	800b36a <_vfiprintf_r+0x13a>
 800b328:	682a      	ldr	r2, [r5, #0]
 800b32a:	06d3      	lsls	r3, r2, #27
 800b32c:	d504      	bpl.n	800b338 <_vfiprintf_r+0x108>
 800b32e:	2353      	movs	r3, #83	; 0x53
 800b330:	a904      	add	r1, sp, #16
 800b332:	185b      	adds	r3, r3, r1
 800b334:	2120      	movs	r1, #32
 800b336:	7019      	strb	r1, [r3, #0]
 800b338:	0713      	lsls	r3, r2, #28
 800b33a:	d504      	bpl.n	800b346 <_vfiprintf_r+0x116>
 800b33c:	2353      	movs	r3, #83	; 0x53
 800b33e:	a904      	add	r1, sp, #16
 800b340:	185b      	adds	r3, r3, r1
 800b342:	212b      	movs	r1, #43	; 0x2b
 800b344:	7019      	strb	r1, [r3, #0]
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b2a      	cmp	r3, #42	; 0x2a
 800b34c:	d016      	beq.n	800b37c <_vfiprintf_r+0x14c>
 800b34e:	2100      	movs	r1, #0
 800b350:	68eb      	ldr	r3, [r5, #12]
 800b352:	9f03      	ldr	r7, [sp, #12]
 800b354:	783a      	ldrb	r2, [r7, #0]
 800b356:	1c78      	adds	r0, r7, #1
 800b358:	3a30      	subs	r2, #48	; 0x30
 800b35a:	4684      	mov	ip, r0
 800b35c:	2a09      	cmp	r2, #9
 800b35e:	d94f      	bls.n	800b400 <_vfiprintf_r+0x1d0>
 800b360:	2900      	cmp	r1, #0
 800b362:	d111      	bne.n	800b388 <_vfiprintf_r+0x158>
 800b364:	e017      	b.n	800b396 <_vfiprintf_r+0x166>
 800b366:	3701      	adds	r7, #1
 800b368:	e7a9      	b.n	800b2be <_vfiprintf_r+0x8e>
 800b36a:	4b49      	ldr	r3, [pc, #292]	; (800b490 <_vfiprintf_r+0x260>)
 800b36c:	682a      	ldr	r2, [r5, #0]
 800b36e:	1ac0      	subs	r0, r0, r3
 800b370:	2301      	movs	r3, #1
 800b372:	4083      	lsls	r3, r0
 800b374:	4313      	orrs	r3, r2
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	9703      	str	r7, [sp, #12]
 800b37a:	e7cb      	b.n	800b314 <_vfiprintf_r+0xe4>
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	1d19      	adds	r1, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	9107      	str	r1, [sp, #28]
 800b384:	2b00      	cmp	r3, #0
 800b386:	db01      	blt.n	800b38c <_vfiprintf_r+0x15c>
 800b388:	930b      	str	r3, [sp, #44]	; 0x2c
 800b38a:	e004      	b.n	800b396 <_vfiprintf_r+0x166>
 800b38c:	425b      	negs	r3, r3
 800b38e:	60eb      	str	r3, [r5, #12]
 800b390:	2302      	movs	r3, #2
 800b392:	4313      	orrs	r3, r2
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	783b      	ldrb	r3, [r7, #0]
 800b398:	2b2e      	cmp	r3, #46	; 0x2e
 800b39a:	d10a      	bne.n	800b3b2 <_vfiprintf_r+0x182>
 800b39c:	787b      	ldrb	r3, [r7, #1]
 800b39e:	2b2a      	cmp	r3, #42	; 0x2a
 800b3a0:	d137      	bne.n	800b412 <_vfiprintf_r+0x1e2>
 800b3a2:	9b07      	ldr	r3, [sp, #28]
 800b3a4:	3702      	adds	r7, #2
 800b3a6:	1d1a      	adds	r2, r3, #4
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	9207      	str	r2, [sp, #28]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db2d      	blt.n	800b40c <_vfiprintf_r+0x1dc>
 800b3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	7839      	ldrb	r1, [r7, #0]
 800b3b6:	4837      	ldr	r0, [pc, #220]	; (800b494 <_vfiprintf_r+0x264>)
 800b3b8:	f001 feb0 	bl	800d11c <memchr>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d007      	beq.n	800b3d0 <_vfiprintf_r+0x1a0>
 800b3c0:	4b34      	ldr	r3, [pc, #208]	; (800b494 <_vfiprintf_r+0x264>)
 800b3c2:	682a      	ldr	r2, [r5, #0]
 800b3c4:	1ac0      	subs	r0, r0, r3
 800b3c6:	2340      	movs	r3, #64	; 0x40
 800b3c8:	4083      	lsls	r3, r0
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	3701      	adds	r7, #1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	7839      	ldrb	r1, [r7, #0]
 800b3d2:	1c7b      	adds	r3, r7, #1
 800b3d4:	2206      	movs	r2, #6
 800b3d6:	4830      	ldr	r0, [pc, #192]	; (800b498 <_vfiprintf_r+0x268>)
 800b3d8:	9303      	str	r3, [sp, #12]
 800b3da:	7629      	strb	r1, [r5, #24]
 800b3dc:	f001 fe9e 	bl	800d11c <memchr>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d045      	beq.n	800b470 <_vfiprintf_r+0x240>
 800b3e4:	4b2d      	ldr	r3, [pc, #180]	; (800b49c <_vfiprintf_r+0x26c>)
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d127      	bne.n	800b43a <_vfiprintf_r+0x20a>
 800b3ea:	2207      	movs	r2, #7
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	3307      	adds	r3, #7
 800b3f0:	4393      	bics	r3, r2
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	9307      	str	r3, [sp, #28]
 800b3f6:	696b      	ldr	r3, [r5, #20]
 800b3f8:	9a04      	ldr	r2, [sp, #16]
 800b3fa:	189b      	adds	r3, r3, r2
 800b3fc:	616b      	str	r3, [r5, #20]
 800b3fe:	e75d      	b.n	800b2bc <_vfiprintf_r+0x8c>
 800b400:	210a      	movs	r1, #10
 800b402:	434b      	muls	r3, r1
 800b404:	4667      	mov	r7, ip
 800b406:	189b      	adds	r3, r3, r2
 800b408:	3909      	subs	r1, #9
 800b40a:	e7a3      	b.n	800b354 <_vfiprintf_r+0x124>
 800b40c:	2301      	movs	r3, #1
 800b40e:	425b      	negs	r3, r3
 800b410:	e7ce      	b.n	800b3b0 <_vfiprintf_r+0x180>
 800b412:	2300      	movs	r3, #0
 800b414:	001a      	movs	r2, r3
 800b416:	3701      	adds	r7, #1
 800b418:	606b      	str	r3, [r5, #4]
 800b41a:	7839      	ldrb	r1, [r7, #0]
 800b41c:	1c78      	adds	r0, r7, #1
 800b41e:	3930      	subs	r1, #48	; 0x30
 800b420:	4684      	mov	ip, r0
 800b422:	2909      	cmp	r1, #9
 800b424:	d903      	bls.n	800b42e <_vfiprintf_r+0x1fe>
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0c3      	beq.n	800b3b2 <_vfiprintf_r+0x182>
 800b42a:	9209      	str	r2, [sp, #36]	; 0x24
 800b42c:	e7c1      	b.n	800b3b2 <_vfiprintf_r+0x182>
 800b42e:	230a      	movs	r3, #10
 800b430:	435a      	muls	r2, r3
 800b432:	4667      	mov	r7, ip
 800b434:	1852      	adds	r2, r2, r1
 800b436:	3b09      	subs	r3, #9
 800b438:	e7ef      	b.n	800b41a <_vfiprintf_r+0x1ea>
 800b43a:	ab07      	add	r3, sp, #28
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	0022      	movs	r2, r4
 800b440:	0029      	movs	r1, r5
 800b442:	0030      	movs	r0, r6
 800b444:	4b16      	ldr	r3, [pc, #88]	; (800b4a0 <_vfiprintf_r+0x270>)
 800b446:	f000 f8d7 	bl	800b5f8 <_printf_float>
 800b44a:	9004      	str	r0, [sp, #16]
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	3301      	adds	r3, #1
 800b450:	d1d1      	bne.n	800b3f6 <_vfiprintf_r+0x1c6>
 800b452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b454:	07db      	lsls	r3, r3, #31
 800b456:	d405      	bmi.n	800b464 <_vfiprintf_r+0x234>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	059b      	lsls	r3, r3, #22
 800b45c:	d402      	bmi.n	800b464 <_vfiprintf_r+0x234>
 800b45e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b460:	f001 fdee 	bl	800d040 <__retarget_lock_release_recursive>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	065b      	lsls	r3, r3, #25
 800b468:	d500      	bpl.n	800b46c <_vfiprintf_r+0x23c>
 800b46a:	e70a      	b.n	800b282 <_vfiprintf_r+0x52>
 800b46c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b46e:	e70a      	b.n	800b286 <_vfiprintf_r+0x56>
 800b470:	ab07      	add	r3, sp, #28
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	0022      	movs	r2, r4
 800b476:	0029      	movs	r1, r5
 800b478:	0030      	movs	r0, r6
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <_vfiprintf_r+0x270>)
 800b47c:	f000 fb6e 	bl	800bb5c <_printf_i>
 800b480:	e7e3      	b.n	800b44a <_vfiprintf_r+0x21a>
 800b482:	46c0      	nop			; (mov r8, r8)
 800b484:	0800e298 	.word	0x0800e298
 800b488:	0800e2b8 	.word	0x0800e2b8
 800b48c:	0800e278 	.word	0x0800e278
 800b490:	0800e0a0 	.word	0x0800e0a0
 800b494:	0800e0a6 	.word	0x0800e0a6
 800b498:	0800e0aa 	.word	0x0800e0aa
 800b49c:	0800b5f9 	.word	0x0800b5f9
 800b4a0:	0800b20b 	.word	0x0800b20b

0800b4a4 <__cvt>:
 800b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a6:	001e      	movs	r6, r3
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	0014      	movs	r4, r2
 800b4ac:	b08b      	sub	sp, #44	; 0x2c
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	da04      	bge.n	800b4bc <__cvt+0x18>
 800b4b2:	2180      	movs	r1, #128	; 0x80
 800b4b4:	0609      	lsls	r1, r1, #24
 800b4b6:	1873      	adds	r3, r6, r1
 800b4b8:	001e      	movs	r6, r3
 800b4ba:	232d      	movs	r3, #45	; 0x2d
 800b4bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b4c0:	7013      	strb	r3, [r2, #0]
 800b4c2:	2320      	movs	r3, #32
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	439f      	bics	r7, r3
 800b4c8:	2f46      	cmp	r7, #70	; 0x46
 800b4ca:	d007      	beq.n	800b4dc <__cvt+0x38>
 800b4cc:	003b      	movs	r3, r7
 800b4ce:	3b45      	subs	r3, #69	; 0x45
 800b4d0:	4259      	negs	r1, r3
 800b4d2:	414b      	adcs	r3, r1
 800b4d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	18cb      	adds	r3, r1, r3
 800b4da:	9310      	str	r3, [sp, #64]	; 0x40
 800b4dc:	ab09      	add	r3, sp, #36	; 0x24
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	ab08      	add	r3, sp, #32
 800b4e2:	9303      	str	r3, [sp, #12]
 800b4e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4e6:	9200      	str	r2, [sp, #0]
 800b4e8:	9302      	str	r3, [sp, #8]
 800b4ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ec:	0022      	movs	r2, r4
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	0033      	movs	r3, r6
 800b4f2:	f000 fdb7 	bl	800c064 <_dtoa_r>
 800b4f6:	0005      	movs	r5, r0
 800b4f8:	2f47      	cmp	r7, #71	; 0x47
 800b4fa:	d102      	bne.n	800b502 <__cvt+0x5e>
 800b4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4fe:	07db      	lsls	r3, r3, #31
 800b500:	d528      	bpl.n	800b554 <__cvt+0xb0>
 800b502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b504:	18eb      	adds	r3, r5, r3
 800b506:	9307      	str	r3, [sp, #28]
 800b508:	2f46      	cmp	r7, #70	; 0x46
 800b50a:	d114      	bne.n	800b536 <__cvt+0x92>
 800b50c:	782b      	ldrb	r3, [r5, #0]
 800b50e:	2b30      	cmp	r3, #48	; 0x30
 800b510:	d10c      	bne.n	800b52c <__cvt+0x88>
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	0020      	movs	r0, r4
 800b518:	0031      	movs	r1, r6
 800b51a:	f7f4 ff93 	bl	8000444 <__aeabi_dcmpeq>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d104      	bne.n	800b52c <__cvt+0x88>
 800b522:	2301      	movs	r3, #1
 800b524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b52e:	9a07      	ldr	r2, [sp, #28]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	18d3      	adds	r3, r2, r3
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	2200      	movs	r2, #0
 800b538:	2300      	movs	r3, #0
 800b53a:	0020      	movs	r0, r4
 800b53c:	0031      	movs	r1, r6
 800b53e:	f7f4 ff81 	bl	8000444 <__aeabi_dcmpeq>
 800b542:	2800      	cmp	r0, #0
 800b544:	d001      	beq.n	800b54a <__cvt+0xa6>
 800b546:	9b07      	ldr	r3, [sp, #28]
 800b548:	9309      	str	r3, [sp, #36]	; 0x24
 800b54a:	2230      	movs	r2, #48	; 0x30
 800b54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54e:	9907      	ldr	r1, [sp, #28]
 800b550:	428b      	cmp	r3, r1
 800b552:	d306      	bcc.n	800b562 <__cvt+0xbe>
 800b554:	0028      	movs	r0, r5
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b55a:	1b5b      	subs	r3, r3, r5
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	b00b      	add	sp, #44	; 0x2c
 800b560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b562:	1c59      	adds	r1, r3, #1
 800b564:	9109      	str	r1, [sp, #36]	; 0x24
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	e7f0      	b.n	800b54c <__cvt+0xa8>

0800b56a <__exponent>:
 800b56a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b56c:	1c83      	adds	r3, r0, #2
 800b56e:	b087      	sub	sp, #28
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	0005      	movs	r5, r0
 800b574:	000c      	movs	r4, r1
 800b576:	232b      	movs	r3, #43	; 0x2b
 800b578:	7002      	strb	r2, [r0, #0]
 800b57a:	2900      	cmp	r1, #0
 800b57c:	da01      	bge.n	800b582 <__exponent+0x18>
 800b57e:	424c      	negs	r4, r1
 800b580:	3302      	adds	r3, #2
 800b582:	706b      	strb	r3, [r5, #1]
 800b584:	2c09      	cmp	r4, #9
 800b586:	dd31      	ble.n	800b5ec <__exponent+0x82>
 800b588:	270a      	movs	r7, #10
 800b58a:	ab04      	add	r3, sp, #16
 800b58c:	1dde      	adds	r6, r3, #7
 800b58e:	0020      	movs	r0, r4
 800b590:	0039      	movs	r1, r7
 800b592:	9601      	str	r6, [sp, #4]
 800b594:	f7f4 ff40 	bl	8000418 <__aeabi_idivmod>
 800b598:	3e01      	subs	r6, #1
 800b59a:	3130      	adds	r1, #48	; 0x30
 800b59c:	0020      	movs	r0, r4
 800b59e:	7031      	strb	r1, [r6, #0]
 800b5a0:	0039      	movs	r1, r7
 800b5a2:	9402      	str	r4, [sp, #8]
 800b5a4:	f7f4 fe52 	bl	800024c <__divsi3>
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	0004      	movs	r4, r0
 800b5ac:	2b63      	cmp	r3, #99	; 0x63
 800b5ae:	dcee      	bgt.n	800b58e <__exponent+0x24>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	3430      	adds	r4, #48	; 0x30
 800b5b4:	1e9a      	subs	r2, r3, #2
 800b5b6:	0013      	movs	r3, r2
 800b5b8:	9903      	ldr	r1, [sp, #12]
 800b5ba:	7014      	strb	r4, [r2, #0]
 800b5bc:	a804      	add	r0, sp, #16
 800b5be:	3007      	adds	r0, #7
 800b5c0:	4298      	cmp	r0, r3
 800b5c2:	d80e      	bhi.n	800b5e2 <__exponent+0x78>
 800b5c4:	ab04      	add	r3, sp, #16
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d804      	bhi.n	800b5d8 <__exponent+0x6e>
 800b5ce:	ab04      	add	r3, sp, #16
 800b5d0:	3009      	adds	r0, #9
 800b5d2:	18c0      	adds	r0, r0, r3
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	1ac0      	subs	r0, r0, r3
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	1818      	adds	r0, r3, r0
 800b5dc:	1b40      	subs	r0, r0, r5
 800b5de:	b007      	add	sp, #28
 800b5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e2:	7818      	ldrb	r0, [r3, #0]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	7008      	strb	r0, [r1, #0]
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	e7e7      	b.n	800b5bc <__exponent+0x52>
 800b5ec:	2330      	movs	r3, #48	; 0x30
 800b5ee:	18e4      	adds	r4, r4, r3
 800b5f0:	70ab      	strb	r3, [r5, #2]
 800b5f2:	1d28      	adds	r0, r5, #4
 800b5f4:	70ec      	strb	r4, [r5, #3]
 800b5f6:	e7f1      	b.n	800b5dc <__exponent+0x72>

0800b5f8 <_printf_float>:
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	b095      	sub	sp, #84	; 0x54
 800b5fc:	000c      	movs	r4, r1
 800b5fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b600:	001e      	movs	r6, r3
 800b602:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b604:	0007      	movs	r7, r0
 800b606:	f001 fd15 	bl	800d034 <_localeconv_r>
 800b60a:	6803      	ldr	r3, [r0, #0]
 800b60c:	0018      	movs	r0, r3
 800b60e:	930c      	str	r3, [sp, #48]	; 0x30
 800b610:	f7f4 fd76 	bl	8000100 <strlen>
 800b614:	2300      	movs	r3, #0
 800b616:	9312      	str	r3, [sp, #72]	; 0x48
 800b618:	7e23      	ldrb	r3, [r4, #24]
 800b61a:	2207      	movs	r2, #7
 800b61c:	930a      	str	r3, [sp, #40]	; 0x28
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	900e      	str	r0, [sp, #56]	; 0x38
 800b622:	930d      	str	r3, [sp, #52]	; 0x34
 800b624:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	05c9      	lsls	r1, r1, #23
 800b62a:	d547      	bpl.n	800b6bc <_printf_float+0xc4>
 800b62c:	189b      	adds	r3, r3, r2
 800b62e:	4393      	bics	r3, r2
 800b630:	001a      	movs	r2, r3
 800b632:	3208      	adds	r2, #8
 800b634:	602a      	str	r2, [r5, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	64a2      	str	r2, [r4, #72]	; 0x48
 800b63c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b63e:	2201      	movs	r2, #1
 800b640:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b642:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b644:	930b      	str	r3, [sp, #44]	; 0x2c
 800b646:	006b      	lsls	r3, r5, #1
 800b648:	085b      	lsrs	r3, r3, #1
 800b64a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b64c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b64e:	4ba7      	ldr	r3, [pc, #668]	; (800b8ec <_printf_float+0x2f4>)
 800b650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b652:	4252      	negs	r2, r2
 800b654:	f7f6 fc60 	bl	8001f18 <__aeabi_dcmpun>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d131      	bne.n	800b6c0 <_printf_float+0xc8>
 800b65c:	2201      	movs	r2, #1
 800b65e:	4ba3      	ldr	r3, [pc, #652]	; (800b8ec <_printf_float+0x2f4>)
 800b660:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b662:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b664:	4252      	negs	r2, r2
 800b666:	f7f4 fefd 	bl	8000464 <__aeabi_dcmple>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d128      	bne.n	800b6c0 <_printf_float+0xc8>
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	0029      	movs	r1, r5
 800b674:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b676:	f7f4 feeb 	bl	8000450 <__aeabi_dcmplt>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d003      	beq.n	800b686 <_printf_float+0x8e>
 800b67e:	0023      	movs	r3, r4
 800b680:	222d      	movs	r2, #45	; 0x2d
 800b682:	3343      	adds	r3, #67	; 0x43
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b688:	4d99      	ldr	r5, [pc, #612]	; (800b8f0 <_printf_float+0x2f8>)
 800b68a:	2b47      	cmp	r3, #71	; 0x47
 800b68c:	d900      	bls.n	800b690 <_printf_float+0x98>
 800b68e:	4d99      	ldr	r5, [pc, #612]	; (800b8f4 <_printf_float+0x2fc>)
 800b690:	2303      	movs	r3, #3
 800b692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	3301      	adds	r3, #1
 800b698:	439a      	bics	r2, r3
 800b69a:	2300      	movs	r3, #0
 800b69c:	6022      	str	r2, [r4, #0]
 800b69e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a2:	0021      	movs	r1, r4
 800b6a4:	0038      	movs	r0, r7
 800b6a6:	9600      	str	r6, [sp, #0]
 800b6a8:	aa13      	add	r2, sp, #76	; 0x4c
 800b6aa:	f000 f9e7 	bl	800ba7c <_printf_common>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d000      	beq.n	800b6b4 <_printf_float+0xbc>
 800b6b2:	e0a2      	b.n	800b7fa <_printf_float+0x202>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	4240      	negs	r0, r0
 800b6b8:	b015      	add	sp, #84	; 0x54
 800b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6bc:	3307      	adds	r3, #7
 800b6be:	e7b6      	b.n	800b62e <_printf_float+0x36>
 800b6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6c2:	002b      	movs	r3, r5
 800b6c4:	0010      	movs	r0, r2
 800b6c6:	0029      	movs	r1, r5
 800b6c8:	f7f6 fc26 	bl	8001f18 <__aeabi_dcmpun>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d00b      	beq.n	800b6e8 <_printf_float+0xf0>
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	da03      	bge.n	800b6dc <_printf_float+0xe4>
 800b6d4:	0023      	movs	r3, r4
 800b6d6:	222d      	movs	r2, #45	; 0x2d
 800b6d8:	3343      	adds	r3, #67	; 0x43
 800b6da:	701a      	strb	r2, [r3, #0]
 800b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6de:	4d86      	ldr	r5, [pc, #536]	; (800b8f8 <_printf_float+0x300>)
 800b6e0:	2b47      	cmp	r3, #71	; 0x47
 800b6e2:	d9d5      	bls.n	800b690 <_printf_float+0x98>
 800b6e4:	4d85      	ldr	r5, [pc, #532]	; (800b8fc <_printf_float+0x304>)
 800b6e6:	e7d3      	b.n	800b690 <_printf_float+0x98>
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	4391      	bics	r1, r2
 800b6f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	d149      	bne.n	800b78a <_printf_float+0x192>
 800b6f6:	3307      	adds	r3, #7
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	2380      	movs	r3, #128	; 0x80
 800b6fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	4313      	orrs	r3, r2
 800b702:	2200      	movs	r2, #0
 800b704:	9206      	str	r2, [sp, #24]
 800b706:	aa12      	add	r2, sp, #72	; 0x48
 800b708:	9205      	str	r2, [sp, #20]
 800b70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b70c:	a908      	add	r1, sp, #32
 800b70e:	9204      	str	r2, [sp, #16]
 800b710:	aa11      	add	r2, sp, #68	; 0x44
 800b712:	9203      	str	r2, [sp, #12]
 800b714:	2223      	movs	r2, #35	; 0x23
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	6863      	ldr	r3, [r4, #4]
 800b71c:	1852      	adds	r2, r2, r1
 800b71e:	9202      	str	r2, [sp, #8]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	0038      	movs	r0, r7
 800b724:	002b      	movs	r3, r5
 800b726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b728:	f7ff febc 	bl	800b4a4 <__cvt>
 800b72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b72e:	0005      	movs	r5, r0
 800b730:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b732:	2b47      	cmp	r3, #71	; 0x47
 800b734:	d108      	bne.n	800b748 <_printf_float+0x150>
 800b736:	1ccb      	adds	r3, r1, #3
 800b738:	db02      	blt.n	800b740 <_printf_float+0x148>
 800b73a:	6863      	ldr	r3, [r4, #4]
 800b73c:	4299      	cmp	r1, r3
 800b73e:	dd48      	ble.n	800b7d2 <_printf_float+0x1da>
 800b740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b742:	3b02      	subs	r3, #2
 800b744:	b2db      	uxtb	r3, r3
 800b746:	930a      	str	r3, [sp, #40]	; 0x28
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	2b65      	cmp	r3, #101	; 0x65
 800b74c:	d824      	bhi.n	800b798 <_printf_float+0x1a0>
 800b74e:	0020      	movs	r0, r4
 800b750:	001a      	movs	r2, r3
 800b752:	3901      	subs	r1, #1
 800b754:	3050      	adds	r0, #80	; 0x50
 800b756:	9111      	str	r1, [sp, #68]	; 0x44
 800b758:	f7ff ff07 	bl	800b56a <__exponent>
 800b75c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b75e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b760:	1813      	adds	r3, r2, r0
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	2a01      	cmp	r2, #1
 800b766:	dc02      	bgt.n	800b76e <_printf_float+0x176>
 800b768:	6822      	ldr	r2, [r4, #0]
 800b76a:	07d2      	lsls	r2, r2, #31
 800b76c:	d501      	bpl.n	800b772 <_printf_float+0x17a>
 800b76e:	3301      	adds	r3, #1
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	2323      	movs	r3, #35	; 0x23
 800b774:	aa08      	add	r2, sp, #32
 800b776:	189b      	adds	r3, r3, r2
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d100      	bne.n	800b780 <_printf_float+0x188>
 800b77e:	e78f      	b.n	800b6a0 <_printf_float+0xa8>
 800b780:	0023      	movs	r3, r4
 800b782:	222d      	movs	r2, #45	; 0x2d
 800b784:	3343      	adds	r3, #67	; 0x43
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	e78a      	b.n	800b6a0 <_printf_float+0xa8>
 800b78a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b78c:	2a47      	cmp	r2, #71	; 0x47
 800b78e:	d1b4      	bne.n	800b6fa <_printf_float+0x102>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1b2      	bne.n	800b6fa <_printf_float+0x102>
 800b794:	3301      	adds	r3, #1
 800b796:	e7af      	b.n	800b6f8 <_printf_float+0x100>
 800b798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b79a:	2b66      	cmp	r3, #102	; 0x66
 800b79c:	d11b      	bne.n	800b7d6 <_printf_float+0x1de>
 800b79e:	6863      	ldr	r3, [r4, #4]
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	dd0d      	ble.n	800b7c0 <_printf_float+0x1c8>
 800b7a4:	6121      	str	r1, [r4, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <_printf_float+0x1b8>
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	07d2      	lsls	r2, r2, #31
 800b7ae:	d502      	bpl.n	800b7b6 <_printf_float+0x1be>
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	1859      	adds	r1, r3, r1
 800b7b4:	6121      	str	r1, [r4, #16]
 800b7b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7b8:	65a3      	str	r3, [r4, #88]	; 0x58
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7be:	e7d8      	b.n	800b772 <_printf_float+0x17a>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <_printf_float+0x1d4>
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	4211      	tst	r1, r2
 800b7ca:	d000      	beq.n	800b7ce <_printf_float+0x1d6>
 800b7cc:	1c9a      	adds	r2, r3, #2
 800b7ce:	6122      	str	r2, [r4, #16]
 800b7d0:	e7f1      	b.n	800b7b6 <_printf_float+0x1be>
 800b7d2:	2367      	movs	r3, #103	; 0x67
 800b7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	db06      	blt.n	800b7ec <_printf_float+0x1f4>
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	07d2      	lsls	r2, r2, #31
 800b7e4:	d5e7      	bpl.n	800b7b6 <_printf_float+0x1be>
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	e7e4      	b.n	800b7b6 <_printf_float+0x1be>
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	dc01      	bgt.n	800b7f6 <_printf_float+0x1fe>
 800b7f2:	1849      	adds	r1, r1, r1
 800b7f4:	1ac9      	subs	r1, r1, r3
 800b7f6:	1852      	adds	r2, r2, r1
 800b7f8:	e7e9      	b.n	800b7ce <_printf_float+0x1d6>
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	0553      	lsls	r3, r2, #21
 800b7fe:	d407      	bmi.n	800b810 <_printf_float+0x218>
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	002a      	movs	r2, r5
 800b804:	0038      	movs	r0, r7
 800b806:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b808:	47b0      	blx	r6
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d128      	bne.n	800b860 <_printf_float+0x268>
 800b80e:	e751      	b.n	800b6b4 <_printf_float+0xbc>
 800b810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b812:	2b65      	cmp	r3, #101	; 0x65
 800b814:	d800      	bhi.n	800b818 <_printf_float+0x220>
 800b816:	e0e1      	b.n	800b9dc <_printf_float+0x3e4>
 800b818:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b81a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	f7f4 fe10 	bl	8000444 <__aeabi_dcmpeq>
 800b824:	2800      	cmp	r0, #0
 800b826:	d031      	beq.n	800b88c <_printf_float+0x294>
 800b828:	2301      	movs	r3, #1
 800b82a:	0038      	movs	r0, r7
 800b82c:	4a34      	ldr	r2, [pc, #208]	; (800b900 <_printf_float+0x308>)
 800b82e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b830:	47b0      	blx	r6
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	d100      	bne.n	800b838 <_printf_float+0x240>
 800b836:	e73d      	b.n	800b6b4 <_printf_float+0xbc>
 800b838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b83a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b83c:	4293      	cmp	r3, r2
 800b83e:	db02      	blt.n	800b846 <_printf_float+0x24e>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	07db      	lsls	r3, r3, #31
 800b844:	d50c      	bpl.n	800b860 <_printf_float+0x268>
 800b846:	0038      	movs	r0, r7
 800b848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b84c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b84e:	47b0      	blx	r6
 800b850:	2500      	movs	r5, #0
 800b852:	1c43      	adds	r3, r0, #1
 800b854:	d100      	bne.n	800b858 <_printf_float+0x260>
 800b856:	e72d      	b.n	800b6b4 <_printf_float+0xbc>
 800b858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b85a:	3b01      	subs	r3, #1
 800b85c:	42ab      	cmp	r3, r5
 800b85e:	dc0a      	bgt.n	800b876 <_printf_float+0x27e>
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	079b      	lsls	r3, r3, #30
 800b864:	d500      	bpl.n	800b868 <_printf_float+0x270>
 800b866:	e106      	b.n	800ba76 <_printf_float+0x47e>
 800b868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b86a:	68e0      	ldr	r0, [r4, #12]
 800b86c:	4298      	cmp	r0, r3
 800b86e:	db00      	blt.n	800b872 <_printf_float+0x27a>
 800b870:	e722      	b.n	800b6b8 <_printf_float+0xc0>
 800b872:	0018      	movs	r0, r3
 800b874:	e720      	b.n	800b6b8 <_printf_float+0xc0>
 800b876:	0022      	movs	r2, r4
 800b878:	2301      	movs	r3, #1
 800b87a:	0038      	movs	r0, r7
 800b87c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b87e:	321a      	adds	r2, #26
 800b880:	47b0      	blx	r6
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d100      	bne.n	800b888 <_printf_float+0x290>
 800b886:	e715      	b.n	800b6b4 <_printf_float+0xbc>
 800b888:	3501      	adds	r5, #1
 800b88a:	e7e5      	b.n	800b858 <_printf_float+0x260>
 800b88c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b88e:	2b00      	cmp	r3, #0
 800b890:	dc38      	bgt.n	800b904 <_printf_float+0x30c>
 800b892:	2301      	movs	r3, #1
 800b894:	0038      	movs	r0, r7
 800b896:	4a1a      	ldr	r2, [pc, #104]	; (800b900 <_printf_float+0x308>)
 800b898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b89a:	47b0      	blx	r6
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d100      	bne.n	800b8a2 <_printf_float+0x2aa>
 800b8a0:	e708      	b.n	800b6b4 <_printf_float+0xbc>
 800b8a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	d102      	bne.n	800b8b0 <_printf_float+0x2b8>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	07db      	lsls	r3, r3, #31
 800b8ae:	d5d7      	bpl.n	800b860 <_printf_float+0x268>
 800b8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8b2:	0038      	movs	r0, r7
 800b8b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8b8:	47b0      	blx	r6
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d100      	bne.n	800b8c0 <_printf_float+0x2c8>
 800b8be:	e6f9      	b.n	800b6b4 <_printf_float+0xbc>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8c8:	425b      	negs	r3, r3
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	dc01      	bgt.n	800b8d2 <_printf_float+0x2da>
 800b8ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8d0:	e797      	b.n	800b802 <_printf_float+0x20a>
 800b8d2:	0022      	movs	r2, r4
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	0038      	movs	r0, r7
 800b8d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8da:	321a      	adds	r2, #26
 800b8dc:	47b0      	blx	r6
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d100      	bne.n	800b8e4 <_printf_float+0x2ec>
 800b8e2:	e6e7      	b.n	800b6b4 <_printf_float+0xbc>
 800b8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	e7eb      	b.n	800b8c2 <_printf_float+0x2ca>
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	7fefffff 	.word	0x7fefffff
 800b8f0:	0800e0b1 	.word	0x0800e0b1
 800b8f4:	0800e0b5 	.word	0x0800e0b5
 800b8f8:	0800e0b9 	.word	0x0800e0b9
 800b8fc:	0800e0bd 	.word	0x0800e0bd
 800b900:	0800e0c1 	.word	0x0800e0c1
 800b904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b908:	920a      	str	r2, [sp, #40]	; 0x28
 800b90a:	429a      	cmp	r2, r3
 800b90c:	dd00      	ble.n	800b910 <_printf_float+0x318>
 800b90e:	930a      	str	r3, [sp, #40]	; 0x28
 800b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	dc3c      	bgt.n	800b990 <_printf_float+0x398>
 800b916:	2300      	movs	r3, #0
 800b918:	930d      	str	r3, [sp, #52]	; 0x34
 800b91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91c:	43db      	mvns	r3, r3
 800b91e:	17db      	asrs	r3, r3, #31
 800b920:	930f      	str	r3, [sp, #60]	; 0x3c
 800b922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b926:	930b      	str	r3, [sp, #44]	; 0x2c
 800b928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b92a:	4013      	ands	r3, r2
 800b92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b932:	4293      	cmp	r3, r2
 800b934:	dc34      	bgt.n	800b9a0 <_printf_float+0x3a8>
 800b936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b93a:	4293      	cmp	r3, r2
 800b93c:	db3d      	blt.n	800b9ba <_printf_float+0x3c2>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	07db      	lsls	r3, r3, #31
 800b942:	d43a      	bmi.n	800b9ba <_printf_float+0x3c2>
 800b944:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b948:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	1a52      	subs	r2, r2, r1
 800b94e:	920a      	str	r2, [sp, #40]	; 0x28
 800b950:	429a      	cmp	r2, r3
 800b952:	dd00      	ble.n	800b956 <_printf_float+0x35e>
 800b954:	930a      	str	r3, [sp, #40]	; 0x28
 800b956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dc36      	bgt.n	800b9ca <_printf_float+0x3d2>
 800b95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b95e:	2500      	movs	r5, #0
 800b960:	43db      	mvns	r3, r3
 800b962:	17db      	asrs	r3, r3, #31
 800b964:	930b      	str	r3, [sp, #44]	; 0x2c
 800b966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b96a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b96c:	1a9b      	subs	r3, r3, r2
 800b96e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b970:	400a      	ands	r2, r1
 800b972:	1a9b      	subs	r3, r3, r2
 800b974:	42ab      	cmp	r3, r5
 800b976:	dc00      	bgt.n	800b97a <_printf_float+0x382>
 800b978:	e772      	b.n	800b860 <_printf_float+0x268>
 800b97a:	0022      	movs	r2, r4
 800b97c:	2301      	movs	r3, #1
 800b97e:	0038      	movs	r0, r7
 800b980:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b982:	321a      	adds	r2, #26
 800b984:	47b0      	blx	r6
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d100      	bne.n	800b98c <_printf_float+0x394>
 800b98a:	e693      	b.n	800b6b4 <_printf_float+0xbc>
 800b98c:	3501      	adds	r5, #1
 800b98e:	e7ea      	b.n	800b966 <_printf_float+0x36e>
 800b990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b992:	002a      	movs	r2, r5
 800b994:	0038      	movs	r0, r7
 800b996:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b998:	47b0      	blx	r6
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	d1bb      	bne.n	800b916 <_printf_float+0x31e>
 800b99e:	e689      	b.n	800b6b4 <_printf_float+0xbc>
 800b9a0:	0022      	movs	r2, r4
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	0038      	movs	r0, r7
 800b9a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9a8:	321a      	adds	r2, #26
 800b9aa:	47b0      	blx	r6
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d100      	bne.n	800b9b2 <_printf_float+0x3ba>
 800b9b0:	e680      	b.n	800b6b4 <_printf_float+0xbc>
 800b9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b9b8:	e7b3      	b.n	800b922 <_printf_float+0x32a>
 800b9ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9bc:	0038      	movs	r0, r7
 800b9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9c2:	47b0      	blx	r6
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d1bd      	bne.n	800b944 <_printf_float+0x34c>
 800b9c8:	e674      	b.n	800b6b4 <_printf_float+0xbc>
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9cc:	0038      	movs	r0, r7
 800b9ce:	18ea      	adds	r2, r5, r3
 800b9d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d4:	47b0      	blx	r6
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d1c0      	bne.n	800b95c <_printf_float+0x364>
 800b9da:	e66b      	b.n	800b6b4 <_printf_float+0xbc>
 800b9dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	dc02      	bgt.n	800b9e8 <_printf_float+0x3f0>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	421a      	tst	r2, r3
 800b9e6:	d034      	beq.n	800ba52 <_printf_float+0x45a>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	002a      	movs	r2, r5
 800b9ec:	0038      	movs	r0, r7
 800b9ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9f0:	47b0      	blx	r6
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	d100      	bne.n	800b9f8 <_printf_float+0x400>
 800b9f6:	e65d      	b.n	800b6b4 <_printf_float+0xbc>
 800b9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9fa:	0038      	movs	r0, r7
 800b9fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba00:	47b0      	blx	r6
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d100      	bne.n	800ba08 <_printf_float+0x410>
 800ba06:	e655      	b.n	800b6b4 <_printf_float+0xbc>
 800ba08:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ba0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f7f4 fd18 	bl	8000444 <__aeabi_dcmpeq>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d11a      	bne.n	800ba4e <_printf_float+0x456>
 800ba18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba1a:	1c6a      	adds	r2, r5, #1
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	0038      	movs	r0, r7
 800ba20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba22:	47b0      	blx	r6
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d10e      	bne.n	800ba46 <_printf_float+0x44e>
 800ba28:	e644      	b.n	800b6b4 <_printf_float+0xbc>
 800ba2a:	0022      	movs	r2, r4
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	0038      	movs	r0, r7
 800ba30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba32:	321a      	adds	r2, #26
 800ba34:	47b0      	blx	r6
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d100      	bne.n	800ba3c <_printf_float+0x444>
 800ba3a:	e63b      	b.n	800b6b4 <_printf_float+0xbc>
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba40:	3b01      	subs	r3, #1
 800ba42:	42ab      	cmp	r3, r5
 800ba44:	dcf1      	bgt.n	800ba2a <_printf_float+0x432>
 800ba46:	0022      	movs	r2, r4
 800ba48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba4a:	3250      	adds	r2, #80	; 0x50
 800ba4c:	e6da      	b.n	800b804 <_printf_float+0x20c>
 800ba4e:	2500      	movs	r5, #0
 800ba50:	e7f5      	b.n	800ba3e <_printf_float+0x446>
 800ba52:	002a      	movs	r2, r5
 800ba54:	e7e3      	b.n	800ba1e <_printf_float+0x426>
 800ba56:	0022      	movs	r2, r4
 800ba58:	2301      	movs	r3, #1
 800ba5a:	0038      	movs	r0, r7
 800ba5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba5e:	3219      	adds	r2, #25
 800ba60:	47b0      	blx	r6
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d100      	bne.n	800ba68 <_printf_float+0x470>
 800ba66:	e625      	b.n	800b6b4 <_printf_float+0xbc>
 800ba68:	3501      	adds	r5, #1
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	dcf0      	bgt.n	800ba56 <_printf_float+0x45e>
 800ba74:	e6f8      	b.n	800b868 <_printf_float+0x270>
 800ba76:	2500      	movs	r5, #0
 800ba78:	e7f7      	b.n	800ba6a <_printf_float+0x472>
 800ba7a:	46c0      	nop			; (mov r8, r8)

0800ba7c <_printf_common>:
 800ba7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba7e:	0015      	movs	r5, r2
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	688a      	ldr	r2, [r1, #8]
 800ba84:	690b      	ldr	r3, [r1, #16]
 800ba86:	000c      	movs	r4, r1
 800ba88:	9000      	str	r0, [sp, #0]
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	da00      	bge.n	800ba90 <_printf_common+0x14>
 800ba8e:	0013      	movs	r3, r2
 800ba90:	0022      	movs	r2, r4
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	3243      	adds	r2, #67	; 0x43
 800ba96:	7812      	ldrb	r2, [r2, #0]
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	d001      	beq.n	800baa0 <_printf_common+0x24>
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	069b      	lsls	r3, r3, #26
 800baa4:	d502      	bpl.n	800baac <_printf_common+0x30>
 800baa6:	682b      	ldr	r3, [r5, #0]
 800baa8:	3302      	adds	r3, #2
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	2306      	movs	r3, #6
 800bab0:	0017      	movs	r7, r2
 800bab2:	401f      	ands	r7, r3
 800bab4:	421a      	tst	r2, r3
 800bab6:	d027      	beq.n	800bb08 <_printf_common+0x8c>
 800bab8:	0023      	movs	r3, r4
 800baba:	3343      	adds	r3, #67	; 0x43
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	1e5a      	subs	r2, r3, #1
 800bac0:	4193      	sbcs	r3, r2
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	0692      	lsls	r2, r2, #26
 800bac6:	d430      	bmi.n	800bb2a <_printf_common+0xae>
 800bac8:	0022      	movs	r2, r4
 800baca:	9901      	ldr	r1, [sp, #4]
 800bacc:	9800      	ldr	r0, [sp, #0]
 800bace:	9e08      	ldr	r6, [sp, #32]
 800bad0:	3243      	adds	r2, #67	; 0x43
 800bad2:	47b0      	blx	r6
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d025      	beq.n	800bb24 <_printf_common+0xa8>
 800bad8:	2306      	movs	r3, #6
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	682a      	ldr	r2, [r5, #0]
 800bade:	68e1      	ldr	r1, [r4, #12]
 800bae0:	2500      	movs	r5, #0
 800bae2:	4003      	ands	r3, r0
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d103      	bne.n	800baf0 <_printf_common+0x74>
 800bae8:	1a8d      	subs	r5, r1, r2
 800baea:	43eb      	mvns	r3, r5
 800baec:	17db      	asrs	r3, r3, #31
 800baee:	401d      	ands	r5, r3
 800baf0:	68a3      	ldr	r3, [r4, #8]
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	dd01      	ble.n	800bafc <_printf_common+0x80>
 800baf8:	1a9b      	subs	r3, r3, r2
 800bafa:	18ed      	adds	r5, r5, r3
 800bafc:	2700      	movs	r7, #0
 800bafe:	42bd      	cmp	r5, r7
 800bb00:	d120      	bne.n	800bb44 <_printf_common+0xc8>
 800bb02:	2000      	movs	r0, #0
 800bb04:	e010      	b.n	800bb28 <_printf_common+0xac>
 800bb06:	3701      	adds	r7, #1
 800bb08:	68e3      	ldr	r3, [r4, #12]
 800bb0a:	682a      	ldr	r2, [r5, #0]
 800bb0c:	1a9b      	subs	r3, r3, r2
 800bb0e:	42bb      	cmp	r3, r7
 800bb10:	ddd2      	ble.n	800bab8 <_printf_common+0x3c>
 800bb12:	0022      	movs	r2, r4
 800bb14:	2301      	movs	r3, #1
 800bb16:	9901      	ldr	r1, [sp, #4]
 800bb18:	9800      	ldr	r0, [sp, #0]
 800bb1a:	9e08      	ldr	r6, [sp, #32]
 800bb1c:	3219      	adds	r2, #25
 800bb1e:	47b0      	blx	r6
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d1f0      	bne.n	800bb06 <_printf_common+0x8a>
 800bb24:	2001      	movs	r0, #1
 800bb26:	4240      	negs	r0, r0
 800bb28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb2a:	2030      	movs	r0, #48	; 0x30
 800bb2c:	18e1      	adds	r1, r4, r3
 800bb2e:	3143      	adds	r1, #67	; 0x43
 800bb30:	7008      	strb	r0, [r1, #0]
 800bb32:	0021      	movs	r1, r4
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	3145      	adds	r1, #69	; 0x45
 800bb38:	7809      	ldrb	r1, [r1, #0]
 800bb3a:	18a2      	adds	r2, r4, r2
 800bb3c:	3243      	adds	r2, #67	; 0x43
 800bb3e:	3302      	adds	r3, #2
 800bb40:	7011      	strb	r1, [r2, #0]
 800bb42:	e7c1      	b.n	800bac8 <_printf_common+0x4c>
 800bb44:	0022      	movs	r2, r4
 800bb46:	2301      	movs	r3, #1
 800bb48:	9901      	ldr	r1, [sp, #4]
 800bb4a:	9800      	ldr	r0, [sp, #0]
 800bb4c:	9e08      	ldr	r6, [sp, #32]
 800bb4e:	321a      	adds	r2, #26
 800bb50:	47b0      	blx	r6
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	d0e6      	beq.n	800bb24 <_printf_common+0xa8>
 800bb56:	3701      	adds	r7, #1
 800bb58:	e7d1      	b.n	800bafe <_printf_common+0x82>
	...

0800bb5c <_printf_i>:
 800bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb5e:	b08b      	sub	sp, #44	; 0x2c
 800bb60:	9206      	str	r2, [sp, #24]
 800bb62:	000a      	movs	r2, r1
 800bb64:	3243      	adds	r2, #67	; 0x43
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	9005      	str	r0, [sp, #20]
 800bb6a:	9204      	str	r2, [sp, #16]
 800bb6c:	7e0a      	ldrb	r2, [r1, #24]
 800bb6e:	000c      	movs	r4, r1
 800bb70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb72:	2a78      	cmp	r2, #120	; 0x78
 800bb74:	d807      	bhi.n	800bb86 <_printf_i+0x2a>
 800bb76:	2a62      	cmp	r2, #98	; 0x62
 800bb78:	d809      	bhi.n	800bb8e <_printf_i+0x32>
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	d100      	bne.n	800bb80 <_printf_i+0x24>
 800bb7e:	e0c1      	b.n	800bd04 <_printf_i+0x1a8>
 800bb80:	2a58      	cmp	r2, #88	; 0x58
 800bb82:	d100      	bne.n	800bb86 <_printf_i+0x2a>
 800bb84:	e08c      	b.n	800bca0 <_printf_i+0x144>
 800bb86:	0026      	movs	r6, r4
 800bb88:	3642      	adds	r6, #66	; 0x42
 800bb8a:	7032      	strb	r2, [r6, #0]
 800bb8c:	e022      	b.n	800bbd4 <_printf_i+0x78>
 800bb8e:	0010      	movs	r0, r2
 800bb90:	3863      	subs	r0, #99	; 0x63
 800bb92:	2815      	cmp	r0, #21
 800bb94:	d8f7      	bhi.n	800bb86 <_printf_i+0x2a>
 800bb96:	f7f4 fac5 	bl	8000124 <__gnu_thumb1_case_shi>
 800bb9a:	0016      	.short	0x0016
 800bb9c:	fff6001f 	.word	0xfff6001f
 800bba0:	fff6fff6 	.word	0xfff6fff6
 800bba4:	001ffff6 	.word	0x001ffff6
 800bba8:	fff6fff6 	.word	0xfff6fff6
 800bbac:	fff6fff6 	.word	0xfff6fff6
 800bbb0:	003600a8 	.word	0x003600a8
 800bbb4:	fff6009a 	.word	0xfff6009a
 800bbb8:	00b9fff6 	.word	0x00b9fff6
 800bbbc:	0036fff6 	.word	0x0036fff6
 800bbc0:	fff6fff6 	.word	0xfff6fff6
 800bbc4:	009e      	.short	0x009e
 800bbc6:	0026      	movs	r6, r4
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	3642      	adds	r6, #66	; 0x42
 800bbcc:	1d11      	adds	r1, r2, #4
 800bbce:	6019      	str	r1, [r3, #0]
 800bbd0:	6813      	ldr	r3, [r2, #0]
 800bbd2:	7033      	strb	r3, [r6, #0]
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e0a7      	b.n	800bd28 <_printf_i+0x1cc>
 800bbd8:	6808      	ldr	r0, [r1, #0]
 800bbda:	6819      	ldr	r1, [r3, #0]
 800bbdc:	1d0a      	adds	r2, r1, #4
 800bbde:	0605      	lsls	r5, r0, #24
 800bbe0:	d50b      	bpl.n	800bbfa <_printf_i+0x9e>
 800bbe2:	680d      	ldr	r5, [r1, #0]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	da03      	bge.n	800bbf2 <_printf_i+0x96>
 800bbea:	232d      	movs	r3, #45	; 0x2d
 800bbec:	9a04      	ldr	r2, [sp, #16]
 800bbee:	426d      	negs	r5, r5
 800bbf0:	7013      	strb	r3, [r2, #0]
 800bbf2:	4b61      	ldr	r3, [pc, #388]	; (800bd78 <_printf_i+0x21c>)
 800bbf4:	270a      	movs	r7, #10
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	e01b      	b.n	800bc32 <_printf_i+0xd6>
 800bbfa:	680d      	ldr	r5, [r1, #0]
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	0641      	lsls	r1, r0, #25
 800bc00:	d5f1      	bpl.n	800bbe6 <_printf_i+0x8a>
 800bc02:	b22d      	sxth	r5, r5
 800bc04:	e7ef      	b.n	800bbe6 <_printf_i+0x8a>
 800bc06:	680d      	ldr	r5, [r1, #0]
 800bc08:	6819      	ldr	r1, [r3, #0]
 800bc0a:	1d08      	adds	r0, r1, #4
 800bc0c:	6018      	str	r0, [r3, #0]
 800bc0e:	062e      	lsls	r6, r5, #24
 800bc10:	d501      	bpl.n	800bc16 <_printf_i+0xba>
 800bc12:	680d      	ldr	r5, [r1, #0]
 800bc14:	e003      	b.n	800bc1e <_printf_i+0xc2>
 800bc16:	066d      	lsls	r5, r5, #25
 800bc18:	d5fb      	bpl.n	800bc12 <_printf_i+0xb6>
 800bc1a:	680d      	ldr	r5, [r1, #0]
 800bc1c:	b2ad      	uxth	r5, r5
 800bc1e:	4b56      	ldr	r3, [pc, #344]	; (800bd78 <_printf_i+0x21c>)
 800bc20:	2708      	movs	r7, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	2a6f      	cmp	r2, #111	; 0x6f
 800bc26:	d000      	beq.n	800bc2a <_printf_i+0xce>
 800bc28:	3702      	adds	r7, #2
 800bc2a:	0023      	movs	r3, r4
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	3343      	adds	r3, #67	; 0x43
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	6863      	ldr	r3, [r4, #4]
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	db03      	blt.n	800bc42 <_printf_i+0xe6>
 800bc3a:	2204      	movs	r2, #4
 800bc3c:	6821      	ldr	r1, [r4, #0]
 800bc3e:	4391      	bics	r1, r2
 800bc40:	6021      	str	r1, [r4, #0]
 800bc42:	2d00      	cmp	r5, #0
 800bc44:	d102      	bne.n	800bc4c <_printf_i+0xf0>
 800bc46:	9e04      	ldr	r6, [sp, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00c      	beq.n	800bc66 <_printf_i+0x10a>
 800bc4c:	9e04      	ldr	r6, [sp, #16]
 800bc4e:	0028      	movs	r0, r5
 800bc50:	0039      	movs	r1, r7
 800bc52:	f7f4 faf7 	bl	8000244 <__aeabi_uidivmod>
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	3e01      	subs	r6, #1
 800bc5a:	5c5b      	ldrb	r3, [r3, r1]
 800bc5c:	7033      	strb	r3, [r6, #0]
 800bc5e:	002b      	movs	r3, r5
 800bc60:	0005      	movs	r5, r0
 800bc62:	429f      	cmp	r7, r3
 800bc64:	d9f3      	bls.n	800bc4e <_printf_i+0xf2>
 800bc66:	2f08      	cmp	r7, #8
 800bc68:	d109      	bne.n	800bc7e <_printf_i+0x122>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	07db      	lsls	r3, r3, #31
 800bc6e:	d506      	bpl.n	800bc7e <_printf_i+0x122>
 800bc70:	6863      	ldr	r3, [r4, #4]
 800bc72:	6922      	ldr	r2, [r4, #16]
 800bc74:	4293      	cmp	r3, r2
 800bc76:	dc02      	bgt.n	800bc7e <_printf_i+0x122>
 800bc78:	2330      	movs	r3, #48	; 0x30
 800bc7a:	3e01      	subs	r6, #1
 800bc7c:	7033      	strb	r3, [r6, #0]
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	1b9b      	subs	r3, r3, r6
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	0021      	movs	r1, r4
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	9b06      	ldr	r3, [sp, #24]
 800bc8e:	aa09      	add	r2, sp, #36	; 0x24
 800bc90:	f7ff fef4 	bl	800ba7c <_printf_common>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d14c      	bne.n	800bd32 <_printf_i+0x1d6>
 800bc98:	2001      	movs	r0, #1
 800bc9a:	4240      	negs	r0, r0
 800bc9c:	b00b      	add	sp, #44	; 0x2c
 800bc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca0:	3145      	adds	r1, #69	; 0x45
 800bca2:	700a      	strb	r2, [r1, #0]
 800bca4:	4a34      	ldr	r2, [pc, #208]	; (800bd78 <_printf_i+0x21c>)
 800bca6:	9203      	str	r2, [sp, #12]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	6821      	ldr	r1, [r4, #0]
 800bcac:	ca20      	ldmia	r2!, {r5}
 800bcae:	601a      	str	r2, [r3, #0]
 800bcb0:	0608      	lsls	r0, r1, #24
 800bcb2:	d516      	bpl.n	800bce2 <_printf_i+0x186>
 800bcb4:	07cb      	lsls	r3, r1, #31
 800bcb6:	d502      	bpl.n	800bcbe <_printf_i+0x162>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	4319      	orrs	r1, r3
 800bcbc:	6021      	str	r1, [r4, #0]
 800bcbe:	2710      	movs	r7, #16
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	d1b2      	bne.n	800bc2a <_printf_i+0xce>
 800bcc4:	2320      	movs	r3, #32
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	439a      	bics	r2, r3
 800bcca:	6022      	str	r2, [r4, #0]
 800bccc:	e7ad      	b.n	800bc2a <_printf_i+0xce>
 800bcce:	2220      	movs	r2, #32
 800bcd0:	6809      	ldr	r1, [r1, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	6022      	str	r2, [r4, #0]
 800bcd6:	0022      	movs	r2, r4
 800bcd8:	2178      	movs	r1, #120	; 0x78
 800bcda:	3245      	adds	r2, #69	; 0x45
 800bcdc:	7011      	strb	r1, [r2, #0]
 800bcde:	4a27      	ldr	r2, [pc, #156]	; (800bd7c <_printf_i+0x220>)
 800bce0:	e7e1      	b.n	800bca6 <_printf_i+0x14a>
 800bce2:	0648      	lsls	r0, r1, #25
 800bce4:	d5e6      	bpl.n	800bcb4 <_printf_i+0x158>
 800bce6:	b2ad      	uxth	r5, r5
 800bce8:	e7e4      	b.n	800bcb4 <_printf_i+0x158>
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	680d      	ldr	r5, [r1, #0]
 800bcee:	1d10      	adds	r0, r2, #4
 800bcf0:	6949      	ldr	r1, [r1, #20]
 800bcf2:	6018      	str	r0, [r3, #0]
 800bcf4:	6813      	ldr	r3, [r2, #0]
 800bcf6:	062e      	lsls	r6, r5, #24
 800bcf8:	d501      	bpl.n	800bcfe <_printf_i+0x1a2>
 800bcfa:	6019      	str	r1, [r3, #0]
 800bcfc:	e002      	b.n	800bd04 <_printf_i+0x1a8>
 800bcfe:	066d      	lsls	r5, r5, #25
 800bd00:	d5fb      	bpl.n	800bcfa <_printf_i+0x19e>
 800bd02:	8019      	strh	r1, [r3, #0]
 800bd04:	2300      	movs	r3, #0
 800bd06:	9e04      	ldr	r6, [sp, #16]
 800bd08:	6123      	str	r3, [r4, #16]
 800bd0a:	e7bb      	b.n	800bc84 <_printf_i+0x128>
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	1d11      	adds	r1, r2, #4
 800bd10:	6019      	str	r1, [r3, #0]
 800bd12:	6816      	ldr	r6, [r2, #0]
 800bd14:	2100      	movs	r1, #0
 800bd16:	0030      	movs	r0, r6
 800bd18:	6862      	ldr	r2, [r4, #4]
 800bd1a:	f001 f9ff 	bl	800d11c <memchr>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d001      	beq.n	800bd26 <_printf_i+0x1ca>
 800bd22:	1b80      	subs	r0, r0, r6
 800bd24:	6060      	str	r0, [r4, #4]
 800bd26:	6863      	ldr	r3, [r4, #4]
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9a04      	ldr	r2, [sp, #16]
 800bd2e:	7013      	strb	r3, [r2, #0]
 800bd30:	e7a8      	b.n	800bc84 <_printf_i+0x128>
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	0032      	movs	r2, r6
 800bd36:	9906      	ldr	r1, [sp, #24]
 800bd38:	9805      	ldr	r0, [sp, #20]
 800bd3a:	9d07      	ldr	r5, [sp, #28]
 800bd3c:	47a8      	blx	r5
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d0aa      	beq.n	800bc98 <_printf_i+0x13c>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	079b      	lsls	r3, r3, #30
 800bd46:	d415      	bmi.n	800bd74 <_printf_i+0x218>
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	68e0      	ldr	r0, [r4, #12]
 800bd4c:	4298      	cmp	r0, r3
 800bd4e:	daa5      	bge.n	800bc9c <_printf_i+0x140>
 800bd50:	0018      	movs	r0, r3
 800bd52:	e7a3      	b.n	800bc9c <_printf_i+0x140>
 800bd54:	0022      	movs	r2, r4
 800bd56:	2301      	movs	r3, #1
 800bd58:	9906      	ldr	r1, [sp, #24]
 800bd5a:	9805      	ldr	r0, [sp, #20]
 800bd5c:	9e07      	ldr	r6, [sp, #28]
 800bd5e:	3219      	adds	r2, #25
 800bd60:	47b0      	blx	r6
 800bd62:	1c43      	adds	r3, r0, #1
 800bd64:	d098      	beq.n	800bc98 <_printf_i+0x13c>
 800bd66:	3501      	adds	r5, #1
 800bd68:	68e3      	ldr	r3, [r4, #12]
 800bd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd6c:	1a9b      	subs	r3, r3, r2
 800bd6e:	42ab      	cmp	r3, r5
 800bd70:	dcf0      	bgt.n	800bd54 <_printf_i+0x1f8>
 800bd72:	e7e9      	b.n	800bd48 <_printf_i+0x1ec>
 800bd74:	2500      	movs	r5, #0
 800bd76:	e7f7      	b.n	800bd68 <_printf_i+0x20c>
 800bd78:	0800e0c3 	.word	0x0800e0c3
 800bd7c:	0800e0d4 	.word	0x0800e0d4

0800bd80 <_sbrk_r>:
 800bd80:	2300      	movs	r3, #0
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	4d06      	ldr	r5, [pc, #24]	; (800bda0 <_sbrk_r+0x20>)
 800bd86:	0004      	movs	r4, r0
 800bd88:	0008      	movs	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f6 ffec 	bl	8002d68 <_sbrk>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d103      	bne.n	800bd9c <_sbrk_r+0x1c>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d000      	beq.n	800bd9c <_sbrk_r+0x1c>
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	20000750 	.word	0x20000750

0800bda4 <__swbuf_r>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	0005      	movs	r5, r0
 800bda8:	000e      	movs	r6, r1
 800bdaa:	0014      	movs	r4, r2
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d004      	beq.n	800bdba <__swbuf_r+0x16>
 800bdb0:	6983      	ldr	r3, [r0, #24]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <__swbuf_r+0x16>
 800bdb6:	f001 f89d 	bl	800cef4 <__sinit>
 800bdba:	4b22      	ldr	r3, [pc, #136]	; (800be44 <__swbuf_r+0xa0>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	d12e      	bne.n	800be1e <__swbuf_r+0x7a>
 800bdc0:	686c      	ldr	r4, [r5, #4]
 800bdc2:	69a3      	ldr	r3, [r4, #24]
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	071b      	lsls	r3, r3, #28
 800bdca:	d532      	bpl.n	800be32 <__swbuf_r+0x8e>
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d02f      	beq.n	800be32 <__swbuf_r+0x8e>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	6922      	ldr	r2, [r4, #16]
 800bdd6:	b2f7      	uxtb	r7, r6
 800bdd8:	1a98      	subs	r0, r3, r2
 800bdda:	6963      	ldr	r3, [r4, #20]
 800bddc:	b2f6      	uxtb	r6, r6
 800bdde:	4283      	cmp	r3, r0
 800bde0:	dc05      	bgt.n	800bdee <__swbuf_r+0x4a>
 800bde2:	0021      	movs	r1, r4
 800bde4:	0028      	movs	r0, r5
 800bde6:	f000 ffe3 	bl	800cdb0 <_fflush_r>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d127      	bne.n	800be3e <__swbuf_r+0x9a>
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	60a3      	str	r3, [r4, #8]
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	6022      	str	r2, [r4, #0]
 800bdfc:	701f      	strb	r7, [r3, #0]
 800bdfe:	6963      	ldr	r3, [r4, #20]
 800be00:	4283      	cmp	r3, r0
 800be02:	d004      	beq.n	800be0e <__swbuf_r+0x6a>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	07db      	lsls	r3, r3, #31
 800be08:	d507      	bpl.n	800be1a <__swbuf_r+0x76>
 800be0a:	2e0a      	cmp	r6, #10
 800be0c:	d105      	bne.n	800be1a <__swbuf_r+0x76>
 800be0e:	0021      	movs	r1, r4
 800be10:	0028      	movs	r0, r5
 800be12:	f000 ffcd 	bl	800cdb0 <_fflush_r>
 800be16:	2800      	cmp	r0, #0
 800be18:	d111      	bne.n	800be3e <__swbuf_r+0x9a>
 800be1a:	0030      	movs	r0, r6
 800be1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be1e:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <__swbuf_r+0xa4>)
 800be20:	429c      	cmp	r4, r3
 800be22:	d101      	bne.n	800be28 <__swbuf_r+0x84>
 800be24:	68ac      	ldr	r4, [r5, #8]
 800be26:	e7cc      	b.n	800bdc2 <__swbuf_r+0x1e>
 800be28:	4b08      	ldr	r3, [pc, #32]	; (800be4c <__swbuf_r+0xa8>)
 800be2a:	429c      	cmp	r4, r3
 800be2c:	d1c9      	bne.n	800bdc2 <__swbuf_r+0x1e>
 800be2e:	68ec      	ldr	r4, [r5, #12]
 800be30:	e7c7      	b.n	800bdc2 <__swbuf_r+0x1e>
 800be32:	0021      	movs	r1, r4
 800be34:	0028      	movs	r0, r5
 800be36:	f000 f80b 	bl	800be50 <__swsetup_r>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d0c9      	beq.n	800bdd2 <__swbuf_r+0x2e>
 800be3e:	2601      	movs	r6, #1
 800be40:	4276      	negs	r6, r6
 800be42:	e7ea      	b.n	800be1a <__swbuf_r+0x76>
 800be44:	0800e298 	.word	0x0800e298
 800be48:	0800e2b8 	.word	0x0800e2b8
 800be4c:	0800e278 	.word	0x0800e278

0800be50 <__swsetup_r>:
 800be50:	4b37      	ldr	r3, [pc, #220]	; (800bf30 <__swsetup_r+0xe0>)
 800be52:	b570      	push	{r4, r5, r6, lr}
 800be54:	681d      	ldr	r5, [r3, #0]
 800be56:	0006      	movs	r6, r0
 800be58:	000c      	movs	r4, r1
 800be5a:	2d00      	cmp	r5, #0
 800be5c:	d005      	beq.n	800be6a <__swsetup_r+0x1a>
 800be5e:	69ab      	ldr	r3, [r5, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <__swsetup_r+0x1a>
 800be64:	0028      	movs	r0, r5
 800be66:	f001 f845 	bl	800cef4 <__sinit>
 800be6a:	4b32      	ldr	r3, [pc, #200]	; (800bf34 <__swsetup_r+0xe4>)
 800be6c:	429c      	cmp	r4, r3
 800be6e:	d10f      	bne.n	800be90 <__swsetup_r+0x40>
 800be70:	686c      	ldr	r4, [r5, #4]
 800be72:	230c      	movs	r3, #12
 800be74:	5ee2      	ldrsh	r2, [r4, r3]
 800be76:	b293      	uxth	r3, r2
 800be78:	0711      	lsls	r1, r2, #28
 800be7a:	d42d      	bmi.n	800bed8 <__swsetup_r+0x88>
 800be7c:	06d9      	lsls	r1, r3, #27
 800be7e:	d411      	bmi.n	800bea4 <__swsetup_r+0x54>
 800be80:	2309      	movs	r3, #9
 800be82:	2001      	movs	r0, #1
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	3337      	adds	r3, #55	; 0x37
 800be88:	4313      	orrs	r3, r2
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	4240      	negs	r0, r0
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	4b29      	ldr	r3, [pc, #164]	; (800bf38 <__swsetup_r+0xe8>)
 800be92:	429c      	cmp	r4, r3
 800be94:	d101      	bne.n	800be9a <__swsetup_r+0x4a>
 800be96:	68ac      	ldr	r4, [r5, #8]
 800be98:	e7eb      	b.n	800be72 <__swsetup_r+0x22>
 800be9a:	4b28      	ldr	r3, [pc, #160]	; (800bf3c <__swsetup_r+0xec>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	d1e8      	bne.n	800be72 <__swsetup_r+0x22>
 800bea0:	68ec      	ldr	r4, [r5, #12]
 800bea2:	e7e6      	b.n	800be72 <__swsetup_r+0x22>
 800bea4:	075b      	lsls	r3, r3, #29
 800bea6:	d513      	bpl.n	800bed0 <__swsetup_r+0x80>
 800bea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beaa:	2900      	cmp	r1, #0
 800beac:	d008      	beq.n	800bec0 <__swsetup_r+0x70>
 800beae:	0023      	movs	r3, r4
 800beb0:	3344      	adds	r3, #68	; 0x44
 800beb2:	4299      	cmp	r1, r3
 800beb4:	d002      	beq.n	800bebc <__swsetup_r+0x6c>
 800beb6:	0030      	movs	r0, r6
 800beb8:	f7ff f8b0 	bl	800b01c <_free_r>
 800bebc:	2300      	movs	r3, #0
 800bebe:	6363      	str	r3, [r4, #52]	; 0x34
 800bec0:	2224      	movs	r2, #36	; 0x24
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	4393      	bics	r3, r2
 800bec6:	81a3      	strh	r3, [r4, #12]
 800bec8:	2300      	movs	r3, #0
 800beca:	6063      	str	r3, [r4, #4]
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	2308      	movs	r3, #8
 800bed2:	89a2      	ldrh	r2, [r4, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	81a3      	strh	r3, [r4, #12]
 800bed8:	6923      	ldr	r3, [r4, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10b      	bne.n	800bef6 <__swsetup_r+0xa6>
 800bede:	21a0      	movs	r1, #160	; 0xa0
 800bee0:	2280      	movs	r2, #128	; 0x80
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	0089      	lsls	r1, r1, #2
 800bee6:	0092      	lsls	r2, r2, #2
 800bee8:	400b      	ands	r3, r1
 800beea:	4293      	cmp	r3, r2
 800beec:	d003      	beq.n	800bef6 <__swsetup_r+0xa6>
 800beee:	0021      	movs	r1, r4
 800bef0:	0030      	movs	r0, r6
 800bef2:	f001 f8cf 	bl	800d094 <__smakebuf_r>
 800bef6:	220c      	movs	r2, #12
 800bef8:	5ea3      	ldrsh	r3, [r4, r2]
 800befa:	2001      	movs	r0, #1
 800befc:	001a      	movs	r2, r3
 800befe:	b299      	uxth	r1, r3
 800bf00:	4002      	ands	r2, r0
 800bf02:	4203      	tst	r3, r0
 800bf04:	d00f      	beq.n	800bf26 <__swsetup_r+0xd6>
 800bf06:	2200      	movs	r2, #0
 800bf08:	60a2      	str	r2, [r4, #8]
 800bf0a:	6962      	ldr	r2, [r4, #20]
 800bf0c:	4252      	negs	r2, r2
 800bf0e:	61a2      	str	r2, [r4, #24]
 800bf10:	2000      	movs	r0, #0
 800bf12:	6922      	ldr	r2, [r4, #16]
 800bf14:	4282      	cmp	r2, r0
 800bf16:	d1ba      	bne.n	800be8e <__swsetup_r+0x3e>
 800bf18:	060a      	lsls	r2, r1, #24
 800bf1a:	d5b8      	bpl.n	800be8e <__swsetup_r+0x3e>
 800bf1c:	2240      	movs	r2, #64	; 0x40
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	3801      	subs	r0, #1
 800bf24:	e7b3      	b.n	800be8e <__swsetup_r+0x3e>
 800bf26:	0788      	lsls	r0, r1, #30
 800bf28:	d400      	bmi.n	800bf2c <__swsetup_r+0xdc>
 800bf2a:	6962      	ldr	r2, [r4, #20]
 800bf2c:	60a2      	str	r2, [r4, #8]
 800bf2e:	e7ef      	b.n	800bf10 <__swsetup_r+0xc0>
 800bf30:	20000094 	.word	0x20000094
 800bf34:	0800e298 	.word	0x0800e298
 800bf38:	0800e2b8 	.word	0x0800e2b8
 800bf3c:	0800e278 	.word	0x0800e278

0800bf40 <abort>:
 800bf40:	2006      	movs	r0, #6
 800bf42:	b510      	push	{r4, lr}
 800bf44:	f001 fccc 	bl	800d8e0 <raise>
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f7f6 fe9b 	bl	8002c84 <_exit>

0800bf4e <quorem>:
 800bf4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf50:	0006      	movs	r6, r0
 800bf52:	690b      	ldr	r3, [r1, #16]
 800bf54:	6932      	ldr	r2, [r6, #16]
 800bf56:	b087      	sub	sp, #28
 800bf58:	2000      	movs	r0, #0
 800bf5a:	9103      	str	r1, [sp, #12]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	db65      	blt.n	800c02c <quorem+0xde>
 800bf60:	3b01      	subs	r3, #1
 800bf62:	009c      	lsls	r4, r3, #2
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	000b      	movs	r3, r1
 800bf68:	3314      	adds	r3, #20
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	191b      	adds	r3, r3, r4
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	0033      	movs	r3, r6
 800bf72:	3314      	adds	r3, #20
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	191c      	adds	r4, r3, r4
 800bf78:	9b04      	ldr	r3, [sp, #16]
 800bf7a:	6827      	ldr	r7, [r4, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	0038      	movs	r0, r7
 800bf80:	1c5d      	adds	r5, r3, #1
 800bf82:	0029      	movs	r1, r5
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	f7f4 f8d7 	bl	8000138 <__udivsi3>
 800bf8a:	9001      	str	r0, [sp, #4]
 800bf8c:	42af      	cmp	r7, r5
 800bf8e:	d324      	bcc.n	800bfda <quorem+0x8c>
 800bf90:	2500      	movs	r5, #0
 800bf92:	46ac      	mov	ip, r5
 800bf94:	9802      	ldr	r0, [sp, #8]
 800bf96:	9f05      	ldr	r7, [sp, #20]
 800bf98:	cf08      	ldmia	r7!, {r3}
 800bf9a:	9a01      	ldr	r2, [sp, #4]
 800bf9c:	b299      	uxth	r1, r3
 800bf9e:	4351      	muls	r1, r2
 800bfa0:	0c1b      	lsrs	r3, r3, #16
 800bfa2:	4353      	muls	r3, r2
 800bfa4:	1949      	adds	r1, r1, r5
 800bfa6:	0c0a      	lsrs	r2, r1, #16
 800bfa8:	189b      	adds	r3, r3, r2
 800bfaa:	6802      	ldr	r2, [r0, #0]
 800bfac:	b289      	uxth	r1, r1
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	4462      	add	r2, ip
 800bfb2:	1a52      	subs	r2, r2, r1
 800bfb4:	6801      	ldr	r1, [r0, #0]
 800bfb6:	0c1d      	lsrs	r5, r3, #16
 800bfb8:	0c09      	lsrs	r1, r1, #16
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	1acb      	subs	r3, r1, r3
 800bfbe:	1411      	asrs	r1, r2, #16
 800bfc0:	185b      	adds	r3, r3, r1
 800bfc2:	1419      	asrs	r1, r3, #16
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	431a      	orrs	r2, r3
 800bfca:	9b04      	ldr	r3, [sp, #16]
 800bfcc:	468c      	mov	ip, r1
 800bfce:	c004      	stmia	r0!, {r2}
 800bfd0:	42bb      	cmp	r3, r7
 800bfd2:	d2e1      	bcs.n	800bf98 <quorem+0x4a>
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d030      	beq.n	800c03c <quorem+0xee>
 800bfda:	0030      	movs	r0, r6
 800bfdc:	9903      	ldr	r1, [sp, #12]
 800bfde:	f001 fb3d 	bl	800d65c <__mcmp>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	db21      	blt.n	800c02a <quorem+0xdc>
 800bfe6:	0030      	movs	r0, r6
 800bfe8:	2400      	movs	r4, #0
 800bfea:	9b01      	ldr	r3, [sp, #4]
 800bfec:	9903      	ldr	r1, [sp, #12]
 800bfee:	3301      	adds	r3, #1
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	3014      	adds	r0, #20
 800bff4:	3114      	adds	r1, #20
 800bff6:	6803      	ldr	r3, [r0, #0]
 800bff8:	c920      	ldmia	r1!, {r5}
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	1914      	adds	r4, r2, r4
 800bffe:	b2aa      	uxth	r2, r5
 800c000:	1aa2      	subs	r2, r4, r2
 800c002:	0c1b      	lsrs	r3, r3, #16
 800c004:	0c2d      	lsrs	r5, r5, #16
 800c006:	1414      	asrs	r4, r2, #16
 800c008:	1b5b      	subs	r3, r3, r5
 800c00a:	191b      	adds	r3, r3, r4
 800c00c:	141c      	asrs	r4, r3, #16
 800c00e:	b292      	uxth	r2, r2
 800c010:	041b      	lsls	r3, r3, #16
 800c012:	4313      	orrs	r3, r2
 800c014:	c008      	stmia	r0!, {r3}
 800c016:	9b04      	ldr	r3, [sp, #16]
 800c018:	428b      	cmp	r3, r1
 800c01a:	d2ec      	bcs.n	800bff6 <quorem+0xa8>
 800c01c:	9b00      	ldr	r3, [sp, #0]
 800c01e:	9a02      	ldr	r2, [sp, #8]
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	18d3      	adds	r3, r2, r3
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	2a00      	cmp	r2, #0
 800c028:	d015      	beq.n	800c056 <quorem+0x108>
 800c02a:	9801      	ldr	r0, [sp, #4]
 800c02c:	b007      	add	sp, #28
 800c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <quorem+0xf6>
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	3b01      	subs	r3, #1
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	3c04      	subs	r4, #4
 800c040:	42a3      	cmp	r3, r4
 800c042:	d3f5      	bcc.n	800c030 <quorem+0xe2>
 800c044:	9b00      	ldr	r3, [sp, #0]
 800c046:	6133      	str	r3, [r6, #16]
 800c048:	e7c7      	b.n	800bfda <quorem+0x8c>
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	2a00      	cmp	r2, #0
 800c04e:	d106      	bne.n	800c05e <quorem+0x110>
 800c050:	9a00      	ldr	r2, [sp, #0]
 800c052:	3a01      	subs	r2, #1
 800c054:	9200      	str	r2, [sp, #0]
 800c056:	9a02      	ldr	r2, [sp, #8]
 800c058:	3b04      	subs	r3, #4
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d3f5      	bcc.n	800c04a <quorem+0xfc>
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	6133      	str	r3, [r6, #16]
 800c062:	e7e2      	b.n	800c02a <quorem+0xdc>

0800c064 <_dtoa_r>:
 800c064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c066:	b09d      	sub	sp, #116	; 0x74
 800c068:	9202      	str	r2, [sp, #8]
 800c06a:	9303      	str	r3, [sp, #12]
 800c06c:	9b02      	ldr	r3, [sp, #8]
 800c06e:	9c03      	ldr	r4, [sp, #12]
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	9409      	str	r4, [sp, #36]	; 0x24
 800c074:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c076:	0007      	movs	r7, r0
 800c078:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	d10e      	bne.n	800c09c <_dtoa_r+0x38>
 800c07e:	2010      	movs	r0, #16
 800c080:	f7fe ff84 	bl	800af8c <malloc>
 800c084:	1e02      	subs	r2, r0, #0
 800c086:	6278      	str	r0, [r7, #36]	; 0x24
 800c088:	d104      	bne.n	800c094 <_dtoa_r+0x30>
 800c08a:	21ea      	movs	r1, #234	; 0xea
 800c08c:	4bc7      	ldr	r3, [pc, #796]	; (800c3ac <_dtoa_r+0x348>)
 800c08e:	48c8      	ldr	r0, [pc, #800]	; (800c3b0 <_dtoa_r+0x34c>)
 800c090:	f7fe ff1a 	bl	800aec8 <__assert_func>
 800c094:	6044      	str	r4, [r0, #4]
 800c096:	6084      	str	r4, [r0, #8]
 800c098:	6004      	str	r4, [r0, #0]
 800c09a:	60c4      	str	r4, [r0, #12]
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	6819      	ldr	r1, [r3, #0]
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d00a      	beq.n	800c0ba <_dtoa_r+0x56>
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4093      	lsls	r3, r2
 800c0aa:	604a      	str	r2, [r1, #4]
 800c0ac:	608b      	str	r3, [r1, #8]
 800c0ae:	0038      	movs	r0, r7
 800c0b0:	f001 f894 	bl	800d1dc <_Bfree>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	da20      	bge.n	800c102 <_dtoa_r+0x9e>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	085b      	lsrs	r3, r3, #1
 800c0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c0cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c0ce:	4bb9      	ldr	r3, [pc, #740]	; (800c3b4 <_dtoa_r+0x350>)
 800c0d0:	4ab8      	ldr	r2, [pc, #736]	; (800c3b4 <_dtoa_r+0x350>)
 800c0d2:	402b      	ands	r3, r5
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d117      	bne.n	800c108 <_dtoa_r+0xa4>
 800c0d8:	4bb7      	ldr	r3, [pc, #732]	; (800c3b8 <_dtoa_r+0x354>)
 800c0da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c0dc:	0328      	lsls	r0, r5, #12
 800c0de:	6013      	str	r3, [r2, #0]
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	0b00      	lsrs	r0, r0, #12
 800c0e4:	4318      	orrs	r0, r3
 800c0e6:	d101      	bne.n	800c0ec <_dtoa_r+0x88>
 800c0e8:	f000 fdbf 	bl	800cc6a <_dtoa_r+0xc06>
 800c0ec:	48b3      	ldr	r0, [pc, #716]	; (800c3bc <_dtoa_r+0x358>)
 800c0ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c0f0:	9006      	str	r0, [sp, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <_dtoa_r+0x98>
 800c0f6:	4bb2      	ldr	r3, [pc, #712]	; (800c3c0 <_dtoa_r+0x35c>)
 800c0f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	9806      	ldr	r0, [sp, #24]
 800c0fe:	b01d      	add	sp, #116	; 0x74
 800c100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c102:	2300      	movs	r3, #0
 800c104:	602b      	str	r3, [r5, #0]
 800c106:	e7e1      	b.n	800c0cc <_dtoa_r+0x68>
 800c108:	9b08      	ldr	r3, [sp, #32]
 800c10a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c10c:	9312      	str	r3, [sp, #72]	; 0x48
 800c10e:	9413      	str	r4, [sp, #76]	; 0x4c
 800c110:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c112:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c114:	2200      	movs	r2, #0
 800c116:	2300      	movs	r3, #0
 800c118:	f7f4 f994 	bl	8000444 <__aeabi_dcmpeq>
 800c11c:	1e04      	subs	r4, r0, #0
 800c11e:	d009      	beq.n	800c134 <_dtoa_r+0xd0>
 800c120:	2301      	movs	r3, #1
 800c122:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	4ba7      	ldr	r3, [pc, #668]	; (800c3c4 <_dtoa_r+0x360>)
 800c128:	9306      	str	r3, [sp, #24]
 800c12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0e5      	beq.n	800c0fc <_dtoa_r+0x98>
 800c130:	4ba5      	ldr	r3, [pc, #660]	; (800c3c8 <_dtoa_r+0x364>)
 800c132:	e7e1      	b.n	800c0f8 <_dtoa_r+0x94>
 800c134:	ab1a      	add	r3, sp, #104	; 0x68
 800c136:	9301      	str	r3, [sp, #4]
 800c138:	ab1b      	add	r3, sp, #108	; 0x6c
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	0038      	movs	r0, r7
 800c13e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c142:	f001 fb3f 	bl	800d7c4 <__d2b>
 800c146:	006e      	lsls	r6, r5, #1
 800c148:	9005      	str	r0, [sp, #20]
 800c14a:	0d76      	lsrs	r6, r6, #21
 800c14c:	d100      	bne.n	800c150 <_dtoa_r+0xec>
 800c14e:	e07c      	b.n	800c24a <_dtoa_r+0x1e6>
 800c150:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c152:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c156:	4a9d      	ldr	r2, [pc, #628]	; (800c3cc <_dtoa_r+0x368>)
 800c158:	031b      	lsls	r3, r3, #12
 800c15a:	0b1b      	lsrs	r3, r3, #12
 800c15c:	431a      	orrs	r2, r3
 800c15e:	0011      	movs	r1, r2
 800c160:	4b9b      	ldr	r3, [pc, #620]	; (800c3d0 <_dtoa_r+0x36c>)
 800c162:	9418      	str	r4, [sp, #96]	; 0x60
 800c164:	18f6      	adds	r6, r6, r3
 800c166:	2200      	movs	r2, #0
 800c168:	4b9a      	ldr	r3, [pc, #616]	; (800c3d4 <_dtoa_r+0x370>)
 800c16a:	f7f5 fb43 	bl	80017f4 <__aeabi_dsub>
 800c16e:	4a9a      	ldr	r2, [pc, #616]	; (800c3d8 <_dtoa_r+0x374>)
 800c170:	4b9a      	ldr	r3, [pc, #616]	; (800c3dc <_dtoa_r+0x378>)
 800c172:	f7f5 f8d3 	bl	800131c <__aeabi_dmul>
 800c176:	4a9a      	ldr	r2, [pc, #616]	; (800c3e0 <_dtoa_r+0x37c>)
 800c178:	4b9a      	ldr	r3, [pc, #616]	; (800c3e4 <_dtoa_r+0x380>)
 800c17a:	f7f4 f991 	bl	80004a0 <__aeabi_dadd>
 800c17e:	0004      	movs	r4, r0
 800c180:	0030      	movs	r0, r6
 800c182:	000d      	movs	r5, r1
 800c184:	f7f5 ff1c 	bl	8001fc0 <__aeabi_i2d>
 800c188:	4a97      	ldr	r2, [pc, #604]	; (800c3e8 <_dtoa_r+0x384>)
 800c18a:	4b98      	ldr	r3, [pc, #608]	; (800c3ec <_dtoa_r+0x388>)
 800c18c:	f7f5 f8c6 	bl	800131c <__aeabi_dmul>
 800c190:	0002      	movs	r2, r0
 800c192:	000b      	movs	r3, r1
 800c194:	0020      	movs	r0, r4
 800c196:	0029      	movs	r1, r5
 800c198:	f7f4 f982 	bl	80004a0 <__aeabi_dadd>
 800c19c:	0004      	movs	r4, r0
 800c19e:	000d      	movs	r5, r1
 800c1a0:	f7f5 fed8 	bl	8001f54 <__aeabi_d2iz>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	9002      	str	r0, [sp, #8]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	0020      	movs	r0, r4
 800c1ac:	0029      	movs	r1, r5
 800c1ae:	f7f4 f94f 	bl	8000450 <__aeabi_dcmplt>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d00b      	beq.n	800c1ce <_dtoa_r+0x16a>
 800c1b6:	9802      	ldr	r0, [sp, #8]
 800c1b8:	f7f5 ff02 	bl	8001fc0 <__aeabi_i2d>
 800c1bc:	002b      	movs	r3, r5
 800c1be:	0022      	movs	r2, r4
 800c1c0:	f7f4 f940 	bl	8000444 <__aeabi_dcmpeq>
 800c1c4:	4243      	negs	r3, r0
 800c1c6:	4158      	adcs	r0, r3
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	1a1b      	subs	r3, r3, r0
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	9316      	str	r3, [sp, #88]	; 0x58
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	2b16      	cmp	r3, #22
 800c1d6:	d80f      	bhi.n	800c1f8 <_dtoa_r+0x194>
 800c1d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c1da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c1dc:	00da      	lsls	r2, r3, #3
 800c1de:	4b84      	ldr	r3, [pc, #528]	; (800c3f0 <_dtoa_r+0x38c>)
 800c1e0:	189b      	adds	r3, r3, r2
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f7f4 f933 	bl	8000450 <__aeabi_dcmplt>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d049      	beq.n	800c282 <_dtoa_r+0x21e>
 800c1ee:	9b02      	ldr	r3, [sp, #8]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	9302      	str	r3, [sp, #8]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	9316      	str	r3, [sp, #88]	; 0x58
 800c1f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c1fa:	1b9e      	subs	r6, r3, r6
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c200:	0033      	movs	r3, r6
 800c202:	3b01      	subs	r3, #1
 800c204:	930d      	str	r3, [sp, #52]	; 0x34
 800c206:	d504      	bpl.n	800c212 <_dtoa_r+0x1ae>
 800c208:	2301      	movs	r3, #1
 800c20a:	1b9b      	subs	r3, r3, r6
 800c20c:	930a      	str	r3, [sp, #40]	; 0x28
 800c20e:	2300      	movs	r3, #0
 800c210:	930d      	str	r3, [sp, #52]	; 0x34
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	db36      	blt.n	800c286 <_dtoa_r+0x222>
 800c218:	9a02      	ldr	r2, [sp, #8]
 800c21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c21c:	4694      	mov	ip, r2
 800c21e:	4463      	add	r3, ip
 800c220:	930d      	str	r3, [sp, #52]	; 0x34
 800c222:	2300      	movs	r3, #0
 800c224:	9215      	str	r2, [sp, #84]	; 0x54
 800c226:	930e      	str	r3, [sp, #56]	; 0x38
 800c228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c22a:	2401      	movs	r4, #1
 800c22c:	2b09      	cmp	r3, #9
 800c22e:	d864      	bhi.n	800c2fa <_dtoa_r+0x296>
 800c230:	2b05      	cmp	r3, #5
 800c232:	dd02      	ble.n	800c23a <_dtoa_r+0x1d6>
 800c234:	2400      	movs	r4, #0
 800c236:	3b04      	subs	r3, #4
 800c238:	9322      	str	r3, [sp, #136]	; 0x88
 800c23a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c23c:	1e98      	subs	r0, r3, #2
 800c23e:	2803      	cmp	r0, #3
 800c240:	d864      	bhi.n	800c30c <_dtoa_r+0x2a8>
 800c242:	f7f3 ff65 	bl	8000110 <__gnu_thumb1_case_uqi>
 800c246:	3829      	.short	0x3829
 800c248:	5836      	.short	0x5836
 800c24a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c24c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c24e:	189e      	adds	r6, r3, r2
 800c250:	4b68      	ldr	r3, [pc, #416]	; (800c3f4 <_dtoa_r+0x390>)
 800c252:	18f2      	adds	r2, r6, r3
 800c254:	2a20      	cmp	r2, #32
 800c256:	dd0f      	ble.n	800c278 <_dtoa_r+0x214>
 800c258:	2340      	movs	r3, #64	; 0x40
 800c25a:	1a9b      	subs	r3, r3, r2
 800c25c:	409d      	lsls	r5, r3
 800c25e:	4b66      	ldr	r3, [pc, #408]	; (800c3f8 <_dtoa_r+0x394>)
 800c260:	9802      	ldr	r0, [sp, #8]
 800c262:	18f3      	adds	r3, r6, r3
 800c264:	40d8      	lsrs	r0, r3
 800c266:	4328      	orrs	r0, r5
 800c268:	f7f5 feda 	bl	8002020 <__aeabi_ui2d>
 800c26c:	2301      	movs	r3, #1
 800c26e:	4c63      	ldr	r4, [pc, #396]	; (800c3fc <_dtoa_r+0x398>)
 800c270:	3e01      	subs	r6, #1
 800c272:	1909      	adds	r1, r1, r4
 800c274:	9318      	str	r3, [sp, #96]	; 0x60
 800c276:	e776      	b.n	800c166 <_dtoa_r+0x102>
 800c278:	2320      	movs	r3, #32
 800c27a:	9802      	ldr	r0, [sp, #8]
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	4098      	lsls	r0, r3
 800c280:	e7f2      	b.n	800c268 <_dtoa_r+0x204>
 800c282:	9016      	str	r0, [sp, #88]	; 0x58
 800c284:	e7b8      	b.n	800c1f8 <_dtoa_r+0x194>
 800c286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c288:	9a02      	ldr	r2, [sp, #8]
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	930a      	str	r3, [sp, #40]	; 0x28
 800c28e:	4253      	negs	r3, r2
 800c290:	930e      	str	r3, [sp, #56]	; 0x38
 800c292:	2300      	movs	r3, #0
 800c294:	9315      	str	r3, [sp, #84]	; 0x54
 800c296:	e7c7      	b.n	800c228 <_dtoa_r+0x1c4>
 800c298:	2300      	movs	r3, #0
 800c29a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c29c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c29e:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	dc13      	bgt.n	800c2ce <_dtoa_r+0x26a>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	001a      	movs	r2, r3
 800c2aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ac:	9307      	str	r3, [sp, #28]
 800c2ae:	9223      	str	r2, [sp, #140]	; 0x8c
 800c2b0:	e00d      	b.n	800c2ce <_dtoa_r+0x26a>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e7f1      	b.n	800c29a <_dtoa_r+0x236>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c2ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2bc:	4694      	mov	ip, r2
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	4463      	add	r3, ip
 800c2c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	9307      	str	r3, [sp, #28]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	dc00      	bgt.n	800c2ce <_dtoa_r+0x26a>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2d2:	6042      	str	r2, [r0, #4]
 800c2d4:	3204      	adds	r2, #4
 800c2d6:	0015      	movs	r5, r2
 800c2d8:	3514      	adds	r5, #20
 800c2da:	6841      	ldr	r1, [r0, #4]
 800c2dc:	429d      	cmp	r5, r3
 800c2de:	d919      	bls.n	800c314 <_dtoa_r+0x2b0>
 800c2e0:	0038      	movs	r0, r7
 800c2e2:	f000 ff37 	bl	800d154 <_Balloc>
 800c2e6:	9006      	str	r0, [sp, #24]
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d117      	bne.n	800c31c <_dtoa_r+0x2b8>
 800c2ec:	21d5      	movs	r1, #213	; 0xd5
 800c2ee:	0002      	movs	r2, r0
 800c2f0:	4b43      	ldr	r3, [pc, #268]	; (800c400 <_dtoa_r+0x39c>)
 800c2f2:	0049      	lsls	r1, r1, #1
 800c2f4:	e6cb      	b.n	800c08e <_dtoa_r+0x2a>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7de      	b.n	800c2b8 <_dtoa_r+0x254>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	940f      	str	r4, [sp, #60]	; 0x3c
 800c2fe:	9322      	str	r3, [sp, #136]	; 0x88
 800c300:	3b01      	subs	r3, #1
 800c302:	930c      	str	r3, [sp, #48]	; 0x30
 800c304:	9307      	str	r3, [sp, #28]
 800c306:	2200      	movs	r2, #0
 800c308:	3313      	adds	r3, #19
 800c30a:	e7d0      	b.n	800c2ae <_dtoa_r+0x24a>
 800c30c:	2301      	movs	r3, #1
 800c30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c310:	3b02      	subs	r3, #2
 800c312:	e7f6      	b.n	800c302 <_dtoa_r+0x29e>
 800c314:	3101      	adds	r1, #1
 800c316:	6041      	str	r1, [r0, #4]
 800c318:	0052      	lsls	r2, r2, #1
 800c31a:	e7dc      	b.n	800c2d6 <_dtoa_r+0x272>
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	9a06      	ldr	r2, [sp, #24]
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	9b07      	ldr	r3, [sp, #28]
 800c324:	2b0e      	cmp	r3, #14
 800c326:	d900      	bls.n	800c32a <_dtoa_r+0x2c6>
 800c328:	e0eb      	b.n	800c502 <_dtoa_r+0x49e>
 800c32a:	2c00      	cmp	r4, #0
 800c32c:	d100      	bne.n	800c330 <_dtoa_r+0x2cc>
 800c32e:	e0e8      	b.n	800c502 <_dtoa_r+0x49e>
 800c330:	9b02      	ldr	r3, [sp, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	dd68      	ble.n	800c408 <_dtoa_r+0x3a4>
 800c336:	001a      	movs	r2, r3
 800c338:	210f      	movs	r1, #15
 800c33a:	4b2d      	ldr	r3, [pc, #180]	; (800c3f0 <_dtoa_r+0x38c>)
 800c33c:	400a      	ands	r2, r1
 800c33e:	00d2      	lsls	r2, r2, #3
 800c340:	189b      	adds	r3, r3, r2
 800c342:	681d      	ldr	r5, [r3, #0]
 800c344:	685e      	ldr	r6, [r3, #4]
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	111c      	asrs	r4, r3, #4
 800c34a:	2302      	movs	r3, #2
 800c34c:	9310      	str	r3, [sp, #64]	; 0x40
 800c34e:	9b02      	ldr	r3, [sp, #8]
 800c350:	05db      	lsls	r3, r3, #23
 800c352:	d50b      	bpl.n	800c36c <_dtoa_r+0x308>
 800c354:	4b2b      	ldr	r3, [pc, #172]	; (800c404 <_dtoa_r+0x3a0>)
 800c356:	400c      	ands	r4, r1
 800c358:	6a1a      	ldr	r2, [r3, #32]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c35e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c360:	f7f4 fbda 	bl	8000b18 <__aeabi_ddiv>
 800c364:	2303      	movs	r3, #3
 800c366:	9008      	str	r0, [sp, #32]
 800c368:	9109      	str	r1, [sp, #36]	; 0x24
 800c36a:	9310      	str	r3, [sp, #64]	; 0x40
 800c36c:	4b25      	ldr	r3, [pc, #148]	; (800c404 <_dtoa_r+0x3a0>)
 800c36e:	9314      	str	r3, [sp, #80]	; 0x50
 800c370:	2c00      	cmp	r4, #0
 800c372:	d108      	bne.n	800c386 <_dtoa_r+0x322>
 800c374:	9808      	ldr	r0, [sp, #32]
 800c376:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c378:	002a      	movs	r2, r5
 800c37a:	0033      	movs	r3, r6
 800c37c:	f7f4 fbcc 	bl	8000b18 <__aeabi_ddiv>
 800c380:	9008      	str	r0, [sp, #32]
 800c382:	9109      	str	r1, [sp, #36]	; 0x24
 800c384:	e05c      	b.n	800c440 <_dtoa_r+0x3dc>
 800c386:	2301      	movs	r3, #1
 800c388:	421c      	tst	r4, r3
 800c38a:	d00b      	beq.n	800c3a4 <_dtoa_r+0x340>
 800c38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c38e:	0028      	movs	r0, r5
 800c390:	3301      	adds	r3, #1
 800c392:	9310      	str	r3, [sp, #64]	; 0x40
 800c394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c396:	0031      	movs	r1, r6
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f7f4 ffbe 	bl	800131c <__aeabi_dmul>
 800c3a0:	0005      	movs	r5, r0
 800c3a2:	000e      	movs	r6, r1
 800c3a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3a6:	1064      	asrs	r4, r4, #1
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	e7e0      	b.n	800c36e <_dtoa_r+0x30a>
 800c3ac:	0800e1f3 	.word	0x0800e1f3
 800c3b0:	0800e20a 	.word	0x0800e20a
 800c3b4:	7ff00000 	.word	0x7ff00000
 800c3b8:	0000270f 	.word	0x0000270f
 800c3bc:	0800e1ef 	.word	0x0800e1ef
 800c3c0:	0800e1f2 	.word	0x0800e1f2
 800c3c4:	0800e0c1 	.word	0x0800e0c1
 800c3c8:	0800e0c2 	.word	0x0800e0c2
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	fffffc01 	.word	0xfffffc01
 800c3d4:	3ff80000 	.word	0x3ff80000
 800c3d8:	636f4361 	.word	0x636f4361
 800c3dc:	3fd287a7 	.word	0x3fd287a7
 800c3e0:	8b60c8b3 	.word	0x8b60c8b3
 800c3e4:	3fc68a28 	.word	0x3fc68a28
 800c3e8:	509f79fb 	.word	0x509f79fb
 800c3ec:	3fd34413 	.word	0x3fd34413
 800c3f0:	0800e360 	.word	0x0800e360
 800c3f4:	00000432 	.word	0x00000432
 800c3f8:	00000412 	.word	0x00000412
 800c3fc:	fe100000 	.word	0xfe100000
 800c400:	0800e265 	.word	0x0800e265
 800c404:	0800e338 	.word	0x0800e338
 800c408:	2302      	movs	r3, #2
 800c40a:	9310      	str	r3, [sp, #64]	; 0x40
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d016      	beq.n	800c440 <_dtoa_r+0x3dc>
 800c412:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c414:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c416:	425c      	negs	r4, r3
 800c418:	230f      	movs	r3, #15
 800c41a:	4ab6      	ldr	r2, [pc, #728]	; (800c6f4 <_dtoa_r+0x690>)
 800c41c:	4023      	ands	r3, r4
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	18d3      	adds	r3, r2, r3
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f7f4 ff79 	bl	800131c <__aeabi_dmul>
 800c42a:	2601      	movs	r6, #1
 800c42c:	2300      	movs	r3, #0
 800c42e:	9008      	str	r0, [sp, #32]
 800c430:	9109      	str	r1, [sp, #36]	; 0x24
 800c432:	4db1      	ldr	r5, [pc, #708]	; (800c6f8 <_dtoa_r+0x694>)
 800c434:	1124      	asrs	r4, r4, #4
 800c436:	2c00      	cmp	r4, #0
 800c438:	d000      	beq.n	800c43c <_dtoa_r+0x3d8>
 800c43a:	e094      	b.n	800c566 <_dtoa_r+0x502>
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d19f      	bne.n	800c380 <_dtoa_r+0x31c>
 800c440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c442:	2b00      	cmp	r3, #0
 800c444:	d100      	bne.n	800c448 <_dtoa_r+0x3e4>
 800c446:	e09b      	b.n	800c580 <_dtoa_r+0x51c>
 800c448:	9c08      	ldr	r4, [sp, #32]
 800c44a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c44c:	2200      	movs	r2, #0
 800c44e:	0020      	movs	r0, r4
 800c450:	0029      	movs	r1, r5
 800c452:	4baa      	ldr	r3, [pc, #680]	; (800c6fc <_dtoa_r+0x698>)
 800c454:	f7f3 fffc 	bl	8000450 <__aeabi_dcmplt>
 800c458:	2800      	cmp	r0, #0
 800c45a:	d100      	bne.n	800c45e <_dtoa_r+0x3fa>
 800c45c:	e090      	b.n	800c580 <_dtoa_r+0x51c>
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d100      	bne.n	800c466 <_dtoa_r+0x402>
 800c464:	e08c      	b.n	800c580 <_dtoa_r+0x51c>
 800c466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c468:	2b00      	cmp	r3, #0
 800c46a:	dd46      	ble.n	800c4fa <_dtoa_r+0x496>
 800c46c:	9b02      	ldr	r3, [sp, #8]
 800c46e:	2200      	movs	r2, #0
 800c470:	0020      	movs	r0, r4
 800c472:	0029      	movs	r1, r5
 800c474:	1e5e      	subs	r6, r3, #1
 800c476:	4ba2      	ldr	r3, [pc, #648]	; (800c700 <_dtoa_r+0x69c>)
 800c478:	f7f4 ff50 	bl	800131c <__aeabi_dmul>
 800c47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c47e:	9008      	str	r0, [sp, #32]
 800c480:	9109      	str	r1, [sp, #36]	; 0x24
 800c482:	3301      	adds	r3, #1
 800c484:	9310      	str	r3, [sp, #64]	; 0x40
 800c486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c488:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c48a:	9c08      	ldr	r4, [sp, #32]
 800c48c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c48e:	9314      	str	r3, [sp, #80]	; 0x50
 800c490:	f7f5 fd96 	bl	8001fc0 <__aeabi_i2d>
 800c494:	0022      	movs	r2, r4
 800c496:	002b      	movs	r3, r5
 800c498:	f7f4 ff40 	bl	800131c <__aeabi_dmul>
 800c49c:	2200      	movs	r2, #0
 800c49e:	4b99      	ldr	r3, [pc, #612]	; (800c704 <_dtoa_r+0x6a0>)
 800c4a0:	f7f3 fffe 	bl	80004a0 <__aeabi_dadd>
 800c4a4:	9010      	str	r0, [sp, #64]	; 0x40
 800c4a6:	9111      	str	r1, [sp, #68]	; 0x44
 800c4a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ac:	9208      	str	r2, [sp, #32]
 800c4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b0:	4a95      	ldr	r2, [pc, #596]	; (800c708 <_dtoa_r+0x6a4>)
 800c4b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4b4:	4694      	mov	ip, r2
 800c4b6:	4463      	add	r3, ip
 800c4b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d161      	bne.n	800c586 <_dtoa_r+0x522>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	0020      	movs	r0, r4
 800c4c6:	0029      	movs	r1, r5
 800c4c8:	4b90      	ldr	r3, [pc, #576]	; (800c70c <_dtoa_r+0x6a8>)
 800c4ca:	f7f5 f993 	bl	80017f4 <__aeabi_dsub>
 800c4ce:	9a08      	ldr	r2, [sp, #32]
 800c4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4d2:	0004      	movs	r4, r0
 800c4d4:	000d      	movs	r5, r1
 800c4d6:	f7f3 ffcf 	bl	8000478 <__aeabi_dcmpgt>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d000      	beq.n	800c4e0 <_dtoa_r+0x47c>
 800c4de:	e2af      	b.n	800ca40 <_dtoa_r+0x9dc>
 800c4e0:	488b      	ldr	r0, [pc, #556]	; (800c710 <_dtoa_r+0x6ac>)
 800c4e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4e4:	4684      	mov	ip, r0
 800c4e6:	4461      	add	r1, ip
 800c4e8:	000b      	movs	r3, r1
 800c4ea:	0020      	movs	r0, r4
 800c4ec:	0029      	movs	r1, r5
 800c4ee:	9a08      	ldr	r2, [sp, #32]
 800c4f0:	f7f3 ffae 	bl	8000450 <__aeabi_dcmplt>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d000      	beq.n	800c4fa <_dtoa_r+0x496>
 800c4f8:	e29f      	b.n	800ca3a <_dtoa_r+0x9d6>
 800c4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c4fe:	9308      	str	r3, [sp, #32]
 800c500:	9409      	str	r4, [sp, #36]	; 0x24
 800c502:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c504:	2b00      	cmp	r3, #0
 800c506:	da00      	bge.n	800c50a <_dtoa_r+0x4a6>
 800c508:	e172      	b.n	800c7f0 <_dtoa_r+0x78c>
 800c50a:	9a02      	ldr	r2, [sp, #8]
 800c50c:	2a0e      	cmp	r2, #14
 800c50e:	dd00      	ble.n	800c512 <_dtoa_r+0x4ae>
 800c510:	e16e      	b.n	800c7f0 <_dtoa_r+0x78c>
 800c512:	4b78      	ldr	r3, [pc, #480]	; (800c6f4 <_dtoa_r+0x690>)
 800c514:	00d2      	lsls	r2, r2, #3
 800c516:	189b      	adds	r3, r3, r2
 800c518:	685c      	ldr	r4, [r3, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	930a      	str	r3, [sp, #40]	; 0x28
 800c51e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c522:	2b00      	cmp	r3, #0
 800c524:	db00      	blt.n	800c528 <_dtoa_r+0x4c4>
 800c526:	e0f7      	b.n	800c718 <_dtoa_r+0x6b4>
 800c528:	9b07      	ldr	r3, [sp, #28]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	dd00      	ble.n	800c530 <_dtoa_r+0x4cc>
 800c52e:	e0f3      	b.n	800c718 <_dtoa_r+0x6b4>
 800c530:	d000      	beq.n	800c534 <_dtoa_r+0x4d0>
 800c532:	e282      	b.n	800ca3a <_dtoa_r+0x9d6>
 800c534:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c538:	2200      	movs	r2, #0
 800c53a:	4b74      	ldr	r3, [pc, #464]	; (800c70c <_dtoa_r+0x6a8>)
 800c53c:	f7f4 feee 	bl	800131c <__aeabi_dmul>
 800c540:	9a08      	ldr	r2, [sp, #32]
 800c542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c544:	f7f3 ffa2 	bl	800048c <__aeabi_dcmpge>
 800c548:	9e07      	ldr	r6, [sp, #28]
 800c54a:	0035      	movs	r5, r6
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d000      	beq.n	800c552 <_dtoa_r+0x4ee>
 800c550:	e259      	b.n	800ca06 <_dtoa_r+0x9a2>
 800c552:	9b06      	ldr	r3, [sp, #24]
 800c554:	9a06      	ldr	r2, [sp, #24]
 800c556:	3301      	adds	r3, #1
 800c558:	9308      	str	r3, [sp, #32]
 800c55a:	2331      	movs	r3, #49	; 0x31
 800c55c:	7013      	strb	r3, [r2, #0]
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	3301      	adds	r3, #1
 800c562:	9302      	str	r3, [sp, #8]
 800c564:	e254      	b.n	800ca10 <_dtoa_r+0x9ac>
 800c566:	4234      	tst	r4, r6
 800c568:	d007      	beq.n	800c57a <_dtoa_r+0x516>
 800c56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c56c:	3301      	adds	r3, #1
 800c56e:	9310      	str	r3, [sp, #64]	; 0x40
 800c570:	682a      	ldr	r2, [r5, #0]
 800c572:	686b      	ldr	r3, [r5, #4]
 800c574:	f7f4 fed2 	bl	800131c <__aeabi_dmul>
 800c578:	0033      	movs	r3, r6
 800c57a:	1064      	asrs	r4, r4, #1
 800c57c:	3508      	adds	r5, #8
 800c57e:	e75a      	b.n	800c436 <_dtoa_r+0x3d2>
 800c580:	9e02      	ldr	r6, [sp, #8]
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	e780      	b.n	800c488 <_dtoa_r+0x424>
 800c586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c58a:	1e5a      	subs	r2, r3, #1
 800c58c:	4b59      	ldr	r3, [pc, #356]	; (800c6f4 <_dtoa_r+0x690>)
 800c58e:	00d2      	lsls	r2, r2, #3
 800c590:	189b      	adds	r3, r3, r2
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2900      	cmp	r1, #0
 800c598:	d051      	beq.n	800c63e <_dtoa_r+0x5da>
 800c59a:	2000      	movs	r0, #0
 800c59c:	495d      	ldr	r1, [pc, #372]	; (800c714 <_dtoa_r+0x6b0>)
 800c59e:	f7f4 fabb 	bl	8000b18 <__aeabi_ddiv>
 800c5a2:	9a08      	ldr	r2, [sp, #32]
 800c5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a6:	f7f5 f925 	bl	80017f4 <__aeabi_dsub>
 800c5aa:	9a06      	ldr	r2, [sp, #24]
 800c5ac:	9b06      	ldr	r3, [sp, #24]
 800c5ae:	4694      	mov	ip, r2
 800c5b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5b4:	9010      	str	r0, [sp, #64]	; 0x40
 800c5b6:	9111      	str	r1, [sp, #68]	; 0x44
 800c5b8:	4463      	add	r3, ip
 800c5ba:	9319      	str	r3, [sp, #100]	; 0x64
 800c5bc:	0029      	movs	r1, r5
 800c5be:	0020      	movs	r0, r4
 800c5c0:	f7f5 fcc8 	bl	8001f54 <__aeabi_d2iz>
 800c5c4:	9014      	str	r0, [sp, #80]	; 0x50
 800c5c6:	f7f5 fcfb 	bl	8001fc0 <__aeabi_i2d>
 800c5ca:	0002      	movs	r2, r0
 800c5cc:	000b      	movs	r3, r1
 800c5ce:	0020      	movs	r0, r4
 800c5d0:	0029      	movs	r1, r5
 800c5d2:	f7f5 f90f 	bl	80017f4 <__aeabi_dsub>
 800c5d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5da:	3301      	adds	r3, #1
 800c5dc:	9308      	str	r3, [sp, #32]
 800c5de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5e0:	0004      	movs	r4, r0
 800c5e2:	3330      	adds	r3, #48	; 0x30
 800c5e4:	7013      	strb	r3, [r2, #0]
 800c5e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ea:	000d      	movs	r5, r1
 800c5ec:	f7f3 ff30 	bl	8000450 <__aeabi_dcmplt>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d175      	bne.n	800c6e0 <_dtoa_r+0x67c>
 800c5f4:	0022      	movs	r2, r4
 800c5f6:	002b      	movs	r3, r5
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	4940      	ldr	r1, [pc, #256]	; (800c6fc <_dtoa_r+0x698>)
 800c5fc:	f7f5 f8fa 	bl	80017f4 <__aeabi_dsub>
 800c600:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c604:	f7f3 ff24 	bl	8000450 <__aeabi_dcmplt>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d000      	beq.n	800c60e <_dtoa_r+0x5aa>
 800c60c:	e0d2      	b.n	800c7b4 <_dtoa_r+0x750>
 800c60e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c610:	9a08      	ldr	r2, [sp, #32]
 800c612:	4293      	cmp	r3, r2
 800c614:	d100      	bne.n	800c618 <_dtoa_r+0x5b4>
 800c616:	e770      	b.n	800c4fa <_dtoa_r+0x496>
 800c618:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c61a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c61c:	2200      	movs	r2, #0
 800c61e:	4b38      	ldr	r3, [pc, #224]	; (800c700 <_dtoa_r+0x69c>)
 800c620:	f7f4 fe7c 	bl	800131c <__aeabi_dmul>
 800c624:	4b36      	ldr	r3, [pc, #216]	; (800c700 <_dtoa_r+0x69c>)
 800c626:	9010      	str	r0, [sp, #64]	; 0x40
 800c628:	9111      	str	r1, [sp, #68]	; 0x44
 800c62a:	2200      	movs	r2, #0
 800c62c:	0020      	movs	r0, r4
 800c62e:	0029      	movs	r1, r5
 800c630:	f7f4 fe74 	bl	800131c <__aeabi_dmul>
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	0004      	movs	r4, r0
 800c638:	000d      	movs	r5, r1
 800c63a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c63c:	e7be      	b.n	800c5bc <_dtoa_r+0x558>
 800c63e:	9808      	ldr	r0, [sp, #32]
 800c640:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c642:	f7f4 fe6b 	bl	800131c <__aeabi_dmul>
 800c646:	9a06      	ldr	r2, [sp, #24]
 800c648:	9b06      	ldr	r3, [sp, #24]
 800c64a:	4694      	mov	ip, r2
 800c64c:	9308      	str	r3, [sp, #32]
 800c64e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c650:	9010      	str	r0, [sp, #64]	; 0x40
 800c652:	9111      	str	r1, [sp, #68]	; 0x44
 800c654:	4463      	add	r3, ip
 800c656:	9319      	str	r3, [sp, #100]	; 0x64
 800c658:	0029      	movs	r1, r5
 800c65a:	0020      	movs	r0, r4
 800c65c:	f7f5 fc7a 	bl	8001f54 <__aeabi_d2iz>
 800c660:	9017      	str	r0, [sp, #92]	; 0x5c
 800c662:	f7f5 fcad 	bl	8001fc0 <__aeabi_i2d>
 800c666:	0002      	movs	r2, r0
 800c668:	000b      	movs	r3, r1
 800c66a:	0020      	movs	r0, r4
 800c66c:	0029      	movs	r1, r5
 800c66e:	f7f5 f8c1 	bl	80017f4 <__aeabi_dsub>
 800c672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c674:	9a08      	ldr	r2, [sp, #32]
 800c676:	3330      	adds	r3, #48	; 0x30
 800c678:	7013      	strb	r3, [r2, #0]
 800c67a:	0013      	movs	r3, r2
 800c67c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c67e:	3301      	adds	r3, #1
 800c680:	0004      	movs	r4, r0
 800c682:	000d      	movs	r5, r1
 800c684:	9308      	str	r3, [sp, #32]
 800c686:	4293      	cmp	r3, r2
 800c688:	d12c      	bne.n	800c6e4 <_dtoa_r+0x680>
 800c68a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c68c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c68e:	9a06      	ldr	r2, [sp, #24]
 800c690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c692:	4694      	mov	ip, r2
 800c694:	4463      	add	r3, ip
 800c696:	2200      	movs	r2, #0
 800c698:	9308      	str	r3, [sp, #32]
 800c69a:	4b1e      	ldr	r3, [pc, #120]	; (800c714 <_dtoa_r+0x6b0>)
 800c69c:	f7f3 ff00 	bl	80004a0 <__aeabi_dadd>
 800c6a0:	0002      	movs	r2, r0
 800c6a2:	000b      	movs	r3, r1
 800c6a4:	0020      	movs	r0, r4
 800c6a6:	0029      	movs	r1, r5
 800c6a8:	f7f3 fee6 	bl	8000478 <__aeabi_dcmpgt>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d000      	beq.n	800c6b2 <_dtoa_r+0x64e>
 800c6b0:	e080      	b.n	800c7b4 <_dtoa_r+0x750>
 800c6b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	4916      	ldr	r1, [pc, #88]	; (800c714 <_dtoa_r+0x6b0>)
 800c6ba:	f7f5 f89b 	bl	80017f4 <__aeabi_dsub>
 800c6be:	0002      	movs	r2, r0
 800c6c0:	000b      	movs	r3, r1
 800c6c2:	0020      	movs	r0, r4
 800c6c4:	0029      	movs	r1, r5
 800c6c6:	f7f3 fec3 	bl	8000450 <__aeabi_dcmplt>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d100      	bne.n	800c6d0 <_dtoa_r+0x66c>
 800c6ce:	e714      	b.n	800c4fa <_dtoa_r+0x496>
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	001a      	movs	r2, r3
 800c6d4:	3a01      	subs	r2, #1
 800c6d6:	9208      	str	r2, [sp, #32]
 800c6d8:	7812      	ldrb	r2, [r2, #0]
 800c6da:	2a30      	cmp	r2, #48	; 0x30
 800c6dc:	d0f8      	beq.n	800c6d0 <_dtoa_r+0x66c>
 800c6de:	9308      	str	r3, [sp, #32]
 800c6e0:	9602      	str	r6, [sp, #8]
 800c6e2:	e055      	b.n	800c790 <_dtoa_r+0x72c>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <_dtoa_r+0x69c>)
 800c6e8:	f7f4 fe18 	bl	800131c <__aeabi_dmul>
 800c6ec:	0004      	movs	r4, r0
 800c6ee:	000d      	movs	r5, r1
 800c6f0:	e7b2      	b.n	800c658 <_dtoa_r+0x5f4>
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	0800e360 	.word	0x0800e360
 800c6f8:	0800e338 	.word	0x0800e338
 800c6fc:	3ff00000 	.word	0x3ff00000
 800c700:	40240000 	.word	0x40240000
 800c704:	401c0000 	.word	0x401c0000
 800c708:	fcc00000 	.word	0xfcc00000
 800c70c:	40140000 	.word	0x40140000
 800c710:	7cc00000 	.word	0x7cc00000
 800c714:	3fe00000 	.word	0x3fe00000
 800c718:	9b07      	ldr	r3, [sp, #28]
 800c71a:	9e06      	ldr	r6, [sp, #24]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	199b      	adds	r3, r3, r6
 800c720:	930c      	str	r3, [sp, #48]	; 0x30
 800c722:	9c08      	ldr	r4, [sp, #32]
 800c724:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c72a:	0020      	movs	r0, r4
 800c72c:	0029      	movs	r1, r5
 800c72e:	f7f4 f9f3 	bl	8000b18 <__aeabi_ddiv>
 800c732:	f7f5 fc0f 	bl	8001f54 <__aeabi_d2iz>
 800c736:	9007      	str	r0, [sp, #28]
 800c738:	f7f5 fc42 	bl	8001fc0 <__aeabi_i2d>
 800c73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c740:	f7f4 fdec 	bl	800131c <__aeabi_dmul>
 800c744:	0002      	movs	r2, r0
 800c746:	000b      	movs	r3, r1
 800c748:	0020      	movs	r0, r4
 800c74a:	0029      	movs	r1, r5
 800c74c:	f7f5 f852 	bl	80017f4 <__aeabi_dsub>
 800c750:	0033      	movs	r3, r6
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	3601      	adds	r6, #1
 800c756:	3230      	adds	r2, #48	; 0x30
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c75c:	9608      	str	r6, [sp, #32]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d139      	bne.n	800c7d6 <_dtoa_r+0x772>
 800c762:	0002      	movs	r2, r0
 800c764:	000b      	movs	r3, r1
 800c766:	f7f3 fe9b 	bl	80004a0 <__aeabi_dadd>
 800c76a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c76e:	0004      	movs	r4, r0
 800c770:	000d      	movs	r5, r1
 800c772:	f7f3 fe81 	bl	8000478 <__aeabi_dcmpgt>
 800c776:	2800      	cmp	r0, #0
 800c778:	d11b      	bne.n	800c7b2 <_dtoa_r+0x74e>
 800c77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c77e:	0020      	movs	r0, r4
 800c780:	0029      	movs	r1, r5
 800c782:	f7f3 fe5f 	bl	8000444 <__aeabi_dcmpeq>
 800c786:	2800      	cmp	r0, #0
 800c788:	d002      	beq.n	800c790 <_dtoa_r+0x72c>
 800c78a:	9b07      	ldr	r3, [sp, #28]
 800c78c:	07db      	lsls	r3, r3, #31
 800c78e:	d410      	bmi.n	800c7b2 <_dtoa_r+0x74e>
 800c790:	0038      	movs	r0, r7
 800c792:	9905      	ldr	r1, [sp, #20]
 800c794:	f000 fd22 	bl	800d1dc <_Bfree>
 800c798:	2300      	movs	r3, #0
 800c79a:	9a08      	ldr	r2, [sp, #32]
 800c79c:	9802      	ldr	r0, [sp, #8]
 800c79e:	7013      	strb	r3, [r2, #0]
 800c7a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	6018      	str	r0, [r3, #0]
 800c7a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d100      	bne.n	800c7ae <_dtoa_r+0x74a>
 800c7ac:	e4a6      	b.n	800c0fc <_dtoa_r+0x98>
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	e4a4      	b.n	800c0fc <_dtoa_r+0x98>
 800c7b2:	9e02      	ldr	r6, [sp, #8]
 800c7b4:	9b08      	ldr	r3, [sp, #32]
 800c7b6:	9308      	str	r3, [sp, #32]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	2a39      	cmp	r2, #57	; 0x39
 800c7be:	d106      	bne.n	800c7ce <_dtoa_r+0x76a>
 800c7c0:	9a06      	ldr	r2, [sp, #24]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d1f7      	bne.n	800c7b6 <_dtoa_r+0x752>
 800c7c6:	2230      	movs	r2, #48	; 0x30
 800c7c8:	9906      	ldr	r1, [sp, #24]
 800c7ca:	3601      	adds	r6, #1
 800c7cc:	700a      	strb	r2, [r1, #0]
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	3201      	adds	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	e784      	b.n	800c6e0 <_dtoa_r+0x67c>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4baa      	ldr	r3, [pc, #680]	; (800ca84 <_dtoa_r+0xa20>)
 800c7da:	f7f4 fd9f 	bl	800131c <__aeabi_dmul>
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	0004      	movs	r4, r0
 800c7e4:	000d      	movs	r5, r1
 800c7e6:	f7f3 fe2d 	bl	8000444 <__aeabi_dcmpeq>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d09b      	beq.n	800c726 <_dtoa_r+0x6c2>
 800c7ee:	e7cf      	b.n	800c790 <_dtoa_r+0x72c>
 800c7f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c7f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c7f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c7f6:	2d00      	cmp	r5, #0
 800c7f8:	d012      	beq.n	800c820 <_dtoa_r+0x7bc>
 800c7fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c7fc:	2a01      	cmp	r2, #1
 800c7fe:	dc66      	bgt.n	800c8ce <_dtoa_r+0x86a>
 800c800:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c802:	2a00      	cmp	r2, #0
 800c804:	d05d      	beq.n	800c8c2 <_dtoa_r+0x85e>
 800c806:	4aa0      	ldr	r2, [pc, #640]	; (800ca88 <_dtoa_r+0xa24>)
 800c808:	189b      	adds	r3, r3, r2
 800c80a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c80c:	2101      	movs	r1, #1
 800c80e:	18d2      	adds	r2, r2, r3
 800c810:	920a      	str	r2, [sp, #40]	; 0x28
 800c812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c814:	0038      	movs	r0, r7
 800c816:	18d3      	adds	r3, r2, r3
 800c818:	930d      	str	r3, [sp, #52]	; 0x34
 800c81a:	f000 fd8f 	bl	800d33c <__i2b>
 800c81e:	0005      	movs	r5, r0
 800c820:	2c00      	cmp	r4, #0
 800c822:	dd0e      	ble.n	800c842 <_dtoa_r+0x7de>
 800c824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd0b      	ble.n	800c842 <_dtoa_r+0x7de>
 800c82a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c82c:	0023      	movs	r3, r4
 800c82e:	4294      	cmp	r4, r2
 800c830:	dd00      	ble.n	800c834 <_dtoa_r+0x7d0>
 800c832:	0013      	movs	r3, r2
 800c834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c836:	1ae4      	subs	r4, r4, r3
 800c838:	1ad2      	subs	r2, r2, r3
 800c83a:	920a      	str	r2, [sp, #40]	; 0x28
 800c83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	930d      	str	r3, [sp, #52]	; 0x34
 800c842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c844:	2b00      	cmp	r3, #0
 800c846:	d01f      	beq.n	800c888 <_dtoa_r+0x824>
 800c848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d054      	beq.n	800c8f8 <_dtoa_r+0x894>
 800c84e:	2e00      	cmp	r6, #0
 800c850:	dd11      	ble.n	800c876 <_dtoa_r+0x812>
 800c852:	0029      	movs	r1, r5
 800c854:	0032      	movs	r2, r6
 800c856:	0038      	movs	r0, r7
 800c858:	f000 fe36 	bl	800d4c8 <__pow5mult>
 800c85c:	9a05      	ldr	r2, [sp, #20]
 800c85e:	0001      	movs	r1, r0
 800c860:	0005      	movs	r5, r0
 800c862:	0038      	movs	r0, r7
 800c864:	f000 fd80 	bl	800d368 <__multiply>
 800c868:	9905      	ldr	r1, [sp, #20]
 800c86a:	9014      	str	r0, [sp, #80]	; 0x50
 800c86c:	0038      	movs	r0, r7
 800c86e:	f000 fcb5 	bl	800d1dc <_Bfree>
 800c872:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c878:	1b9a      	subs	r2, r3, r6
 800c87a:	42b3      	cmp	r3, r6
 800c87c:	d004      	beq.n	800c888 <_dtoa_r+0x824>
 800c87e:	0038      	movs	r0, r7
 800c880:	9905      	ldr	r1, [sp, #20]
 800c882:	f000 fe21 	bl	800d4c8 <__pow5mult>
 800c886:	9005      	str	r0, [sp, #20]
 800c888:	2101      	movs	r1, #1
 800c88a:	0038      	movs	r0, r7
 800c88c:	f000 fd56 	bl	800d33c <__i2b>
 800c890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c892:	0006      	movs	r6, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd31      	ble.n	800c8fc <_dtoa_r+0x898>
 800c898:	001a      	movs	r2, r3
 800c89a:	0001      	movs	r1, r0
 800c89c:	0038      	movs	r0, r7
 800c89e:	f000 fe13 	bl	800d4c8 <__pow5mult>
 800c8a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8a4:	0006      	movs	r6, r0
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	dd2d      	ble.n	800c906 <_dtoa_r+0x8a2>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ae:	6933      	ldr	r3, [r6, #16]
 800c8b0:	3303      	adds	r3, #3
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	18f3      	adds	r3, r6, r3
 800c8b6:	6858      	ldr	r0, [r3, #4]
 800c8b8:	f000 fcf8 	bl	800d2ac <__hi0bits>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	1a18      	subs	r0, r3, r0
 800c8c0:	e039      	b.n	800c936 <_dtoa_r+0x8d2>
 800c8c2:	2336      	movs	r3, #54	; 0x36
 800c8c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c8c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c8c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c8ca:	1a9b      	subs	r3, r3, r2
 800c8cc:	e79d      	b.n	800c80a <_dtoa_r+0x7a6>
 800c8ce:	9b07      	ldr	r3, [sp, #28]
 800c8d0:	1e5e      	subs	r6, r3, #1
 800c8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8d4:	42b3      	cmp	r3, r6
 800c8d6:	db07      	blt.n	800c8e8 <_dtoa_r+0x884>
 800c8d8:	1b9e      	subs	r6, r3, r6
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	da93      	bge.n	800c80a <_dtoa_r+0x7a6>
 800c8e2:	1ae4      	subs	r4, r4, r3
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e790      	b.n	800c80a <_dtoa_r+0x7a6>
 800c8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c8ec:	1af3      	subs	r3, r6, r3
 800c8ee:	18d3      	adds	r3, r2, r3
 800c8f0:	960e      	str	r6, [sp, #56]	; 0x38
 800c8f2:	9315      	str	r3, [sp, #84]	; 0x54
 800c8f4:	2600      	movs	r6, #0
 800c8f6:	e7f0      	b.n	800c8da <_dtoa_r+0x876>
 800c8f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8fa:	e7c0      	b.n	800c87e <_dtoa_r+0x81a>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	930e      	str	r3, [sp, #56]	; 0x38
 800c900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c902:	2b01      	cmp	r3, #1
 800c904:	dc13      	bgt.n	800c92e <_dtoa_r+0x8ca>
 800c906:	2300      	movs	r3, #0
 800c908:	930e      	str	r3, [sp, #56]	; 0x38
 800c90a:	9b08      	ldr	r3, [sp, #32]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10e      	bne.n	800c92e <_dtoa_r+0x8ca>
 800c910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c912:	031b      	lsls	r3, r3, #12
 800c914:	d10b      	bne.n	800c92e <_dtoa_r+0x8ca>
 800c916:	4b5d      	ldr	r3, [pc, #372]	; (800ca8c <_dtoa_r+0xa28>)
 800c918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c91a:	4213      	tst	r3, r2
 800c91c:	d007      	beq.n	800c92e <_dtoa_r+0x8ca>
 800c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c920:	3301      	adds	r3, #1
 800c922:	930a      	str	r3, [sp, #40]	; 0x28
 800c924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c926:	3301      	adds	r3, #1
 800c928:	930d      	str	r3, [sp, #52]	; 0x34
 800c92a:	2301      	movs	r3, #1
 800c92c:	930e      	str	r3, [sp, #56]	; 0x38
 800c92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c930:	2001      	movs	r0, #1
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1bb      	bne.n	800c8ae <_dtoa_r+0x84a>
 800c936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c938:	221f      	movs	r2, #31
 800c93a:	1818      	adds	r0, r3, r0
 800c93c:	0003      	movs	r3, r0
 800c93e:	4013      	ands	r3, r2
 800c940:	4210      	tst	r0, r2
 800c942:	d046      	beq.n	800c9d2 <_dtoa_r+0x96e>
 800c944:	3201      	adds	r2, #1
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	2a04      	cmp	r2, #4
 800c94a:	dd3f      	ble.n	800c9cc <_dtoa_r+0x968>
 800c94c:	221c      	movs	r2, #28
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c952:	18e4      	adds	r4, r4, r3
 800c954:	18d2      	adds	r2, r2, r3
 800c956:	920a      	str	r2, [sp, #40]	; 0x28
 800c958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c95a:	18d3      	adds	r3, r2, r3
 800c95c:	930d      	str	r3, [sp, #52]	; 0x34
 800c95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c960:	2b00      	cmp	r3, #0
 800c962:	dd05      	ble.n	800c970 <_dtoa_r+0x90c>
 800c964:	001a      	movs	r2, r3
 800c966:	0038      	movs	r0, r7
 800c968:	9905      	ldr	r1, [sp, #20]
 800c96a:	f000 fe09 	bl	800d580 <__lshift>
 800c96e:	9005      	str	r0, [sp, #20]
 800c970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c972:	2b00      	cmp	r3, #0
 800c974:	dd05      	ble.n	800c982 <_dtoa_r+0x91e>
 800c976:	0031      	movs	r1, r6
 800c978:	001a      	movs	r2, r3
 800c97a:	0038      	movs	r0, r7
 800c97c:	f000 fe00 	bl	800d580 <__lshift>
 800c980:	0006      	movs	r6, r0
 800c982:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c984:	2b00      	cmp	r3, #0
 800c986:	d026      	beq.n	800c9d6 <_dtoa_r+0x972>
 800c988:	0031      	movs	r1, r6
 800c98a:	9805      	ldr	r0, [sp, #20]
 800c98c:	f000 fe66 	bl	800d65c <__mcmp>
 800c990:	2800      	cmp	r0, #0
 800c992:	da20      	bge.n	800c9d6 <_dtoa_r+0x972>
 800c994:	9b02      	ldr	r3, [sp, #8]
 800c996:	220a      	movs	r2, #10
 800c998:	3b01      	subs	r3, #1
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	0038      	movs	r0, r7
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9905      	ldr	r1, [sp, #20]
 800c9a2:	f000 fc3f 	bl	800d224 <__multadd>
 800c9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9a8:	9005      	str	r0, [sp, #20]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d100      	bne.n	800c9b0 <_dtoa_r+0x94c>
 800c9ae:	e166      	b.n	800cc7e <_dtoa_r+0xc1a>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	0029      	movs	r1, r5
 800c9b4:	220a      	movs	r2, #10
 800c9b6:	0038      	movs	r0, r7
 800c9b8:	f000 fc34 	bl	800d224 <__multadd>
 800c9bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9be:	0005      	movs	r5, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dc47      	bgt.n	800ca54 <_dtoa_r+0x9f0>
 800c9c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	dc0d      	bgt.n	800c9e6 <_dtoa_r+0x982>
 800c9ca:	e043      	b.n	800ca54 <_dtoa_r+0x9f0>
 800c9cc:	2a04      	cmp	r2, #4
 800c9ce:	d0c6      	beq.n	800c95e <_dtoa_r+0x8fa>
 800c9d0:	0013      	movs	r3, r2
 800c9d2:	331c      	adds	r3, #28
 800c9d4:	e7bc      	b.n	800c950 <_dtoa_r+0x8ec>
 800c9d6:	9b07      	ldr	r3, [sp, #28]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dc35      	bgt.n	800ca48 <_dtoa_r+0x9e4>
 800c9dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	dd32      	ble.n	800ca48 <_dtoa_r+0x9e4>
 800c9e2:	9b07      	ldr	r3, [sp, #28]
 800c9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10c      	bne.n	800ca06 <_dtoa_r+0x9a2>
 800c9ec:	0031      	movs	r1, r6
 800c9ee:	2205      	movs	r2, #5
 800c9f0:	0038      	movs	r0, r7
 800c9f2:	f000 fc17 	bl	800d224 <__multadd>
 800c9f6:	0006      	movs	r6, r0
 800c9f8:	0001      	movs	r1, r0
 800c9fa:	9805      	ldr	r0, [sp, #20]
 800c9fc:	f000 fe2e 	bl	800d65c <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	dd00      	ble.n	800ca06 <_dtoa_r+0x9a2>
 800ca04:	e5a5      	b.n	800c552 <_dtoa_r+0x4ee>
 800ca06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	9302      	str	r3, [sp, #8]
 800ca0c:	9b06      	ldr	r3, [sp, #24]
 800ca0e:	9308      	str	r3, [sp, #32]
 800ca10:	2400      	movs	r4, #0
 800ca12:	0031      	movs	r1, r6
 800ca14:	0038      	movs	r0, r7
 800ca16:	f000 fbe1 	bl	800d1dc <_Bfree>
 800ca1a:	2d00      	cmp	r5, #0
 800ca1c:	d100      	bne.n	800ca20 <_dtoa_r+0x9bc>
 800ca1e:	e6b7      	b.n	800c790 <_dtoa_r+0x72c>
 800ca20:	2c00      	cmp	r4, #0
 800ca22:	d005      	beq.n	800ca30 <_dtoa_r+0x9cc>
 800ca24:	42ac      	cmp	r4, r5
 800ca26:	d003      	beq.n	800ca30 <_dtoa_r+0x9cc>
 800ca28:	0021      	movs	r1, r4
 800ca2a:	0038      	movs	r0, r7
 800ca2c:	f000 fbd6 	bl	800d1dc <_Bfree>
 800ca30:	0029      	movs	r1, r5
 800ca32:	0038      	movs	r0, r7
 800ca34:	f000 fbd2 	bl	800d1dc <_Bfree>
 800ca38:	e6aa      	b.n	800c790 <_dtoa_r+0x72c>
 800ca3a:	2600      	movs	r6, #0
 800ca3c:	0035      	movs	r5, r6
 800ca3e:	e7e2      	b.n	800ca06 <_dtoa_r+0x9a2>
 800ca40:	9602      	str	r6, [sp, #8]
 800ca42:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ca44:	0035      	movs	r5, r6
 800ca46:	e584      	b.n	800c552 <_dtoa_r+0x4ee>
 800ca48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d100      	bne.n	800ca50 <_dtoa_r+0x9ec>
 800ca4e:	e0ce      	b.n	800cbee <_dtoa_r+0xb8a>
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	930c      	str	r3, [sp, #48]	; 0x30
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	dd05      	ble.n	800ca64 <_dtoa_r+0xa00>
 800ca58:	0029      	movs	r1, r5
 800ca5a:	0022      	movs	r2, r4
 800ca5c:	0038      	movs	r0, r7
 800ca5e:	f000 fd8f 	bl	800d580 <__lshift>
 800ca62:	0005      	movs	r5, r0
 800ca64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca66:	0028      	movs	r0, r5
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d022      	beq.n	800cab2 <_dtoa_r+0xa4e>
 800ca6c:	0038      	movs	r0, r7
 800ca6e:	6869      	ldr	r1, [r5, #4]
 800ca70:	f000 fb70 	bl	800d154 <_Balloc>
 800ca74:	1e04      	subs	r4, r0, #0
 800ca76:	d10f      	bne.n	800ca98 <_dtoa_r+0xa34>
 800ca78:	0002      	movs	r2, r0
 800ca7a:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <_dtoa_r+0xa2c>)
 800ca7c:	4905      	ldr	r1, [pc, #20]	; (800ca94 <_dtoa_r+0xa30>)
 800ca7e:	f7ff fb06 	bl	800c08e <_dtoa_r+0x2a>
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	40240000 	.word	0x40240000
 800ca88:	00000433 	.word	0x00000433
 800ca8c:	7ff00000 	.word	0x7ff00000
 800ca90:	0800e265 	.word	0x0800e265
 800ca94:	000002ea 	.word	0x000002ea
 800ca98:	0029      	movs	r1, r5
 800ca9a:	692b      	ldr	r3, [r5, #16]
 800ca9c:	310c      	adds	r1, #12
 800ca9e:	1c9a      	adds	r2, r3, #2
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	300c      	adds	r0, #12
 800caa4:	f7fe fa7c 	bl	800afa0 <memcpy>
 800caa8:	2201      	movs	r2, #1
 800caaa:	0021      	movs	r1, r4
 800caac:	0038      	movs	r0, r7
 800caae:	f000 fd67 	bl	800d580 <__lshift>
 800cab2:	9b06      	ldr	r3, [sp, #24]
 800cab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cab6:	930a      	str	r3, [sp, #40]	; 0x28
 800cab8:	3b01      	subs	r3, #1
 800caba:	189b      	adds	r3, r3, r2
 800cabc:	2201      	movs	r2, #1
 800cabe:	002c      	movs	r4, r5
 800cac0:	0005      	movs	r5, r0
 800cac2:	9314      	str	r3, [sp, #80]	; 0x50
 800cac4:	9b08      	ldr	r3, [sp, #32]
 800cac6:	4013      	ands	r3, r2
 800cac8:	930f      	str	r3, [sp, #60]	; 0x3c
 800caca:	0031      	movs	r1, r6
 800cacc:	9805      	ldr	r0, [sp, #20]
 800cace:	f7ff fa3e 	bl	800bf4e <quorem>
 800cad2:	0003      	movs	r3, r0
 800cad4:	0021      	movs	r1, r4
 800cad6:	3330      	adds	r3, #48	; 0x30
 800cad8:	900d      	str	r0, [sp, #52]	; 0x34
 800cada:	9805      	ldr	r0, [sp, #20]
 800cadc:	9307      	str	r3, [sp, #28]
 800cade:	f000 fdbd 	bl	800d65c <__mcmp>
 800cae2:	002a      	movs	r2, r5
 800cae4:	900e      	str	r0, [sp, #56]	; 0x38
 800cae6:	0031      	movs	r1, r6
 800cae8:	0038      	movs	r0, r7
 800caea:	f000 fdd3 	bl	800d694 <__mdiff>
 800caee:	68c3      	ldr	r3, [r0, #12]
 800caf0:	9008      	str	r0, [sp, #32]
 800caf2:	9310      	str	r3, [sp, #64]	; 0x40
 800caf4:	2301      	movs	r3, #1
 800caf6:	930c      	str	r3, [sp, #48]	; 0x30
 800caf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d104      	bne.n	800cb08 <_dtoa_r+0xaa4>
 800cafe:	0001      	movs	r1, r0
 800cb00:	9805      	ldr	r0, [sp, #20]
 800cb02:	f000 fdab 	bl	800d65c <__mcmp>
 800cb06:	900c      	str	r0, [sp, #48]	; 0x30
 800cb08:	0038      	movs	r0, r7
 800cb0a:	9908      	ldr	r1, [sp, #32]
 800cb0c:	f000 fb66 	bl	800d1dc <_Bfree>
 800cb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb14:	3301      	adds	r3, #1
 800cb16:	9308      	str	r3, [sp, #32]
 800cb18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	d10c      	bne.n	800cb3c <_dtoa_r+0xad8>
 800cb22:	9b07      	ldr	r3, [sp, #28]
 800cb24:	2b39      	cmp	r3, #57	; 0x39
 800cb26:	d026      	beq.n	800cb76 <_dtoa_r+0xb12>
 800cb28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	dd02      	ble.n	800cb34 <_dtoa_r+0xad0>
 800cb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb30:	3331      	adds	r3, #49	; 0x31
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb36:	9a07      	ldr	r2, [sp, #28]
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	e76a      	b.n	800ca12 <_dtoa_r+0x9ae>
 800cb3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	db04      	blt.n	800cb4c <_dtoa_r+0xae8>
 800cb42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb44:	4313      	orrs	r3, r2
 800cb46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	d11f      	bne.n	800cb8c <_dtoa_r+0xb28>
 800cb4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	ddf0      	ble.n	800cb34 <_dtoa_r+0xad0>
 800cb52:	9905      	ldr	r1, [sp, #20]
 800cb54:	2201      	movs	r2, #1
 800cb56:	0038      	movs	r0, r7
 800cb58:	f000 fd12 	bl	800d580 <__lshift>
 800cb5c:	0031      	movs	r1, r6
 800cb5e:	9005      	str	r0, [sp, #20]
 800cb60:	f000 fd7c 	bl	800d65c <__mcmp>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	dc03      	bgt.n	800cb70 <_dtoa_r+0xb0c>
 800cb68:	d1e4      	bne.n	800cb34 <_dtoa_r+0xad0>
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	07db      	lsls	r3, r3, #31
 800cb6e:	d5e1      	bpl.n	800cb34 <_dtoa_r+0xad0>
 800cb70:	9b07      	ldr	r3, [sp, #28]
 800cb72:	2b39      	cmp	r3, #57	; 0x39
 800cb74:	d1db      	bne.n	800cb2e <_dtoa_r+0xaca>
 800cb76:	2339      	movs	r3, #57	; 0x39
 800cb78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb7a:	7013      	strb	r3, [r2, #0]
 800cb7c:	9b08      	ldr	r3, [sp, #32]
 800cb7e:	9308      	str	r3, [sp, #32]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	781a      	ldrb	r2, [r3, #0]
 800cb84:	2a39      	cmp	r2, #57	; 0x39
 800cb86:	d068      	beq.n	800cc5a <_dtoa_r+0xbf6>
 800cb88:	3201      	adds	r2, #1
 800cb8a:	e7d5      	b.n	800cb38 <_dtoa_r+0xad4>
 800cb8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	dd07      	ble.n	800cba2 <_dtoa_r+0xb3e>
 800cb92:	9b07      	ldr	r3, [sp, #28]
 800cb94:	2b39      	cmp	r3, #57	; 0x39
 800cb96:	d0ee      	beq.n	800cb76 <_dtoa_r+0xb12>
 800cb98:	9b07      	ldr	r3, [sp, #28]
 800cb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	7013      	strb	r3, [r2, #0]
 800cba0:	e737      	b.n	800ca12 <_dtoa_r+0x9ae>
 800cba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba4:	9a07      	ldr	r2, [sp, #28]
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d03e      	beq.n	800cc2e <_dtoa_r+0xbca>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	9905      	ldr	r1, [sp, #20]
 800cbb6:	0038      	movs	r0, r7
 800cbb8:	f000 fb34 	bl	800d224 <__multadd>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9005      	str	r0, [sp, #20]
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	0021      	movs	r1, r4
 800cbc4:	0038      	movs	r0, r7
 800cbc6:	42ac      	cmp	r4, r5
 800cbc8:	d106      	bne.n	800cbd8 <_dtoa_r+0xb74>
 800cbca:	f000 fb2b 	bl	800d224 <__multadd>
 800cbce:	0004      	movs	r4, r0
 800cbd0:	0005      	movs	r5, r0
 800cbd2:	9b08      	ldr	r3, [sp, #32]
 800cbd4:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd6:	e778      	b.n	800caca <_dtoa_r+0xa66>
 800cbd8:	f000 fb24 	bl	800d224 <__multadd>
 800cbdc:	0029      	movs	r1, r5
 800cbde:	0004      	movs	r4, r0
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	220a      	movs	r2, #10
 800cbe4:	0038      	movs	r0, r7
 800cbe6:	f000 fb1d 	bl	800d224 <__multadd>
 800cbea:	0005      	movs	r5, r0
 800cbec:	e7f1      	b.n	800cbd2 <_dtoa_r+0xb6e>
 800cbee:	9b07      	ldr	r3, [sp, #28]
 800cbf0:	930c      	str	r3, [sp, #48]	; 0x30
 800cbf2:	2400      	movs	r4, #0
 800cbf4:	0031      	movs	r1, r6
 800cbf6:	9805      	ldr	r0, [sp, #20]
 800cbf8:	f7ff f9a9 	bl	800bf4e <quorem>
 800cbfc:	9b06      	ldr	r3, [sp, #24]
 800cbfe:	3030      	adds	r0, #48	; 0x30
 800cc00:	5518      	strb	r0, [r3, r4]
 800cc02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc04:	3401      	adds	r4, #1
 800cc06:	9007      	str	r0, [sp, #28]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	dd07      	ble.n	800cc1c <_dtoa_r+0xbb8>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	220a      	movs	r2, #10
 800cc10:	0038      	movs	r0, r7
 800cc12:	9905      	ldr	r1, [sp, #20]
 800cc14:	f000 fb06 	bl	800d224 <__multadd>
 800cc18:	9005      	str	r0, [sp, #20]
 800cc1a:	e7eb      	b.n	800cbf4 <_dtoa_r+0xb90>
 800cc1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1e:	2001      	movs	r0, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dd00      	ble.n	800cc26 <_dtoa_r+0xbc2>
 800cc24:	0018      	movs	r0, r3
 800cc26:	2400      	movs	r4, #0
 800cc28:	9b06      	ldr	r3, [sp, #24]
 800cc2a:	181b      	adds	r3, r3, r0
 800cc2c:	9308      	str	r3, [sp, #32]
 800cc2e:	9905      	ldr	r1, [sp, #20]
 800cc30:	2201      	movs	r2, #1
 800cc32:	0038      	movs	r0, r7
 800cc34:	f000 fca4 	bl	800d580 <__lshift>
 800cc38:	0031      	movs	r1, r6
 800cc3a:	9005      	str	r0, [sp, #20]
 800cc3c:	f000 fd0e 	bl	800d65c <__mcmp>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dc9b      	bgt.n	800cb7c <_dtoa_r+0xb18>
 800cc44:	d102      	bne.n	800cc4c <_dtoa_r+0xbe8>
 800cc46:	9b07      	ldr	r3, [sp, #28]
 800cc48:	07db      	lsls	r3, r3, #31
 800cc4a:	d497      	bmi.n	800cb7c <_dtoa_r+0xb18>
 800cc4c:	9b08      	ldr	r3, [sp, #32]
 800cc4e:	9308      	str	r3, [sp, #32]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	2a30      	cmp	r2, #48	; 0x30
 800cc56:	d0fa      	beq.n	800cc4e <_dtoa_r+0xbea>
 800cc58:	e6db      	b.n	800ca12 <_dtoa_r+0x9ae>
 800cc5a:	9a06      	ldr	r2, [sp, #24]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d18e      	bne.n	800cb7e <_dtoa_r+0xb1a>
 800cc60:	9b02      	ldr	r3, [sp, #8]
 800cc62:	3301      	adds	r3, #1
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	2331      	movs	r3, #49	; 0x31
 800cc68:	e799      	b.n	800cb9e <_dtoa_r+0xb3a>
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <_dtoa_r+0xc2c>)
 800cc6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cc6e:	9306      	str	r3, [sp, #24]
 800cc70:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <_dtoa_r+0xc30>)
 800cc72:	2a00      	cmp	r2, #0
 800cc74:	d001      	beq.n	800cc7a <_dtoa_r+0xc16>
 800cc76:	f7ff fa3f 	bl	800c0f8 <_dtoa_r+0x94>
 800cc7a:	f7ff fa3f 	bl	800c0fc <_dtoa_r+0x98>
 800cc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dcb6      	bgt.n	800cbf2 <_dtoa_r+0xb8e>
 800cc84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	dd00      	ble.n	800cc8c <_dtoa_r+0xc28>
 800cc8a:	e6ac      	b.n	800c9e6 <_dtoa_r+0x982>
 800cc8c:	e7b1      	b.n	800cbf2 <_dtoa_r+0xb8e>
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	0800e1e6 	.word	0x0800e1e6
 800cc94:	0800e1ee 	.word	0x0800e1ee

0800cc98 <__sflush_r>:
 800cc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc9a:	898b      	ldrh	r3, [r1, #12]
 800cc9c:	0005      	movs	r5, r0
 800cc9e:	000c      	movs	r4, r1
 800cca0:	071a      	lsls	r2, r3, #28
 800cca2:	d45f      	bmi.n	800cd64 <__sflush_r+0xcc>
 800cca4:	684a      	ldr	r2, [r1, #4]
 800cca6:	2a00      	cmp	r2, #0
 800cca8:	dc04      	bgt.n	800ccb4 <__sflush_r+0x1c>
 800ccaa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ccac:	2a00      	cmp	r2, #0
 800ccae:	dc01      	bgt.n	800ccb4 <__sflush_r+0x1c>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d0fa      	beq.n	800ccb0 <__sflush_r+0x18>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	2180      	movs	r1, #128	; 0x80
 800ccbe:	682e      	ldr	r6, [r5, #0]
 800ccc0:	602a      	str	r2, [r5, #0]
 800ccc2:	001a      	movs	r2, r3
 800ccc4:	0149      	lsls	r1, r1, #5
 800ccc6:	400a      	ands	r2, r1
 800ccc8:	420b      	tst	r3, r1
 800ccca:	d034      	beq.n	800cd36 <__sflush_r+0x9e>
 800cccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	075b      	lsls	r3, r3, #29
 800ccd2:	d506      	bpl.n	800cce2 <__sflush_r+0x4a>
 800ccd4:	6863      	ldr	r3, [r4, #4]
 800ccd6:	1ac0      	subs	r0, r0, r3
 800ccd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <__sflush_r+0x4a>
 800ccde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cce0:	1ac0      	subs	r0, r0, r3
 800cce2:	0002      	movs	r2, r0
 800cce4:	6a21      	ldr	r1, [r4, #32]
 800cce6:	2300      	movs	r3, #0
 800cce8:	0028      	movs	r0, r5
 800ccea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ccec:	47b8      	blx	r7
 800ccee:	89a1      	ldrh	r1, [r4, #12]
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	d106      	bne.n	800cd02 <__sflush_r+0x6a>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	2b1d      	cmp	r3, #29
 800ccf8:	d831      	bhi.n	800cd5e <__sflush_r+0xc6>
 800ccfa:	4a2c      	ldr	r2, [pc, #176]	; (800cdac <__sflush_r+0x114>)
 800ccfc:	40da      	lsrs	r2, r3
 800ccfe:	07d3      	lsls	r3, r2, #31
 800cd00:	d52d      	bpl.n	800cd5e <__sflush_r+0xc6>
 800cd02:	2300      	movs	r3, #0
 800cd04:	6063      	str	r3, [r4, #4]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	04cb      	lsls	r3, r1, #19
 800cd0c:	d505      	bpl.n	800cd1a <__sflush_r+0x82>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d102      	bne.n	800cd18 <__sflush_r+0x80>
 800cd12:	682b      	ldr	r3, [r5, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d100      	bne.n	800cd1a <__sflush_r+0x82>
 800cd18:	6560      	str	r0, [r4, #84]	; 0x54
 800cd1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1c:	602e      	str	r6, [r5, #0]
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d0c6      	beq.n	800ccb0 <__sflush_r+0x18>
 800cd22:	0023      	movs	r3, r4
 800cd24:	3344      	adds	r3, #68	; 0x44
 800cd26:	4299      	cmp	r1, r3
 800cd28:	d002      	beq.n	800cd30 <__sflush_r+0x98>
 800cd2a:	0028      	movs	r0, r5
 800cd2c:	f7fe f976 	bl	800b01c <_free_r>
 800cd30:	2000      	movs	r0, #0
 800cd32:	6360      	str	r0, [r4, #52]	; 0x34
 800cd34:	e7bd      	b.n	800ccb2 <__sflush_r+0x1a>
 800cd36:	2301      	movs	r3, #1
 800cd38:	0028      	movs	r0, r5
 800cd3a:	6a21      	ldr	r1, [r4, #32]
 800cd3c:	47b8      	blx	r7
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d1c5      	bne.n	800ccce <__sflush_r+0x36>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0c2      	beq.n	800ccce <__sflush_r+0x36>
 800cd48:	2b1d      	cmp	r3, #29
 800cd4a:	d001      	beq.n	800cd50 <__sflush_r+0xb8>
 800cd4c:	2b16      	cmp	r3, #22
 800cd4e:	d101      	bne.n	800cd54 <__sflush_r+0xbc>
 800cd50:	602e      	str	r6, [r5, #0]
 800cd52:	e7ad      	b.n	800ccb0 <__sflush_r+0x18>
 800cd54:	2340      	movs	r3, #64	; 0x40
 800cd56:	89a2      	ldrh	r2, [r4, #12]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	e7a9      	b.n	800ccb2 <__sflush_r+0x1a>
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	430b      	orrs	r3, r1
 800cd62:	e7fa      	b.n	800cd5a <__sflush_r+0xc2>
 800cd64:	690f      	ldr	r7, [r1, #16]
 800cd66:	2f00      	cmp	r7, #0
 800cd68:	d0a2      	beq.n	800ccb0 <__sflush_r+0x18>
 800cd6a:	680a      	ldr	r2, [r1, #0]
 800cd6c:	600f      	str	r7, [r1, #0]
 800cd6e:	1bd2      	subs	r2, r2, r7
 800cd70:	9201      	str	r2, [sp, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	079b      	lsls	r3, r3, #30
 800cd76:	d100      	bne.n	800cd7a <__sflush_r+0xe2>
 800cd78:	694a      	ldr	r2, [r1, #20]
 800cd7a:	60a2      	str	r2, [r4, #8]
 800cd7c:	9b01      	ldr	r3, [sp, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dc00      	bgt.n	800cd84 <__sflush_r+0xec>
 800cd82:	e795      	b.n	800ccb0 <__sflush_r+0x18>
 800cd84:	003a      	movs	r2, r7
 800cd86:	0028      	movs	r0, r5
 800cd88:	9b01      	ldr	r3, [sp, #4]
 800cd8a:	6a21      	ldr	r1, [r4, #32]
 800cd8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd8e:	47b0      	blx	r6
 800cd90:	2800      	cmp	r0, #0
 800cd92:	dc06      	bgt.n	800cda2 <__sflush_r+0x10a>
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	2001      	movs	r0, #1
 800cd98:	89a2      	ldrh	r2, [r4, #12]
 800cd9a:	4240      	negs	r0, r0
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	e787      	b.n	800ccb2 <__sflush_r+0x1a>
 800cda2:	9b01      	ldr	r3, [sp, #4]
 800cda4:	183f      	adds	r7, r7, r0
 800cda6:	1a1b      	subs	r3, r3, r0
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	e7e7      	b.n	800cd7c <__sflush_r+0xe4>
 800cdac:	20400001 	.word	0x20400001

0800cdb0 <_fflush_r>:
 800cdb0:	690b      	ldr	r3, [r1, #16]
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	0005      	movs	r5, r0
 800cdb6:	000c      	movs	r4, r1
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d102      	bne.n	800cdc2 <_fflush_r+0x12>
 800cdbc:	2500      	movs	r5, #0
 800cdbe:	0028      	movs	r0, r5
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d004      	beq.n	800cdd0 <_fflush_r+0x20>
 800cdc6:	6983      	ldr	r3, [r0, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <_fflush_r+0x20>
 800cdcc:	f000 f892 	bl	800cef4 <__sinit>
 800cdd0:	4b14      	ldr	r3, [pc, #80]	; (800ce24 <_fflush_r+0x74>)
 800cdd2:	429c      	cmp	r4, r3
 800cdd4:	d11b      	bne.n	800ce0e <_fflush_r+0x5e>
 800cdd6:	686c      	ldr	r4, [r5, #4]
 800cdd8:	220c      	movs	r2, #12
 800cdda:	5ea3      	ldrsh	r3, [r4, r2]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0ed      	beq.n	800cdbc <_fflush_r+0xc>
 800cde0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde2:	07d2      	lsls	r2, r2, #31
 800cde4:	d404      	bmi.n	800cdf0 <_fflush_r+0x40>
 800cde6:	059b      	lsls	r3, r3, #22
 800cde8:	d402      	bmi.n	800cdf0 <_fflush_r+0x40>
 800cdea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdec:	f000 f927 	bl	800d03e <__retarget_lock_acquire_recursive>
 800cdf0:	0028      	movs	r0, r5
 800cdf2:	0021      	movs	r1, r4
 800cdf4:	f7ff ff50 	bl	800cc98 <__sflush_r>
 800cdf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdfa:	0005      	movs	r5, r0
 800cdfc:	07db      	lsls	r3, r3, #31
 800cdfe:	d4de      	bmi.n	800cdbe <_fflush_r+0xe>
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	059b      	lsls	r3, r3, #22
 800ce04:	d4db      	bmi.n	800cdbe <_fflush_r+0xe>
 800ce06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce08:	f000 f91a 	bl	800d040 <__retarget_lock_release_recursive>
 800ce0c:	e7d7      	b.n	800cdbe <_fflush_r+0xe>
 800ce0e:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <_fflush_r+0x78>)
 800ce10:	429c      	cmp	r4, r3
 800ce12:	d101      	bne.n	800ce18 <_fflush_r+0x68>
 800ce14:	68ac      	ldr	r4, [r5, #8]
 800ce16:	e7df      	b.n	800cdd8 <_fflush_r+0x28>
 800ce18:	4b04      	ldr	r3, [pc, #16]	; (800ce2c <_fflush_r+0x7c>)
 800ce1a:	429c      	cmp	r4, r3
 800ce1c:	d1dc      	bne.n	800cdd8 <_fflush_r+0x28>
 800ce1e:	68ec      	ldr	r4, [r5, #12]
 800ce20:	e7da      	b.n	800cdd8 <_fflush_r+0x28>
 800ce22:	46c0      	nop			; (mov r8, r8)
 800ce24:	0800e298 	.word	0x0800e298
 800ce28:	0800e2b8 	.word	0x0800e2b8
 800ce2c:	0800e278 	.word	0x0800e278

0800ce30 <std>:
 800ce30:	2300      	movs	r3, #0
 800ce32:	b510      	push	{r4, lr}
 800ce34:	0004      	movs	r4, r0
 800ce36:	6003      	str	r3, [r0, #0]
 800ce38:	6043      	str	r3, [r0, #4]
 800ce3a:	6083      	str	r3, [r0, #8]
 800ce3c:	8181      	strh	r1, [r0, #12]
 800ce3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce40:	0019      	movs	r1, r3
 800ce42:	81c2      	strh	r2, [r0, #14]
 800ce44:	6103      	str	r3, [r0, #16]
 800ce46:	6143      	str	r3, [r0, #20]
 800ce48:	6183      	str	r3, [r0, #24]
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	305c      	adds	r0, #92	; 0x5c
 800ce4e:	f7fe f8b0 	bl	800afb2 <memset>
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <std+0x38>)
 800ce54:	6224      	str	r4, [r4, #32]
 800ce56:	6263      	str	r3, [r4, #36]	; 0x24
 800ce58:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <std+0x3c>)
 800ce5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce5c:	4b04      	ldr	r3, [pc, #16]	; (800ce70 <std+0x40>)
 800ce5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce60:	4b04      	ldr	r3, [pc, #16]	; (800ce74 <std+0x44>)
 800ce62:	6323      	str	r3, [r4, #48]	; 0x30
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	46c0      	nop			; (mov r8, r8)
 800ce68:	0800d921 	.word	0x0800d921
 800ce6c:	0800d949 	.word	0x0800d949
 800ce70:	0800d981 	.word	0x0800d981
 800ce74:	0800d9ad 	.word	0x0800d9ad

0800ce78 <_cleanup_r>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	4902      	ldr	r1, [pc, #8]	; (800ce84 <_cleanup_r+0xc>)
 800ce7c:	f000 f8ba 	bl	800cff4 <_fwalk_reent>
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	46c0      	nop			; (mov r8, r8)
 800ce84:	0800cdb1 	.word	0x0800cdb1

0800ce88 <__sfmoreglue>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	2568      	movs	r5, #104	; 0x68
 800ce8c:	1e4a      	subs	r2, r1, #1
 800ce8e:	4355      	muls	r5, r2
 800ce90:	000e      	movs	r6, r1
 800ce92:	0029      	movs	r1, r5
 800ce94:	3174      	adds	r1, #116	; 0x74
 800ce96:	f7fe f92d 	bl	800b0f4 <_malloc_r>
 800ce9a:	1e04      	subs	r4, r0, #0
 800ce9c:	d008      	beq.n	800ceb0 <__sfmoreglue+0x28>
 800ce9e:	2100      	movs	r1, #0
 800cea0:	002a      	movs	r2, r5
 800cea2:	6001      	str	r1, [r0, #0]
 800cea4:	6046      	str	r6, [r0, #4]
 800cea6:	300c      	adds	r0, #12
 800cea8:	60a0      	str	r0, [r4, #8]
 800ceaa:	3268      	adds	r2, #104	; 0x68
 800ceac:	f7fe f881 	bl	800afb2 <memset>
 800ceb0:	0020      	movs	r0, r4
 800ceb2:	bd70      	pop	{r4, r5, r6, pc}

0800ceb4 <__sfp_lock_acquire>:
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	4802      	ldr	r0, [pc, #8]	; (800cec0 <__sfp_lock_acquire+0xc>)
 800ceb8:	f000 f8c1 	bl	800d03e <__retarget_lock_acquire_recursive>
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	2000074d 	.word	0x2000074d

0800cec4 <__sfp_lock_release>:
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4802      	ldr	r0, [pc, #8]	; (800ced0 <__sfp_lock_release+0xc>)
 800cec8:	f000 f8ba 	bl	800d040 <__retarget_lock_release_recursive>
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	46c0      	nop			; (mov r8, r8)
 800ced0:	2000074d 	.word	0x2000074d

0800ced4 <__sinit_lock_acquire>:
 800ced4:	b510      	push	{r4, lr}
 800ced6:	4802      	ldr	r0, [pc, #8]	; (800cee0 <__sinit_lock_acquire+0xc>)
 800ced8:	f000 f8b1 	bl	800d03e <__retarget_lock_acquire_recursive>
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	2000074e 	.word	0x2000074e

0800cee4 <__sinit_lock_release>:
 800cee4:	b510      	push	{r4, lr}
 800cee6:	4802      	ldr	r0, [pc, #8]	; (800cef0 <__sinit_lock_release+0xc>)
 800cee8:	f000 f8aa 	bl	800d040 <__retarget_lock_release_recursive>
 800ceec:	bd10      	pop	{r4, pc}
 800ceee:	46c0      	nop			; (mov r8, r8)
 800cef0:	2000074e 	.word	0x2000074e

0800cef4 <__sinit>:
 800cef4:	b513      	push	{r0, r1, r4, lr}
 800cef6:	0004      	movs	r4, r0
 800cef8:	f7ff ffec 	bl	800ced4 <__sinit_lock_acquire>
 800cefc:	69a3      	ldr	r3, [r4, #24]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <__sinit+0x14>
 800cf02:	f7ff ffef 	bl	800cee4 <__sinit_lock_release>
 800cf06:	bd13      	pop	{r0, r1, r4, pc}
 800cf08:	64a3      	str	r3, [r4, #72]	; 0x48
 800cf0a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cf0c:	6523      	str	r3, [r4, #80]	; 0x50
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <__sinit+0x68>)
 800cf10:	4a13      	ldr	r2, [pc, #76]	; (800cf60 <__sinit+0x6c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	42a3      	cmp	r3, r4
 800cf1a:	d101      	bne.n	800cf20 <__sinit+0x2c>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	61a3      	str	r3, [r4, #24]
 800cf20:	0020      	movs	r0, r4
 800cf22:	f000 f81f 	bl	800cf64 <__sfp>
 800cf26:	6060      	str	r0, [r4, #4]
 800cf28:	0020      	movs	r0, r4
 800cf2a:	f000 f81b 	bl	800cf64 <__sfp>
 800cf2e:	60a0      	str	r0, [r4, #8]
 800cf30:	0020      	movs	r0, r4
 800cf32:	f000 f817 	bl	800cf64 <__sfp>
 800cf36:	2200      	movs	r2, #0
 800cf38:	2104      	movs	r1, #4
 800cf3a:	60e0      	str	r0, [r4, #12]
 800cf3c:	6860      	ldr	r0, [r4, #4]
 800cf3e:	f7ff ff77 	bl	800ce30 <std>
 800cf42:	2201      	movs	r2, #1
 800cf44:	2109      	movs	r1, #9
 800cf46:	68a0      	ldr	r0, [r4, #8]
 800cf48:	f7ff ff72 	bl	800ce30 <std>
 800cf4c:	2202      	movs	r2, #2
 800cf4e:	2112      	movs	r1, #18
 800cf50:	68e0      	ldr	r0, [r4, #12]
 800cf52:	f7ff ff6d 	bl	800ce30 <std>
 800cf56:	2301      	movs	r3, #1
 800cf58:	61a3      	str	r3, [r4, #24]
 800cf5a:	e7d2      	b.n	800cf02 <__sinit+0xe>
 800cf5c:	0800e09c 	.word	0x0800e09c
 800cf60:	0800ce79 	.word	0x0800ce79

0800cf64 <__sfp>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	0007      	movs	r7, r0
 800cf68:	f7ff ffa4 	bl	800ceb4 <__sfp_lock_acquire>
 800cf6c:	4b1f      	ldr	r3, [pc, #124]	; (800cfec <__sfp+0x88>)
 800cf6e:	681e      	ldr	r6, [r3, #0]
 800cf70:	69b3      	ldr	r3, [r6, #24]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d102      	bne.n	800cf7c <__sfp+0x18>
 800cf76:	0030      	movs	r0, r6
 800cf78:	f7ff ffbc 	bl	800cef4 <__sinit>
 800cf7c:	3648      	adds	r6, #72	; 0x48
 800cf7e:	68b4      	ldr	r4, [r6, #8]
 800cf80:	6873      	ldr	r3, [r6, #4]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	d504      	bpl.n	800cf90 <__sfp+0x2c>
 800cf86:	6833      	ldr	r3, [r6, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d022      	beq.n	800cfd2 <__sfp+0x6e>
 800cf8c:	6836      	ldr	r6, [r6, #0]
 800cf8e:	e7f6      	b.n	800cf7e <__sfp+0x1a>
 800cf90:	220c      	movs	r2, #12
 800cf92:	5ea5      	ldrsh	r5, [r4, r2]
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	d11a      	bne.n	800cfce <__sfp+0x6a>
 800cf98:	0020      	movs	r0, r4
 800cf9a:	4b15      	ldr	r3, [pc, #84]	; (800cff0 <__sfp+0x8c>)
 800cf9c:	3058      	adds	r0, #88	; 0x58
 800cf9e:	60e3      	str	r3, [r4, #12]
 800cfa0:	6665      	str	r5, [r4, #100]	; 0x64
 800cfa2:	f000 f84b 	bl	800d03c <__retarget_lock_init_recursive>
 800cfa6:	f7ff ff8d 	bl	800cec4 <__sfp_lock_release>
 800cfaa:	0020      	movs	r0, r4
 800cfac:	2208      	movs	r2, #8
 800cfae:	0029      	movs	r1, r5
 800cfb0:	6025      	str	r5, [r4, #0]
 800cfb2:	60a5      	str	r5, [r4, #8]
 800cfb4:	6065      	str	r5, [r4, #4]
 800cfb6:	6125      	str	r5, [r4, #16]
 800cfb8:	6165      	str	r5, [r4, #20]
 800cfba:	61a5      	str	r5, [r4, #24]
 800cfbc:	305c      	adds	r0, #92	; 0x5c
 800cfbe:	f7fd fff8 	bl	800afb2 <memset>
 800cfc2:	6365      	str	r5, [r4, #52]	; 0x34
 800cfc4:	63a5      	str	r5, [r4, #56]	; 0x38
 800cfc6:	64a5      	str	r5, [r4, #72]	; 0x48
 800cfc8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cfca:	0020      	movs	r0, r4
 800cfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfce:	3468      	adds	r4, #104	; 0x68
 800cfd0:	e7d7      	b.n	800cf82 <__sfp+0x1e>
 800cfd2:	2104      	movs	r1, #4
 800cfd4:	0038      	movs	r0, r7
 800cfd6:	f7ff ff57 	bl	800ce88 <__sfmoreglue>
 800cfda:	1e04      	subs	r4, r0, #0
 800cfdc:	6030      	str	r0, [r6, #0]
 800cfde:	d1d5      	bne.n	800cf8c <__sfp+0x28>
 800cfe0:	f7ff ff70 	bl	800cec4 <__sfp_lock_release>
 800cfe4:	230c      	movs	r3, #12
 800cfe6:	603b      	str	r3, [r7, #0]
 800cfe8:	e7ef      	b.n	800cfca <__sfp+0x66>
 800cfea:	46c0      	nop			; (mov r8, r8)
 800cfec:	0800e09c 	.word	0x0800e09c
 800cff0:	ffff0001 	.word	0xffff0001

0800cff4 <_fwalk_reent>:
 800cff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cff6:	0004      	movs	r4, r0
 800cff8:	0006      	movs	r6, r0
 800cffa:	2700      	movs	r7, #0
 800cffc:	9101      	str	r1, [sp, #4]
 800cffe:	3448      	adds	r4, #72	; 0x48
 800d000:	6863      	ldr	r3, [r4, #4]
 800d002:	68a5      	ldr	r5, [r4, #8]
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	9b00      	ldr	r3, [sp, #0]
 800d008:	3b01      	subs	r3, #1
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	d504      	bpl.n	800d018 <_fwalk_reent+0x24>
 800d00e:	6824      	ldr	r4, [r4, #0]
 800d010:	2c00      	cmp	r4, #0
 800d012:	d1f5      	bne.n	800d000 <_fwalk_reent+0xc>
 800d014:	0038      	movs	r0, r7
 800d016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d018:	89ab      	ldrh	r3, [r5, #12]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d908      	bls.n	800d030 <_fwalk_reent+0x3c>
 800d01e:	220e      	movs	r2, #14
 800d020:	5eab      	ldrsh	r3, [r5, r2]
 800d022:	3301      	adds	r3, #1
 800d024:	d004      	beq.n	800d030 <_fwalk_reent+0x3c>
 800d026:	0029      	movs	r1, r5
 800d028:	0030      	movs	r0, r6
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	4798      	blx	r3
 800d02e:	4307      	orrs	r7, r0
 800d030:	3568      	adds	r5, #104	; 0x68
 800d032:	e7e8      	b.n	800d006 <_fwalk_reent+0x12>

0800d034 <_localeconv_r>:
 800d034:	4800      	ldr	r0, [pc, #0]	; (800d038 <_localeconv_r+0x4>)
 800d036:	4770      	bx	lr
 800d038:	200001e8 	.word	0x200001e8

0800d03c <__retarget_lock_init_recursive>:
 800d03c:	4770      	bx	lr

0800d03e <__retarget_lock_acquire_recursive>:
 800d03e:	4770      	bx	lr

0800d040 <__retarget_lock_release_recursive>:
 800d040:	4770      	bx	lr
	...

0800d044 <__swhatbuf_r>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	000e      	movs	r6, r1
 800d048:	001d      	movs	r5, r3
 800d04a:	230e      	movs	r3, #14
 800d04c:	5ec9      	ldrsh	r1, [r1, r3]
 800d04e:	0014      	movs	r4, r2
 800d050:	b096      	sub	sp, #88	; 0x58
 800d052:	2900      	cmp	r1, #0
 800d054:	da08      	bge.n	800d068 <__swhatbuf_r+0x24>
 800d056:	220c      	movs	r2, #12
 800d058:	5eb3      	ldrsh	r3, [r6, r2]
 800d05a:	2200      	movs	r2, #0
 800d05c:	602a      	str	r2, [r5, #0]
 800d05e:	061b      	lsls	r3, r3, #24
 800d060:	d411      	bmi.n	800d086 <__swhatbuf_r+0x42>
 800d062:	2380      	movs	r3, #128	; 0x80
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	e00f      	b.n	800d088 <__swhatbuf_r+0x44>
 800d068:	466a      	mov	r2, sp
 800d06a:	f000 fccb 	bl	800da04 <_fstat_r>
 800d06e:	2800      	cmp	r0, #0
 800d070:	dbf1      	blt.n	800d056 <__swhatbuf_r+0x12>
 800d072:	23f0      	movs	r3, #240	; 0xf0
 800d074:	9901      	ldr	r1, [sp, #4]
 800d076:	021b      	lsls	r3, r3, #8
 800d078:	4019      	ands	r1, r3
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <__swhatbuf_r+0x4c>)
 800d07c:	18c9      	adds	r1, r1, r3
 800d07e:	424b      	negs	r3, r1
 800d080:	4159      	adcs	r1, r3
 800d082:	6029      	str	r1, [r5, #0]
 800d084:	e7ed      	b.n	800d062 <__swhatbuf_r+0x1e>
 800d086:	2340      	movs	r3, #64	; 0x40
 800d088:	2000      	movs	r0, #0
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	b016      	add	sp, #88	; 0x58
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	ffffe000 	.word	0xffffe000

0800d094 <__smakebuf_r>:
 800d094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d096:	2602      	movs	r6, #2
 800d098:	898b      	ldrh	r3, [r1, #12]
 800d09a:	0005      	movs	r5, r0
 800d09c:	000c      	movs	r4, r1
 800d09e:	4233      	tst	r3, r6
 800d0a0:	d006      	beq.n	800d0b0 <__smakebuf_r+0x1c>
 800d0a2:	0023      	movs	r3, r4
 800d0a4:	3347      	adds	r3, #71	; 0x47
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	6123      	str	r3, [r4, #16]
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	6163      	str	r3, [r4, #20]
 800d0ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d0b0:	466a      	mov	r2, sp
 800d0b2:	ab01      	add	r3, sp, #4
 800d0b4:	f7ff ffc6 	bl	800d044 <__swhatbuf_r>
 800d0b8:	9900      	ldr	r1, [sp, #0]
 800d0ba:	0007      	movs	r7, r0
 800d0bc:	0028      	movs	r0, r5
 800d0be:	f7fe f819 	bl	800b0f4 <_malloc_r>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d108      	bne.n	800d0d8 <__smakebuf_r+0x44>
 800d0c6:	220c      	movs	r2, #12
 800d0c8:	5ea3      	ldrsh	r3, [r4, r2]
 800d0ca:	059a      	lsls	r2, r3, #22
 800d0cc:	d4ef      	bmi.n	800d0ae <__smakebuf_r+0x1a>
 800d0ce:	2203      	movs	r2, #3
 800d0d0:	4393      	bics	r3, r2
 800d0d2:	431e      	orrs	r6, r3
 800d0d4:	81a6      	strh	r6, [r4, #12]
 800d0d6:	e7e4      	b.n	800d0a2 <__smakebuf_r+0xe>
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <__smakebuf_r+0x84>)
 800d0da:	62ab      	str	r3, [r5, #40]	; 0x28
 800d0dc:	2380      	movs	r3, #128	; 0x80
 800d0de:	89a2      	ldrh	r2, [r4, #12]
 800d0e0:	6020      	str	r0, [r4, #0]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	6120      	str	r0, [r4, #16]
 800d0ea:	6163      	str	r3, [r4, #20]
 800d0ec:	9b01      	ldr	r3, [sp, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00d      	beq.n	800d10e <__smakebuf_r+0x7a>
 800d0f2:	0028      	movs	r0, r5
 800d0f4:	230e      	movs	r3, #14
 800d0f6:	5ee1      	ldrsh	r1, [r4, r3]
 800d0f8:	f000 fc96 	bl	800da28 <_isatty_r>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d006      	beq.n	800d10e <__smakebuf_r+0x7a>
 800d100:	2203      	movs	r2, #3
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	4393      	bics	r3, r2
 800d106:	001a      	movs	r2, r3
 800d108:	2301      	movs	r3, #1
 800d10a:	4313      	orrs	r3, r2
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	89a0      	ldrh	r0, [r4, #12]
 800d110:	4307      	orrs	r7, r0
 800d112:	81a7      	strh	r7, [r4, #12]
 800d114:	e7cb      	b.n	800d0ae <__smakebuf_r+0x1a>
 800d116:	46c0      	nop			; (mov r8, r8)
 800d118:	0800ce79 	.word	0x0800ce79

0800d11c <memchr>:
 800d11c:	b2c9      	uxtb	r1, r1
 800d11e:	1882      	adds	r2, r0, r2
 800d120:	4290      	cmp	r0, r2
 800d122:	d101      	bne.n	800d128 <memchr+0xc>
 800d124:	2000      	movs	r0, #0
 800d126:	4770      	bx	lr
 800d128:	7803      	ldrb	r3, [r0, #0]
 800d12a:	428b      	cmp	r3, r1
 800d12c:	d0fb      	beq.n	800d126 <memchr+0xa>
 800d12e:	3001      	adds	r0, #1
 800d130:	e7f6      	b.n	800d120 <memchr+0x4>
	...

0800d134 <__malloc_lock>:
 800d134:	b510      	push	{r4, lr}
 800d136:	4802      	ldr	r0, [pc, #8]	; (800d140 <__malloc_lock+0xc>)
 800d138:	f7ff ff81 	bl	800d03e <__retarget_lock_acquire_recursive>
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	46c0      	nop			; (mov r8, r8)
 800d140:	2000074c 	.word	0x2000074c

0800d144 <__malloc_unlock>:
 800d144:	b510      	push	{r4, lr}
 800d146:	4802      	ldr	r0, [pc, #8]	; (800d150 <__malloc_unlock+0xc>)
 800d148:	f7ff ff7a 	bl	800d040 <__retarget_lock_release_recursive>
 800d14c:	bd10      	pop	{r4, pc}
 800d14e:	46c0      	nop			; (mov r8, r8)
 800d150:	2000074c 	.word	0x2000074c

0800d154 <_Balloc>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d158:	0006      	movs	r6, r0
 800d15a:	000c      	movs	r4, r1
 800d15c:	2d00      	cmp	r5, #0
 800d15e:	d10e      	bne.n	800d17e <_Balloc+0x2a>
 800d160:	2010      	movs	r0, #16
 800d162:	f7fd ff13 	bl	800af8c <malloc>
 800d166:	1e02      	subs	r2, r0, #0
 800d168:	6270      	str	r0, [r6, #36]	; 0x24
 800d16a:	d104      	bne.n	800d176 <_Balloc+0x22>
 800d16c:	2166      	movs	r1, #102	; 0x66
 800d16e:	4b19      	ldr	r3, [pc, #100]	; (800d1d4 <_Balloc+0x80>)
 800d170:	4819      	ldr	r0, [pc, #100]	; (800d1d8 <_Balloc+0x84>)
 800d172:	f7fd fea9 	bl	800aec8 <__assert_func>
 800d176:	6045      	str	r5, [r0, #4]
 800d178:	6085      	str	r5, [r0, #8]
 800d17a:	6005      	str	r5, [r0, #0]
 800d17c:	60c5      	str	r5, [r0, #12]
 800d17e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d180:	68eb      	ldr	r3, [r5, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d013      	beq.n	800d1ae <_Balloc+0x5a>
 800d186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d188:	00a2      	lsls	r2, r4, #2
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	189b      	adds	r3, r3, r2
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	2800      	cmp	r0, #0
 800d192:	d118      	bne.n	800d1c6 <_Balloc+0x72>
 800d194:	2101      	movs	r1, #1
 800d196:	000d      	movs	r5, r1
 800d198:	40a5      	lsls	r5, r4
 800d19a:	1d6a      	adds	r2, r5, #5
 800d19c:	0030      	movs	r0, r6
 800d19e:	0092      	lsls	r2, r2, #2
 800d1a0:	f7fd ff0f 	bl	800afc2 <_calloc_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d00c      	beq.n	800d1c2 <_Balloc+0x6e>
 800d1a8:	6044      	str	r4, [r0, #4]
 800d1aa:	6085      	str	r5, [r0, #8]
 800d1ac:	e00d      	b.n	800d1ca <_Balloc+0x76>
 800d1ae:	2221      	movs	r2, #33	; 0x21
 800d1b0:	2104      	movs	r1, #4
 800d1b2:	0030      	movs	r0, r6
 800d1b4:	f7fd ff05 	bl	800afc2 <_calloc_r>
 800d1b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d1ba:	60e8      	str	r0, [r5, #12]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1e1      	bne.n	800d186 <_Balloc+0x32>
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	bd70      	pop	{r4, r5, r6, pc}
 800d1c6:	6802      	ldr	r2, [r0, #0]
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6103      	str	r3, [r0, #16]
 800d1ce:	60c3      	str	r3, [r0, #12]
 800d1d0:	e7f8      	b.n	800d1c4 <_Balloc+0x70>
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	0800e1f3 	.word	0x0800e1f3
 800d1d8:	0800e2d8 	.word	0x0800e2d8

0800d1dc <_Bfree>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1e0:	0005      	movs	r5, r0
 800d1e2:	000c      	movs	r4, r1
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	d10e      	bne.n	800d206 <_Bfree+0x2a>
 800d1e8:	2010      	movs	r0, #16
 800d1ea:	f7fd fecf 	bl	800af8c <malloc>
 800d1ee:	1e02      	subs	r2, r0, #0
 800d1f0:	6268      	str	r0, [r5, #36]	; 0x24
 800d1f2:	d104      	bne.n	800d1fe <_Bfree+0x22>
 800d1f4:	218a      	movs	r1, #138	; 0x8a
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <_Bfree+0x40>)
 800d1f8:	4809      	ldr	r0, [pc, #36]	; (800d220 <_Bfree+0x44>)
 800d1fa:	f7fd fe65 	bl	800aec8 <__assert_func>
 800d1fe:	6046      	str	r6, [r0, #4]
 800d200:	6086      	str	r6, [r0, #8]
 800d202:	6006      	str	r6, [r0, #0]
 800d204:	60c6      	str	r6, [r0, #12]
 800d206:	2c00      	cmp	r4, #0
 800d208:	d007      	beq.n	800d21a <_Bfree+0x3e>
 800d20a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d20c:	6862      	ldr	r2, [r4, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	0092      	lsls	r2, r2, #2
 800d212:	189b      	adds	r3, r3, r2
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	6022      	str	r2, [r4, #0]
 800d218:	601c      	str	r4, [r3, #0]
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	0800e1f3 	.word	0x0800e1f3
 800d220:	0800e2d8 	.word	0x0800e2d8

0800d224 <__multadd>:
 800d224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d226:	000e      	movs	r6, r1
 800d228:	9001      	str	r0, [sp, #4]
 800d22a:	000c      	movs	r4, r1
 800d22c:	001d      	movs	r5, r3
 800d22e:	2000      	movs	r0, #0
 800d230:	690f      	ldr	r7, [r1, #16]
 800d232:	3614      	adds	r6, #20
 800d234:	6833      	ldr	r3, [r6, #0]
 800d236:	3001      	adds	r0, #1
 800d238:	b299      	uxth	r1, r3
 800d23a:	4351      	muls	r1, r2
 800d23c:	0c1b      	lsrs	r3, r3, #16
 800d23e:	4353      	muls	r3, r2
 800d240:	1949      	adds	r1, r1, r5
 800d242:	0c0d      	lsrs	r5, r1, #16
 800d244:	195b      	adds	r3, r3, r5
 800d246:	0c1d      	lsrs	r5, r3, #16
 800d248:	b289      	uxth	r1, r1
 800d24a:	041b      	lsls	r3, r3, #16
 800d24c:	185b      	adds	r3, r3, r1
 800d24e:	c608      	stmia	r6!, {r3}
 800d250:	4287      	cmp	r7, r0
 800d252:	dcef      	bgt.n	800d234 <__multadd+0x10>
 800d254:	2d00      	cmp	r5, #0
 800d256:	d022      	beq.n	800d29e <__multadd+0x7a>
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	42bb      	cmp	r3, r7
 800d25c:	dc19      	bgt.n	800d292 <__multadd+0x6e>
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	9801      	ldr	r0, [sp, #4]
 800d262:	1c59      	adds	r1, r3, #1
 800d264:	f7ff ff76 	bl	800d154 <_Balloc>
 800d268:	1e06      	subs	r6, r0, #0
 800d26a:	d105      	bne.n	800d278 <__multadd+0x54>
 800d26c:	0002      	movs	r2, r0
 800d26e:	21b5      	movs	r1, #181	; 0xb5
 800d270:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <__multadd+0x80>)
 800d272:	480d      	ldr	r0, [pc, #52]	; (800d2a8 <__multadd+0x84>)
 800d274:	f7fd fe28 	bl	800aec8 <__assert_func>
 800d278:	0021      	movs	r1, r4
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	310c      	adds	r1, #12
 800d27e:	1c9a      	adds	r2, r3, #2
 800d280:	0092      	lsls	r2, r2, #2
 800d282:	300c      	adds	r0, #12
 800d284:	f7fd fe8c 	bl	800afa0 <memcpy>
 800d288:	0021      	movs	r1, r4
 800d28a:	9801      	ldr	r0, [sp, #4]
 800d28c:	f7ff ffa6 	bl	800d1dc <_Bfree>
 800d290:	0034      	movs	r4, r6
 800d292:	1d3b      	adds	r3, r7, #4
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	18e3      	adds	r3, r4, r3
 800d298:	605d      	str	r5, [r3, #4]
 800d29a:	1c7b      	adds	r3, r7, #1
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	0020      	movs	r0, r4
 800d2a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2a2:	46c0      	nop			; (mov r8, r8)
 800d2a4:	0800e265 	.word	0x0800e265
 800d2a8:	0800e2d8 	.word	0x0800e2d8

0800d2ac <__hi0bits>:
 800d2ac:	0003      	movs	r3, r0
 800d2ae:	0c02      	lsrs	r2, r0, #16
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	4282      	cmp	r2, r0
 800d2b4:	d101      	bne.n	800d2ba <__hi0bits+0xe>
 800d2b6:	041b      	lsls	r3, r3, #16
 800d2b8:	3010      	adds	r0, #16
 800d2ba:	0e1a      	lsrs	r2, r3, #24
 800d2bc:	d101      	bne.n	800d2c2 <__hi0bits+0x16>
 800d2be:	3008      	adds	r0, #8
 800d2c0:	021b      	lsls	r3, r3, #8
 800d2c2:	0f1a      	lsrs	r2, r3, #28
 800d2c4:	d101      	bne.n	800d2ca <__hi0bits+0x1e>
 800d2c6:	3004      	adds	r0, #4
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	0f9a      	lsrs	r2, r3, #30
 800d2cc:	d101      	bne.n	800d2d2 <__hi0bits+0x26>
 800d2ce:	3002      	adds	r0, #2
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	db03      	blt.n	800d2de <__hi0bits+0x32>
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	d400      	bmi.n	800d2de <__hi0bits+0x32>
 800d2dc:	2020      	movs	r0, #32
 800d2de:	4770      	bx	lr

0800d2e0 <__lo0bits>:
 800d2e0:	6803      	ldr	r3, [r0, #0]
 800d2e2:	0002      	movs	r2, r0
 800d2e4:	2107      	movs	r1, #7
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	4008      	ands	r0, r1
 800d2ea:	420b      	tst	r3, r1
 800d2ec:	d00d      	beq.n	800d30a <__lo0bits+0x2a>
 800d2ee:	3906      	subs	r1, #6
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	420b      	tst	r3, r1
 800d2f4:	d105      	bne.n	800d302 <__lo0bits+0x22>
 800d2f6:	3002      	adds	r0, #2
 800d2f8:	4203      	tst	r3, r0
 800d2fa:	d003      	beq.n	800d304 <__lo0bits+0x24>
 800d2fc:	40cb      	lsrs	r3, r1
 800d2fe:	0008      	movs	r0, r1
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	4770      	bx	lr
 800d304:	089b      	lsrs	r3, r3, #2
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	e7fb      	b.n	800d302 <__lo0bits+0x22>
 800d30a:	b299      	uxth	r1, r3
 800d30c:	2900      	cmp	r1, #0
 800d30e:	d101      	bne.n	800d314 <__lo0bits+0x34>
 800d310:	2010      	movs	r0, #16
 800d312:	0c1b      	lsrs	r3, r3, #16
 800d314:	b2d9      	uxtb	r1, r3
 800d316:	2900      	cmp	r1, #0
 800d318:	d101      	bne.n	800d31e <__lo0bits+0x3e>
 800d31a:	3008      	adds	r0, #8
 800d31c:	0a1b      	lsrs	r3, r3, #8
 800d31e:	0719      	lsls	r1, r3, #28
 800d320:	d101      	bne.n	800d326 <__lo0bits+0x46>
 800d322:	3004      	adds	r0, #4
 800d324:	091b      	lsrs	r3, r3, #4
 800d326:	0799      	lsls	r1, r3, #30
 800d328:	d101      	bne.n	800d32e <__lo0bits+0x4e>
 800d32a:	3002      	adds	r0, #2
 800d32c:	089b      	lsrs	r3, r3, #2
 800d32e:	07d9      	lsls	r1, r3, #31
 800d330:	d4e9      	bmi.n	800d306 <__lo0bits+0x26>
 800d332:	3001      	adds	r0, #1
 800d334:	085b      	lsrs	r3, r3, #1
 800d336:	d1e6      	bne.n	800d306 <__lo0bits+0x26>
 800d338:	2020      	movs	r0, #32
 800d33a:	e7e2      	b.n	800d302 <__lo0bits+0x22>

0800d33c <__i2b>:
 800d33c:	b510      	push	{r4, lr}
 800d33e:	000c      	movs	r4, r1
 800d340:	2101      	movs	r1, #1
 800d342:	f7ff ff07 	bl	800d154 <_Balloc>
 800d346:	2800      	cmp	r0, #0
 800d348:	d106      	bne.n	800d358 <__i2b+0x1c>
 800d34a:	21a0      	movs	r1, #160	; 0xa0
 800d34c:	0002      	movs	r2, r0
 800d34e:	4b04      	ldr	r3, [pc, #16]	; (800d360 <__i2b+0x24>)
 800d350:	4804      	ldr	r0, [pc, #16]	; (800d364 <__i2b+0x28>)
 800d352:	0049      	lsls	r1, r1, #1
 800d354:	f7fd fdb8 	bl	800aec8 <__assert_func>
 800d358:	2301      	movs	r3, #1
 800d35a:	6144      	str	r4, [r0, #20]
 800d35c:	6103      	str	r3, [r0, #16]
 800d35e:	bd10      	pop	{r4, pc}
 800d360:	0800e265 	.word	0x0800e265
 800d364:	0800e2d8 	.word	0x0800e2d8

0800d368 <__multiply>:
 800d368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36a:	690b      	ldr	r3, [r1, #16]
 800d36c:	0014      	movs	r4, r2
 800d36e:	6912      	ldr	r2, [r2, #16]
 800d370:	000d      	movs	r5, r1
 800d372:	b089      	sub	sp, #36	; 0x24
 800d374:	4293      	cmp	r3, r2
 800d376:	da01      	bge.n	800d37c <__multiply+0x14>
 800d378:	0025      	movs	r5, r4
 800d37a:	000c      	movs	r4, r1
 800d37c:	692f      	ldr	r7, [r5, #16]
 800d37e:	6926      	ldr	r6, [r4, #16]
 800d380:	6869      	ldr	r1, [r5, #4]
 800d382:	19bb      	adds	r3, r7, r6
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	68ab      	ldr	r3, [r5, #8]
 800d388:	19ba      	adds	r2, r7, r6
 800d38a:	4293      	cmp	r3, r2
 800d38c:	da00      	bge.n	800d390 <__multiply+0x28>
 800d38e:	3101      	adds	r1, #1
 800d390:	f7ff fee0 	bl	800d154 <_Balloc>
 800d394:	9001      	str	r0, [sp, #4]
 800d396:	2800      	cmp	r0, #0
 800d398:	d106      	bne.n	800d3a8 <__multiply+0x40>
 800d39a:	215e      	movs	r1, #94	; 0x5e
 800d39c:	0002      	movs	r2, r0
 800d39e:	4b48      	ldr	r3, [pc, #288]	; (800d4c0 <__multiply+0x158>)
 800d3a0:	4848      	ldr	r0, [pc, #288]	; (800d4c4 <__multiply+0x15c>)
 800d3a2:	31ff      	adds	r1, #255	; 0xff
 800d3a4:	f7fd fd90 	bl	800aec8 <__assert_func>
 800d3a8:	9b01      	ldr	r3, [sp, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	3314      	adds	r3, #20
 800d3ae:	469c      	mov	ip, r3
 800d3b0:	19bb      	adds	r3, r7, r6
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4463      	add	r3, ip
 800d3b6:	9303      	str	r3, [sp, #12]
 800d3b8:	4663      	mov	r3, ip
 800d3ba:	9903      	ldr	r1, [sp, #12]
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	d32c      	bcc.n	800d41a <__multiply+0xb2>
 800d3c0:	002b      	movs	r3, r5
 800d3c2:	0022      	movs	r2, r4
 800d3c4:	3314      	adds	r3, #20
 800d3c6:	00bf      	lsls	r7, r7, #2
 800d3c8:	3214      	adds	r2, #20
 800d3ca:	9306      	str	r3, [sp, #24]
 800d3cc:	00b6      	lsls	r6, r6, #2
 800d3ce:	19db      	adds	r3, r3, r7
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	1993      	adds	r3, r2, r6
 800d3d4:	9307      	str	r3, [sp, #28]
 800d3d6:	2304      	movs	r3, #4
 800d3d8:	9305      	str	r3, [sp, #20]
 800d3da:	002b      	movs	r3, r5
 800d3dc:	9904      	ldr	r1, [sp, #16]
 800d3de:	3315      	adds	r3, #21
 800d3e0:	9200      	str	r2, [sp, #0]
 800d3e2:	4299      	cmp	r1, r3
 800d3e4:	d305      	bcc.n	800d3f2 <__multiply+0x8a>
 800d3e6:	1b4b      	subs	r3, r1, r5
 800d3e8:	3b15      	subs	r3, #21
 800d3ea:	089b      	lsrs	r3, r3, #2
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	9305      	str	r3, [sp, #20]
 800d3f2:	9b07      	ldr	r3, [sp, #28]
 800d3f4:	9a00      	ldr	r2, [sp, #0]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d311      	bcc.n	800d41e <__multiply+0xb6>
 800d3fa:	9b02      	ldr	r3, [sp, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dd06      	ble.n	800d40e <__multiply+0xa6>
 800d400:	9b03      	ldr	r3, [sp, #12]
 800d402:	3b04      	subs	r3, #4
 800d404:	9303      	str	r3, [sp, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d053      	beq.n	800d4b6 <__multiply+0x14e>
 800d40e:	9b01      	ldr	r3, [sp, #4]
 800d410:	9a02      	ldr	r2, [sp, #8]
 800d412:	0018      	movs	r0, r3
 800d414:	611a      	str	r2, [r3, #16]
 800d416:	b009      	add	sp, #36	; 0x24
 800d418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41a:	c304      	stmia	r3!, {r2}
 800d41c:	e7cd      	b.n	800d3ba <__multiply+0x52>
 800d41e:	9b00      	ldr	r3, [sp, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	b298      	uxth	r0, r3
 800d424:	2800      	cmp	r0, #0
 800d426:	d01b      	beq.n	800d460 <__multiply+0xf8>
 800d428:	4667      	mov	r7, ip
 800d42a:	2400      	movs	r4, #0
 800d42c:	9e06      	ldr	r6, [sp, #24]
 800d42e:	ce02      	ldmia	r6!, {r1}
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	b28b      	uxth	r3, r1
 800d434:	4343      	muls	r3, r0
 800d436:	b292      	uxth	r2, r2
 800d438:	189b      	adds	r3, r3, r2
 800d43a:	191b      	adds	r3, r3, r4
 800d43c:	0c0c      	lsrs	r4, r1, #16
 800d43e:	4344      	muls	r4, r0
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	0c11      	lsrs	r1, r2, #16
 800d444:	1861      	adds	r1, r4, r1
 800d446:	0c1c      	lsrs	r4, r3, #16
 800d448:	1909      	adds	r1, r1, r4
 800d44a:	0c0c      	lsrs	r4, r1, #16
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	0409      	lsls	r1, r1, #16
 800d450:	430b      	orrs	r3, r1
 800d452:	c708      	stmia	r7!, {r3}
 800d454:	9b04      	ldr	r3, [sp, #16]
 800d456:	42b3      	cmp	r3, r6
 800d458:	d8e9      	bhi.n	800d42e <__multiply+0xc6>
 800d45a:	4663      	mov	r3, ip
 800d45c:	9a05      	ldr	r2, [sp, #20]
 800d45e:	509c      	str	r4, [r3, r2]
 800d460:	9b00      	ldr	r3, [sp, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	0c1e      	lsrs	r6, r3, #16
 800d466:	d020      	beq.n	800d4aa <__multiply+0x142>
 800d468:	4663      	mov	r3, ip
 800d46a:	002c      	movs	r4, r5
 800d46c:	4660      	mov	r0, ip
 800d46e:	2700      	movs	r7, #0
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3414      	adds	r4, #20
 800d474:	6822      	ldr	r2, [r4, #0]
 800d476:	b29b      	uxth	r3, r3
 800d478:	b291      	uxth	r1, r2
 800d47a:	4371      	muls	r1, r6
 800d47c:	6802      	ldr	r2, [r0, #0]
 800d47e:	0c12      	lsrs	r2, r2, #16
 800d480:	1889      	adds	r1, r1, r2
 800d482:	19cf      	adds	r7, r1, r7
 800d484:	0439      	lsls	r1, r7, #16
 800d486:	430b      	orrs	r3, r1
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	cc02      	ldmia	r4!, {r1}
 800d48c:	6843      	ldr	r3, [r0, #4]
 800d48e:	0c09      	lsrs	r1, r1, #16
 800d490:	4371      	muls	r1, r6
 800d492:	b29b      	uxth	r3, r3
 800d494:	0c3f      	lsrs	r7, r7, #16
 800d496:	18cb      	adds	r3, r1, r3
 800d498:	9a04      	ldr	r2, [sp, #16]
 800d49a:	19db      	adds	r3, r3, r7
 800d49c:	0c1f      	lsrs	r7, r3, #16
 800d49e:	3004      	adds	r0, #4
 800d4a0:	42a2      	cmp	r2, r4
 800d4a2:	d8e7      	bhi.n	800d474 <__multiply+0x10c>
 800d4a4:	4662      	mov	r2, ip
 800d4a6:	9905      	ldr	r1, [sp, #20]
 800d4a8:	5053      	str	r3, [r2, r1]
 800d4aa:	9b00      	ldr	r3, [sp, #0]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	449c      	add	ip, r3
 800d4b4:	e79d      	b.n	800d3f2 <__multiply+0x8a>
 800d4b6:	9b02      	ldr	r3, [sp, #8]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	9302      	str	r3, [sp, #8]
 800d4bc:	e79d      	b.n	800d3fa <__multiply+0x92>
 800d4be:	46c0      	nop			; (mov r8, r8)
 800d4c0:	0800e265 	.word	0x0800e265
 800d4c4:	0800e2d8 	.word	0x0800e2d8

0800d4c8 <__pow5mult>:
 800d4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	0015      	movs	r5, r2
 800d4ce:	0007      	movs	r7, r0
 800d4d0:	000e      	movs	r6, r1
 800d4d2:	401a      	ands	r2, r3
 800d4d4:	421d      	tst	r5, r3
 800d4d6:	d008      	beq.n	800d4ea <__pow5mult+0x22>
 800d4d8:	4925      	ldr	r1, [pc, #148]	; (800d570 <__pow5mult+0xa8>)
 800d4da:	3a01      	subs	r2, #1
 800d4dc:	0092      	lsls	r2, r2, #2
 800d4de:	5852      	ldr	r2, [r2, r1]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	0031      	movs	r1, r6
 800d4e4:	f7ff fe9e 	bl	800d224 <__multadd>
 800d4e8:	0006      	movs	r6, r0
 800d4ea:	10ad      	asrs	r5, r5, #2
 800d4ec:	d03d      	beq.n	800d56a <__pow5mult+0xa2>
 800d4ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d4f0:	2c00      	cmp	r4, #0
 800d4f2:	d10f      	bne.n	800d514 <__pow5mult+0x4c>
 800d4f4:	2010      	movs	r0, #16
 800d4f6:	f7fd fd49 	bl	800af8c <malloc>
 800d4fa:	1e02      	subs	r2, r0, #0
 800d4fc:	6278      	str	r0, [r7, #36]	; 0x24
 800d4fe:	d105      	bne.n	800d50c <__pow5mult+0x44>
 800d500:	21d7      	movs	r1, #215	; 0xd7
 800d502:	4b1c      	ldr	r3, [pc, #112]	; (800d574 <__pow5mult+0xac>)
 800d504:	481c      	ldr	r0, [pc, #112]	; (800d578 <__pow5mult+0xb0>)
 800d506:	0049      	lsls	r1, r1, #1
 800d508:	f7fd fcde 	bl	800aec8 <__assert_func>
 800d50c:	6044      	str	r4, [r0, #4]
 800d50e:	6084      	str	r4, [r0, #8]
 800d510:	6004      	str	r4, [r0, #0]
 800d512:	60c4      	str	r4, [r0, #12]
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	689c      	ldr	r4, [r3, #8]
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	2c00      	cmp	r4, #0
 800d51c:	d108      	bne.n	800d530 <__pow5mult+0x68>
 800d51e:	0038      	movs	r0, r7
 800d520:	4916      	ldr	r1, [pc, #88]	; (800d57c <__pow5mult+0xb4>)
 800d522:	f7ff ff0b 	bl	800d33c <__i2b>
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	0004      	movs	r4, r0
 800d52a:	6098      	str	r0, [r3, #8]
 800d52c:	2300      	movs	r3, #0
 800d52e:	6003      	str	r3, [r0, #0]
 800d530:	2301      	movs	r3, #1
 800d532:	421d      	tst	r5, r3
 800d534:	d00a      	beq.n	800d54c <__pow5mult+0x84>
 800d536:	0031      	movs	r1, r6
 800d538:	0022      	movs	r2, r4
 800d53a:	0038      	movs	r0, r7
 800d53c:	f7ff ff14 	bl	800d368 <__multiply>
 800d540:	0031      	movs	r1, r6
 800d542:	9001      	str	r0, [sp, #4]
 800d544:	0038      	movs	r0, r7
 800d546:	f7ff fe49 	bl	800d1dc <_Bfree>
 800d54a:	9e01      	ldr	r6, [sp, #4]
 800d54c:	106d      	asrs	r5, r5, #1
 800d54e:	d00c      	beq.n	800d56a <__pow5mult+0xa2>
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	2800      	cmp	r0, #0
 800d554:	d107      	bne.n	800d566 <__pow5mult+0x9e>
 800d556:	0022      	movs	r2, r4
 800d558:	0021      	movs	r1, r4
 800d55a:	0038      	movs	r0, r7
 800d55c:	f7ff ff04 	bl	800d368 <__multiply>
 800d560:	2300      	movs	r3, #0
 800d562:	6020      	str	r0, [r4, #0]
 800d564:	6003      	str	r3, [r0, #0]
 800d566:	0004      	movs	r4, r0
 800d568:	e7e2      	b.n	800d530 <__pow5mult+0x68>
 800d56a:	0030      	movs	r0, r6
 800d56c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d56e:	46c0      	nop			; (mov r8, r8)
 800d570:	0800e428 	.word	0x0800e428
 800d574:	0800e1f3 	.word	0x0800e1f3
 800d578:	0800e2d8 	.word	0x0800e2d8
 800d57c:	00000271 	.word	0x00000271

0800d580 <__lshift>:
 800d580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d582:	000c      	movs	r4, r1
 800d584:	0017      	movs	r7, r2
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	1155      	asrs	r5, r2, #5
 800d58a:	b087      	sub	sp, #28
 800d58c:	18eb      	adds	r3, r5, r3
 800d58e:	9302      	str	r3, [sp, #8]
 800d590:	3301      	adds	r3, #1
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	6849      	ldr	r1, [r1, #4]
 800d596:	68a3      	ldr	r3, [r4, #8]
 800d598:	9004      	str	r0, [sp, #16]
 800d59a:	9a01      	ldr	r2, [sp, #4]
 800d59c:	4293      	cmp	r3, r2
 800d59e:	db10      	blt.n	800d5c2 <__lshift+0x42>
 800d5a0:	9804      	ldr	r0, [sp, #16]
 800d5a2:	f7ff fdd7 	bl	800d154 <_Balloc>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	0002      	movs	r2, r0
 800d5aa:	0006      	movs	r6, r0
 800d5ac:	0019      	movs	r1, r3
 800d5ae:	3214      	adds	r2, #20
 800d5b0:	4298      	cmp	r0, r3
 800d5b2:	d10c      	bne.n	800d5ce <__lshift+0x4e>
 800d5b4:	21da      	movs	r1, #218	; 0xda
 800d5b6:	0002      	movs	r2, r0
 800d5b8:	4b26      	ldr	r3, [pc, #152]	; (800d654 <__lshift+0xd4>)
 800d5ba:	4827      	ldr	r0, [pc, #156]	; (800d658 <__lshift+0xd8>)
 800d5bc:	31ff      	adds	r1, #255	; 0xff
 800d5be:	f7fd fc83 	bl	800aec8 <__assert_func>
 800d5c2:	3101      	adds	r1, #1
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	e7e8      	b.n	800d59a <__lshift+0x1a>
 800d5c8:	0098      	lsls	r0, r3, #2
 800d5ca:	5011      	str	r1, [r2, r0]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	42ab      	cmp	r3, r5
 800d5d0:	dbfa      	blt.n	800d5c8 <__lshift+0x48>
 800d5d2:	43eb      	mvns	r3, r5
 800d5d4:	17db      	asrs	r3, r3, #31
 800d5d6:	401d      	ands	r5, r3
 800d5d8:	211f      	movs	r1, #31
 800d5da:	0023      	movs	r3, r4
 800d5dc:	0038      	movs	r0, r7
 800d5de:	00ad      	lsls	r5, r5, #2
 800d5e0:	1955      	adds	r5, r2, r5
 800d5e2:	6922      	ldr	r2, [r4, #16]
 800d5e4:	3314      	adds	r3, #20
 800d5e6:	0092      	lsls	r2, r2, #2
 800d5e8:	4008      	ands	r0, r1
 800d5ea:	4684      	mov	ip, r0
 800d5ec:	189a      	adds	r2, r3, r2
 800d5ee:	420f      	tst	r7, r1
 800d5f0:	d02a      	beq.n	800d648 <__lshift+0xc8>
 800d5f2:	3101      	adds	r1, #1
 800d5f4:	1a09      	subs	r1, r1, r0
 800d5f6:	9105      	str	r1, [sp, #20]
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	9503      	str	r5, [sp, #12]
 800d5fc:	4667      	mov	r7, ip
 800d5fe:	6818      	ldr	r0, [r3, #0]
 800d600:	40b8      	lsls	r0, r7
 800d602:	4301      	orrs	r1, r0
 800d604:	9803      	ldr	r0, [sp, #12]
 800d606:	c002      	stmia	r0!, {r1}
 800d608:	cb02      	ldmia	r3!, {r1}
 800d60a:	9003      	str	r0, [sp, #12]
 800d60c:	9805      	ldr	r0, [sp, #20]
 800d60e:	40c1      	lsrs	r1, r0
 800d610:	429a      	cmp	r2, r3
 800d612:	d8f3      	bhi.n	800d5fc <__lshift+0x7c>
 800d614:	0020      	movs	r0, r4
 800d616:	3015      	adds	r0, #21
 800d618:	2304      	movs	r3, #4
 800d61a:	4282      	cmp	r2, r0
 800d61c:	d304      	bcc.n	800d628 <__lshift+0xa8>
 800d61e:	1b13      	subs	r3, r2, r4
 800d620:	3b15      	subs	r3, #21
 800d622:	089b      	lsrs	r3, r3, #2
 800d624:	3301      	adds	r3, #1
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	50e9      	str	r1, [r5, r3]
 800d62a:	2900      	cmp	r1, #0
 800d62c:	d002      	beq.n	800d634 <__lshift+0xb4>
 800d62e:	9b02      	ldr	r3, [sp, #8]
 800d630:	3302      	adds	r3, #2
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	9804      	ldr	r0, [sp, #16]
 800d638:	3b01      	subs	r3, #1
 800d63a:	0021      	movs	r1, r4
 800d63c:	6133      	str	r3, [r6, #16]
 800d63e:	f7ff fdcd 	bl	800d1dc <_Bfree>
 800d642:	0030      	movs	r0, r6
 800d644:	b007      	add	sp, #28
 800d646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d648:	cb02      	ldmia	r3!, {r1}
 800d64a:	c502      	stmia	r5!, {r1}
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d8fb      	bhi.n	800d648 <__lshift+0xc8>
 800d650:	e7f0      	b.n	800d634 <__lshift+0xb4>
 800d652:	46c0      	nop			; (mov r8, r8)
 800d654:	0800e265 	.word	0x0800e265
 800d658:	0800e2d8 	.word	0x0800e2d8

0800d65c <__mcmp>:
 800d65c:	6902      	ldr	r2, [r0, #16]
 800d65e:	690b      	ldr	r3, [r1, #16]
 800d660:	b530      	push	{r4, r5, lr}
 800d662:	0004      	movs	r4, r0
 800d664:	1ad0      	subs	r0, r2, r3
 800d666:	429a      	cmp	r2, r3
 800d668:	d10d      	bne.n	800d686 <__mcmp+0x2a>
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	3414      	adds	r4, #20
 800d66e:	3114      	adds	r1, #20
 800d670:	18e2      	adds	r2, r4, r3
 800d672:	18c9      	adds	r1, r1, r3
 800d674:	3a04      	subs	r2, #4
 800d676:	3904      	subs	r1, #4
 800d678:	6815      	ldr	r5, [r2, #0]
 800d67a:	680b      	ldr	r3, [r1, #0]
 800d67c:	429d      	cmp	r5, r3
 800d67e:	d003      	beq.n	800d688 <__mcmp+0x2c>
 800d680:	2001      	movs	r0, #1
 800d682:	429d      	cmp	r5, r3
 800d684:	d303      	bcc.n	800d68e <__mcmp+0x32>
 800d686:	bd30      	pop	{r4, r5, pc}
 800d688:	4294      	cmp	r4, r2
 800d68a:	d3f3      	bcc.n	800d674 <__mcmp+0x18>
 800d68c:	e7fb      	b.n	800d686 <__mcmp+0x2a>
 800d68e:	4240      	negs	r0, r0
 800d690:	e7f9      	b.n	800d686 <__mcmp+0x2a>
	...

0800d694 <__mdiff>:
 800d694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d696:	000e      	movs	r6, r1
 800d698:	0007      	movs	r7, r0
 800d69a:	0011      	movs	r1, r2
 800d69c:	0030      	movs	r0, r6
 800d69e:	b087      	sub	sp, #28
 800d6a0:	0014      	movs	r4, r2
 800d6a2:	f7ff ffdb 	bl	800d65c <__mcmp>
 800d6a6:	1e05      	subs	r5, r0, #0
 800d6a8:	d110      	bne.n	800d6cc <__mdiff+0x38>
 800d6aa:	0001      	movs	r1, r0
 800d6ac:	0038      	movs	r0, r7
 800d6ae:	f7ff fd51 	bl	800d154 <_Balloc>
 800d6b2:	1e02      	subs	r2, r0, #0
 800d6b4:	d104      	bne.n	800d6c0 <__mdiff+0x2c>
 800d6b6:	4b40      	ldr	r3, [pc, #256]	; (800d7b8 <__mdiff+0x124>)
 800d6b8:	4940      	ldr	r1, [pc, #256]	; (800d7bc <__mdiff+0x128>)
 800d6ba:	4841      	ldr	r0, [pc, #260]	; (800d7c0 <__mdiff+0x12c>)
 800d6bc:	f7fd fc04 	bl	800aec8 <__assert_func>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	6145      	str	r5, [r0, #20]
 800d6c4:	6103      	str	r3, [r0, #16]
 800d6c6:	0010      	movs	r0, r2
 800d6c8:	b007      	add	sp, #28
 800d6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	db04      	blt.n	800d6de <__mdiff+0x4a>
 800d6d4:	0023      	movs	r3, r4
 800d6d6:	0034      	movs	r4, r6
 800d6d8:	001e      	movs	r6, r3
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	0038      	movs	r0, r7
 800d6e0:	6861      	ldr	r1, [r4, #4]
 800d6e2:	f7ff fd37 	bl	800d154 <_Balloc>
 800d6e6:	1e02      	subs	r2, r0, #0
 800d6e8:	d103      	bne.n	800d6f2 <__mdiff+0x5e>
 800d6ea:	2190      	movs	r1, #144	; 0x90
 800d6ec:	4b32      	ldr	r3, [pc, #200]	; (800d7b8 <__mdiff+0x124>)
 800d6ee:	0089      	lsls	r1, r1, #2
 800d6f0:	e7e3      	b.n	800d6ba <__mdiff+0x26>
 800d6f2:	9b01      	ldr	r3, [sp, #4]
 800d6f4:	2700      	movs	r7, #0
 800d6f6:	60c3      	str	r3, [r0, #12]
 800d6f8:	6920      	ldr	r0, [r4, #16]
 800d6fa:	3414      	adds	r4, #20
 800d6fc:	9401      	str	r4, [sp, #4]
 800d6fe:	9b01      	ldr	r3, [sp, #4]
 800d700:	0084      	lsls	r4, r0, #2
 800d702:	191b      	adds	r3, r3, r4
 800d704:	0034      	movs	r4, r6
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	6933      	ldr	r3, [r6, #16]
 800d70a:	3414      	adds	r4, #20
 800d70c:	0099      	lsls	r1, r3, #2
 800d70e:	1863      	adds	r3, r4, r1
 800d710:	9303      	str	r3, [sp, #12]
 800d712:	0013      	movs	r3, r2
 800d714:	3314      	adds	r3, #20
 800d716:	469c      	mov	ip, r3
 800d718:	9305      	str	r3, [sp, #20]
 800d71a:	9b01      	ldr	r3, [sp, #4]
 800d71c:	9304      	str	r3, [sp, #16]
 800d71e:	9b04      	ldr	r3, [sp, #16]
 800d720:	cc02      	ldmia	r4!, {r1}
 800d722:	cb20      	ldmia	r3!, {r5}
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	b2ab      	uxth	r3, r5
 800d728:	19df      	adds	r7, r3, r7
 800d72a:	b28b      	uxth	r3, r1
 800d72c:	1afb      	subs	r3, r7, r3
 800d72e:	0c09      	lsrs	r1, r1, #16
 800d730:	0c2d      	lsrs	r5, r5, #16
 800d732:	1a6d      	subs	r5, r5, r1
 800d734:	1419      	asrs	r1, r3, #16
 800d736:	186d      	adds	r5, r5, r1
 800d738:	4661      	mov	r1, ip
 800d73a:	142f      	asrs	r7, r5, #16
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	042d      	lsls	r5, r5, #16
 800d740:	432b      	orrs	r3, r5
 800d742:	c108      	stmia	r1!, {r3}
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	468c      	mov	ip, r1
 800d748:	42a3      	cmp	r3, r4
 800d74a:	d8e8      	bhi.n	800d71e <__mdiff+0x8a>
 800d74c:	0031      	movs	r1, r6
 800d74e:	9c03      	ldr	r4, [sp, #12]
 800d750:	3115      	adds	r1, #21
 800d752:	2304      	movs	r3, #4
 800d754:	428c      	cmp	r4, r1
 800d756:	d304      	bcc.n	800d762 <__mdiff+0xce>
 800d758:	1ba3      	subs	r3, r4, r6
 800d75a:	3b15      	subs	r3, #21
 800d75c:	089b      	lsrs	r3, r3, #2
 800d75e:	3301      	adds	r3, #1
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	9901      	ldr	r1, [sp, #4]
 800d764:	18cc      	adds	r4, r1, r3
 800d766:	9905      	ldr	r1, [sp, #20]
 800d768:	0026      	movs	r6, r4
 800d76a:	18cb      	adds	r3, r1, r3
 800d76c:	469c      	mov	ip, r3
 800d76e:	9902      	ldr	r1, [sp, #8]
 800d770:	428e      	cmp	r6, r1
 800d772:	d310      	bcc.n	800d796 <__mdiff+0x102>
 800d774:	9e02      	ldr	r6, [sp, #8]
 800d776:	1ee1      	subs	r1, r4, #3
 800d778:	2500      	movs	r5, #0
 800d77a:	428e      	cmp	r6, r1
 800d77c:	d304      	bcc.n	800d788 <__mdiff+0xf4>
 800d77e:	0031      	movs	r1, r6
 800d780:	3103      	adds	r1, #3
 800d782:	1b0c      	subs	r4, r1, r4
 800d784:	08a4      	lsrs	r4, r4, #2
 800d786:	00a5      	lsls	r5, r4, #2
 800d788:	195b      	adds	r3, r3, r5
 800d78a:	3b04      	subs	r3, #4
 800d78c:	6819      	ldr	r1, [r3, #0]
 800d78e:	2900      	cmp	r1, #0
 800d790:	d00f      	beq.n	800d7b2 <__mdiff+0x11e>
 800d792:	6110      	str	r0, [r2, #16]
 800d794:	e797      	b.n	800d6c6 <__mdiff+0x32>
 800d796:	ce02      	ldmia	r6!, {r1}
 800d798:	b28d      	uxth	r5, r1
 800d79a:	19ed      	adds	r5, r5, r7
 800d79c:	0c0f      	lsrs	r7, r1, #16
 800d79e:	1429      	asrs	r1, r5, #16
 800d7a0:	1879      	adds	r1, r7, r1
 800d7a2:	140f      	asrs	r7, r1, #16
 800d7a4:	b2ad      	uxth	r5, r5
 800d7a6:	0409      	lsls	r1, r1, #16
 800d7a8:	430d      	orrs	r5, r1
 800d7aa:	4661      	mov	r1, ip
 800d7ac:	c120      	stmia	r1!, {r5}
 800d7ae:	468c      	mov	ip, r1
 800d7b0:	e7dd      	b.n	800d76e <__mdiff+0xda>
 800d7b2:	3801      	subs	r0, #1
 800d7b4:	e7e9      	b.n	800d78a <__mdiff+0xf6>
 800d7b6:	46c0      	nop			; (mov r8, r8)
 800d7b8:	0800e265 	.word	0x0800e265
 800d7bc:	00000232 	.word	0x00000232
 800d7c0:	0800e2d8 	.word	0x0800e2d8

0800d7c4 <__d2b>:
 800d7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	0014      	movs	r4, r2
 800d7ca:	001e      	movs	r6, r3
 800d7cc:	9f08      	ldr	r7, [sp, #32]
 800d7ce:	f7ff fcc1 	bl	800d154 <_Balloc>
 800d7d2:	1e05      	subs	r5, r0, #0
 800d7d4:	d105      	bne.n	800d7e2 <__d2b+0x1e>
 800d7d6:	0002      	movs	r2, r0
 800d7d8:	4b26      	ldr	r3, [pc, #152]	; (800d874 <__d2b+0xb0>)
 800d7da:	4927      	ldr	r1, [pc, #156]	; (800d878 <__d2b+0xb4>)
 800d7dc:	4827      	ldr	r0, [pc, #156]	; (800d87c <__d2b+0xb8>)
 800d7de:	f7fd fb73 	bl	800aec8 <__assert_func>
 800d7e2:	0333      	lsls	r3, r6, #12
 800d7e4:	0076      	lsls	r6, r6, #1
 800d7e6:	0b1b      	lsrs	r3, r3, #12
 800d7e8:	0d76      	lsrs	r6, r6, #21
 800d7ea:	d124      	bne.n	800d836 <__d2b+0x72>
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	2c00      	cmp	r4, #0
 800d7f0:	d027      	beq.n	800d842 <__d2b+0x7e>
 800d7f2:	4668      	mov	r0, sp
 800d7f4:	9400      	str	r4, [sp, #0]
 800d7f6:	f7ff fd73 	bl	800d2e0 <__lo0bits>
 800d7fa:	9c00      	ldr	r4, [sp, #0]
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d01e      	beq.n	800d83e <__d2b+0x7a>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	2120      	movs	r1, #32
 800d804:	001a      	movs	r2, r3
 800d806:	1a09      	subs	r1, r1, r0
 800d808:	408a      	lsls	r2, r1
 800d80a:	40c3      	lsrs	r3, r0
 800d80c:	4322      	orrs	r2, r4
 800d80e:	616a      	str	r2, [r5, #20]
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	9c01      	ldr	r4, [sp, #4]
 800d814:	61ac      	str	r4, [r5, #24]
 800d816:	1e63      	subs	r3, r4, #1
 800d818:	419c      	sbcs	r4, r3
 800d81a:	3401      	adds	r4, #1
 800d81c:	612c      	str	r4, [r5, #16]
 800d81e:	2e00      	cmp	r6, #0
 800d820:	d018      	beq.n	800d854 <__d2b+0x90>
 800d822:	4b17      	ldr	r3, [pc, #92]	; (800d880 <__d2b+0xbc>)
 800d824:	18f6      	adds	r6, r6, r3
 800d826:	2335      	movs	r3, #53	; 0x35
 800d828:	1836      	adds	r6, r6, r0
 800d82a:	1a18      	subs	r0, r3, r0
 800d82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82e:	603e      	str	r6, [r7, #0]
 800d830:	6018      	str	r0, [r3, #0]
 800d832:	0028      	movs	r0, r5
 800d834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d836:	2280      	movs	r2, #128	; 0x80
 800d838:	0352      	lsls	r2, r2, #13
 800d83a:	4313      	orrs	r3, r2
 800d83c:	e7d6      	b.n	800d7ec <__d2b+0x28>
 800d83e:	616c      	str	r4, [r5, #20]
 800d840:	e7e7      	b.n	800d812 <__d2b+0x4e>
 800d842:	a801      	add	r0, sp, #4
 800d844:	f7ff fd4c 	bl	800d2e0 <__lo0bits>
 800d848:	2401      	movs	r4, #1
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	612c      	str	r4, [r5, #16]
 800d84e:	616b      	str	r3, [r5, #20]
 800d850:	3020      	adds	r0, #32
 800d852:	e7e4      	b.n	800d81e <__d2b+0x5a>
 800d854:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <__d2b+0xc0>)
 800d856:	18c0      	adds	r0, r0, r3
 800d858:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <__d2b+0xc4>)
 800d85a:	6038      	str	r0, [r7, #0]
 800d85c:	18e3      	adds	r3, r4, r3
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	18eb      	adds	r3, r5, r3
 800d862:	6958      	ldr	r0, [r3, #20]
 800d864:	f7ff fd22 	bl	800d2ac <__hi0bits>
 800d868:	0164      	lsls	r4, r4, #5
 800d86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d86c:	1a24      	subs	r4, r4, r0
 800d86e:	601c      	str	r4, [r3, #0]
 800d870:	e7df      	b.n	800d832 <__d2b+0x6e>
 800d872:	46c0      	nop			; (mov r8, r8)
 800d874:	0800e265 	.word	0x0800e265
 800d878:	0000030a 	.word	0x0000030a
 800d87c:	0800e2d8 	.word	0x0800e2d8
 800d880:	fffffbcd 	.word	0xfffffbcd
 800d884:	fffffbce 	.word	0xfffffbce
 800d888:	3fffffff 	.word	0x3fffffff

0800d88c <_raise_r>:
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	0004      	movs	r4, r0
 800d890:	000d      	movs	r5, r1
 800d892:	291f      	cmp	r1, #31
 800d894:	d904      	bls.n	800d8a0 <_raise_r+0x14>
 800d896:	2316      	movs	r3, #22
 800d898:	6003      	str	r3, [r0, #0]
 800d89a:	2001      	movs	r0, #1
 800d89c:	4240      	negs	r0, r0
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d004      	beq.n	800d8b0 <_raise_r+0x24>
 800d8a6:	008a      	lsls	r2, r1, #2
 800d8a8:	189b      	adds	r3, r3, r2
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d108      	bne.n	800d8c2 <_raise_r+0x36>
 800d8b0:	0020      	movs	r0, r4
 800d8b2:	f000 f831 	bl	800d918 <_getpid_r>
 800d8b6:	002a      	movs	r2, r5
 800d8b8:	0001      	movs	r1, r0
 800d8ba:	0020      	movs	r0, r4
 800d8bc:	f000 f81a 	bl	800d8f4 <_kill_r>
 800d8c0:	e7ed      	b.n	800d89e <_raise_r+0x12>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	2a01      	cmp	r2, #1
 800d8c6:	d0ea      	beq.n	800d89e <_raise_r+0x12>
 800d8c8:	1c51      	adds	r1, r2, #1
 800d8ca:	d103      	bne.n	800d8d4 <_raise_r+0x48>
 800d8cc:	2316      	movs	r3, #22
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	e7e4      	b.n	800d89e <_raise_r+0x12>
 800d8d4:	2400      	movs	r4, #0
 800d8d6:	0028      	movs	r0, r5
 800d8d8:	601c      	str	r4, [r3, #0]
 800d8da:	4790      	blx	r2
 800d8dc:	0020      	movs	r0, r4
 800d8de:	e7de      	b.n	800d89e <_raise_r+0x12>

0800d8e0 <raise>:
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	4b03      	ldr	r3, [pc, #12]	; (800d8f0 <raise+0x10>)
 800d8e4:	0001      	movs	r1, r0
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	f7ff ffd0 	bl	800d88c <_raise_r>
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	20000094 	.word	0x20000094

0800d8f4 <_kill_r>:
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	b570      	push	{r4, r5, r6, lr}
 800d8f8:	4d06      	ldr	r5, [pc, #24]	; (800d914 <_kill_r+0x20>)
 800d8fa:	0004      	movs	r4, r0
 800d8fc:	0008      	movs	r0, r1
 800d8fe:	0011      	movs	r1, r2
 800d900:	602b      	str	r3, [r5, #0]
 800d902:	f7f5 f9af 	bl	8002c64 <_kill>
 800d906:	1c43      	adds	r3, r0, #1
 800d908:	d103      	bne.n	800d912 <_kill_r+0x1e>
 800d90a:	682b      	ldr	r3, [r5, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d000      	beq.n	800d912 <_kill_r+0x1e>
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	20000750 	.word	0x20000750

0800d918 <_getpid_r>:
 800d918:	b510      	push	{r4, lr}
 800d91a:	f7f5 f99d 	bl	8002c58 <_getpid>
 800d91e:	bd10      	pop	{r4, pc}

0800d920 <__sread>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	000c      	movs	r4, r1
 800d924:	250e      	movs	r5, #14
 800d926:	5f49      	ldrsh	r1, [r1, r5]
 800d928:	f000 f8b6 	bl	800da98 <_read_r>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	db03      	blt.n	800d938 <__sread+0x18>
 800d930:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d932:	181b      	adds	r3, r3, r0
 800d934:	6563      	str	r3, [r4, #84]	; 0x54
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	4a02      	ldr	r2, [pc, #8]	; (800d944 <__sread+0x24>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	e7f9      	b.n	800d936 <__sread+0x16>
 800d942:	46c0      	nop			; (mov r8, r8)
 800d944:	ffffefff 	.word	0xffffefff

0800d948 <__swrite>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	001f      	movs	r7, r3
 800d94c:	898b      	ldrh	r3, [r1, #12]
 800d94e:	0005      	movs	r5, r0
 800d950:	000c      	movs	r4, r1
 800d952:	0016      	movs	r6, r2
 800d954:	05db      	lsls	r3, r3, #23
 800d956:	d505      	bpl.n	800d964 <__swrite+0x1c>
 800d958:	230e      	movs	r3, #14
 800d95a:	5ec9      	ldrsh	r1, [r1, r3]
 800d95c:	2200      	movs	r2, #0
 800d95e:	2302      	movs	r3, #2
 800d960:	f000 f874 	bl	800da4c <_lseek_r>
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	4a05      	ldr	r2, [pc, #20]	; (800d97c <__swrite+0x34>)
 800d968:	0028      	movs	r0, r5
 800d96a:	4013      	ands	r3, r2
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	0032      	movs	r2, r6
 800d970:	230e      	movs	r3, #14
 800d972:	5ee1      	ldrsh	r1, [r4, r3]
 800d974:	003b      	movs	r3, r7
 800d976:	f000 f81f 	bl	800d9b8 <_write_r>
 800d97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97c:	ffffefff 	.word	0xffffefff

0800d980 <__sseek>:
 800d980:	b570      	push	{r4, r5, r6, lr}
 800d982:	000c      	movs	r4, r1
 800d984:	250e      	movs	r5, #14
 800d986:	5f49      	ldrsh	r1, [r1, r5]
 800d988:	f000 f860 	bl	800da4c <_lseek_r>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	1c42      	adds	r2, r0, #1
 800d990:	d103      	bne.n	800d99a <__sseek+0x1a>
 800d992:	4a05      	ldr	r2, [pc, #20]	; (800d9a8 <__sseek+0x28>)
 800d994:	4013      	ands	r3, r2
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	bd70      	pop	{r4, r5, r6, pc}
 800d99a:	2280      	movs	r2, #128	; 0x80
 800d99c:	0152      	lsls	r2, r2, #5
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	6560      	str	r0, [r4, #84]	; 0x54
 800d9a4:	e7f8      	b.n	800d998 <__sseek+0x18>
 800d9a6:	46c0      	nop			; (mov r8, r8)
 800d9a8:	ffffefff 	.word	0xffffefff

0800d9ac <__sclose>:
 800d9ac:	b510      	push	{r4, lr}
 800d9ae:	230e      	movs	r3, #14
 800d9b0:	5ec9      	ldrsh	r1, [r1, r3]
 800d9b2:	f000 f815 	bl	800d9e0 <_close_r>
 800d9b6:	bd10      	pop	{r4, pc}

0800d9b8 <_write_r>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	0004      	movs	r4, r0
 800d9bc:	0008      	movs	r0, r1
 800d9be:	0011      	movs	r1, r2
 800d9c0:	001a      	movs	r2, r3
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	4d05      	ldr	r5, [pc, #20]	; (800d9dc <_write_r+0x24>)
 800d9c6:	602b      	str	r3, [r5, #0]
 800d9c8:	f7f5 f985 	bl	8002cd6 <_write>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d103      	bne.n	800d9d8 <_write_r+0x20>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d000      	beq.n	800d9d8 <_write_r+0x20>
 800d9d6:	6023      	str	r3, [r4, #0]
 800d9d8:	bd70      	pop	{r4, r5, r6, pc}
 800d9da:	46c0      	nop			; (mov r8, r8)
 800d9dc:	20000750 	.word	0x20000750

0800d9e0 <_close_r>:
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	b570      	push	{r4, r5, r6, lr}
 800d9e4:	4d06      	ldr	r5, [pc, #24]	; (800da00 <_close_r+0x20>)
 800d9e6:	0004      	movs	r4, r0
 800d9e8:	0008      	movs	r0, r1
 800d9ea:	602b      	str	r3, [r5, #0]
 800d9ec:	f7f5 f98f 	bl	8002d0e <_close>
 800d9f0:	1c43      	adds	r3, r0, #1
 800d9f2:	d103      	bne.n	800d9fc <_close_r+0x1c>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d000      	beq.n	800d9fc <_close_r+0x1c>
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	bd70      	pop	{r4, r5, r6, pc}
 800d9fe:	46c0      	nop			; (mov r8, r8)
 800da00:	20000750 	.word	0x20000750

0800da04 <_fstat_r>:
 800da04:	2300      	movs	r3, #0
 800da06:	b570      	push	{r4, r5, r6, lr}
 800da08:	4d06      	ldr	r5, [pc, #24]	; (800da24 <_fstat_r+0x20>)
 800da0a:	0004      	movs	r4, r0
 800da0c:	0008      	movs	r0, r1
 800da0e:	0011      	movs	r1, r2
 800da10:	602b      	str	r3, [r5, #0]
 800da12:	f7f5 f986 	bl	8002d22 <_fstat>
 800da16:	1c43      	adds	r3, r0, #1
 800da18:	d103      	bne.n	800da22 <_fstat_r+0x1e>
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d000      	beq.n	800da22 <_fstat_r+0x1e>
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	20000750 	.word	0x20000750

0800da28 <_isatty_r>:
 800da28:	2300      	movs	r3, #0
 800da2a:	b570      	push	{r4, r5, r6, lr}
 800da2c:	4d06      	ldr	r5, [pc, #24]	; (800da48 <_isatty_r+0x20>)
 800da2e:	0004      	movs	r4, r0
 800da30:	0008      	movs	r0, r1
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	f7f5 f983 	bl	8002d3e <_isatty>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d103      	bne.n	800da44 <_isatty_r+0x1c>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d000      	beq.n	800da44 <_isatty_r+0x1c>
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	bd70      	pop	{r4, r5, r6, pc}
 800da46:	46c0      	nop			; (mov r8, r8)
 800da48:	20000750 	.word	0x20000750

0800da4c <_lseek_r>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	0004      	movs	r4, r0
 800da50:	0008      	movs	r0, r1
 800da52:	0011      	movs	r1, r2
 800da54:	001a      	movs	r2, r3
 800da56:	2300      	movs	r3, #0
 800da58:	4d05      	ldr	r5, [pc, #20]	; (800da70 <_lseek_r+0x24>)
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	f7f5 f978 	bl	8002d50 <_lseek>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d103      	bne.n	800da6c <_lseek_r+0x20>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d000      	beq.n	800da6c <_lseek_r+0x20>
 800da6a:	6023      	str	r3, [r4, #0]
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
 800da6e:	46c0      	nop			; (mov r8, r8)
 800da70:	20000750 	.word	0x20000750

0800da74 <__ascii_mbtowc>:
 800da74:	b082      	sub	sp, #8
 800da76:	2900      	cmp	r1, #0
 800da78:	d100      	bne.n	800da7c <__ascii_mbtowc+0x8>
 800da7a:	a901      	add	r1, sp, #4
 800da7c:	1e10      	subs	r0, r2, #0
 800da7e:	d006      	beq.n	800da8e <__ascii_mbtowc+0x1a>
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <__ascii_mbtowc+0x1e>
 800da84:	7813      	ldrb	r3, [r2, #0]
 800da86:	600b      	str	r3, [r1, #0]
 800da88:	7810      	ldrb	r0, [r2, #0]
 800da8a:	1e43      	subs	r3, r0, #1
 800da8c:	4198      	sbcs	r0, r3
 800da8e:	b002      	add	sp, #8
 800da90:	4770      	bx	lr
 800da92:	2002      	movs	r0, #2
 800da94:	4240      	negs	r0, r0
 800da96:	e7fa      	b.n	800da8e <__ascii_mbtowc+0x1a>

0800da98 <_read_r>:
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	0004      	movs	r4, r0
 800da9c:	0008      	movs	r0, r1
 800da9e:	0011      	movs	r1, r2
 800daa0:	001a      	movs	r2, r3
 800daa2:	2300      	movs	r3, #0
 800daa4:	4d05      	ldr	r5, [pc, #20]	; (800dabc <_read_r+0x24>)
 800daa6:	602b      	str	r3, [r5, #0]
 800daa8:	f7f5 f8f8 	bl	8002c9c <_read>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d103      	bne.n	800dab8 <_read_r+0x20>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d000      	beq.n	800dab8 <_read_r+0x20>
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	bd70      	pop	{r4, r5, r6, pc}
 800daba:	46c0      	nop			; (mov r8, r8)
 800dabc:	20000750 	.word	0x20000750

0800dac0 <__ascii_wctomb>:
 800dac0:	0003      	movs	r3, r0
 800dac2:	1e08      	subs	r0, r1, #0
 800dac4:	d005      	beq.n	800dad2 <__ascii_wctomb+0x12>
 800dac6:	2aff      	cmp	r2, #255	; 0xff
 800dac8:	d904      	bls.n	800dad4 <__ascii_wctomb+0x14>
 800daca:	228a      	movs	r2, #138	; 0x8a
 800dacc:	2001      	movs	r0, #1
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	4240      	negs	r0, r0
 800dad2:	4770      	bx	lr
 800dad4:	2001      	movs	r0, #1
 800dad6:	700a      	strb	r2, [r1, #0]
 800dad8:	e7fb      	b.n	800dad2 <__ascii_wctomb+0x12>
	...

0800dadc <_init>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dae2:	bc08      	pop	{r3}
 800dae4:	469e      	mov	lr, r3
 800dae6:	4770      	bx	lr

0800dae8 <_fini>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	46c0      	nop			; (mov r8, r8)
 800daec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daee:	bc08      	pop	{r3}
 800daf0:	469e      	mov	lr, r3
 800daf2:	4770      	bx	lr
